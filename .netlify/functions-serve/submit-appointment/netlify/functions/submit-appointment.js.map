{
  "version": 3,
  "sources": ["../../../../../../atende/node_modules/postgres-array/index.js", "../../../../../../atende/node_modules/pg-types/lib/arrayParser.js", "../../../../../../atende/node_modules/postgres-date/index.js", "../../../../../../atende/node_modules/xtend/mutable.js", "../../../../../../atende/node_modules/postgres-interval/index.js", "../../../../../../atende/node_modules/postgres-bytea/index.js", "../../../../../../atende/node_modules/pg-types/lib/textParsers.js", "../../../../../../atende/node_modules/pg-int8/index.js", "../../../../../../atende/node_modules/pg-types/lib/binaryParsers.js", "../../../../../../atende/node_modules/pg-types/lib/builtins.js", "../../../../../../atende/node_modules/pg-types/index.js", "../../../../../../atende/node_modules/pg/lib/defaults.js", "../../../../../../atende/node_modules/pg/lib/utils.js", "../../../../../../atende/node_modules/pg/lib/crypto/utils-legacy.js", "../../../../../../atende/node_modules/pg/lib/crypto/utils-webcrypto.js", "../../../../../../atende/node_modules/pg/lib/crypto/utils.js", "../../../../../../atende/node_modules/pg/lib/crypto/cert-signatures.js", "../../../../../../atende/node_modules/pg/lib/crypto/sasl.js", "../../../../../../atende/node_modules/pg/lib/type-overrides.js", "../../../../../../atende/node_modules/pg-connection-string/index.js", "../../../../../../atende/node_modules/pg/lib/connection-parameters.js", "../../../../../../atende/node_modules/pg/lib/result.js", "../../../../../../atende/node_modules/pg/lib/query.js", "../../../../../../atende/node_modules/pg-protocol/src/messages.ts", "../../../../../../atende/node_modules/pg-protocol/src/buffer-writer.ts", "../../../../../../atende/node_modules/pg-protocol/src/serializer.ts", "../../../../../../atende/node_modules/pg-protocol/src/buffer-reader.ts", "../../../../../../atende/node_modules/pg-protocol/src/parser.ts", "../../../../../../atende/node_modules/pg-protocol/src/index.ts", "../../../../../../atende/node_modules/pg-cloudflare/src/empty.ts", "../../../../../../atende/node_modules/pg/lib/stream.js", "../../../../../../atende/node_modules/pg/lib/connection.js", "../../../../../../atende/node_modules/split2/index.js", "../../../../../../atende/node_modules/pgpass/lib/helper.js", "../../../../../../atende/node_modules/pgpass/lib/index.js", "../../../../../../atende/node_modules/pg/lib/client.js", "../../../../../../atende/node_modules/pg-pool/index.js", "../../../../../../atende/node_modules/pg/lib/native/query.js", "../../../../../../atende/node_modules/pg/lib/native/client.js", "../../../../../../atende/node_modules/pg/lib/native/index.js", "../../../../../../atende/node_modules/pg/lib/index.js", "../../../../../../atende/node_modules/nodemailer/lib/fetch/cookies.js", "../../../../../../atende/node_modules/nodemailer/package.json", "../../../../../../atende/node_modules/nodemailer/lib/fetch/index.js", "../../../../../../atende/node_modules/nodemailer/lib/shared/index.js", "../../../../../../atende/node_modules/nodemailer/lib/mime-funcs/mime-types.js", "../../../../../../atende/node_modules/nodemailer/lib/punycode/index.js", "../../../../../../atende/node_modules/nodemailer/lib/base64/index.js", "../../../../../../atende/node_modules/nodemailer/lib/qp/index.js", "../../../../../../atende/node_modules/nodemailer/lib/mime-funcs/index.js", "../../../../../../atende/node_modules/nodemailer/lib/addressparser/index.js", "../../../../../../atende/node_modules/nodemailer/lib/mime-node/last-newline.js", "../../../../../../atende/node_modules/nodemailer/lib/mime-node/le-windows.js", "../../../../../../atende/node_modules/nodemailer/lib/mime-node/le-unix.js", "../../../../../../atende/node_modules/nodemailer/lib/mime-node/index.js", "../../../../../../atende/node_modules/nodemailer/lib/mail-composer/index.js", "../../../../../../atende/node_modules/nodemailer/lib/dkim/message-parser.js", "../../../../../../atende/node_modules/nodemailer/lib/dkim/relaxed-body.js", "../../../../../../atende/node_modules/nodemailer/lib/dkim/sign.js", "../../../../../../atende/node_modules/nodemailer/lib/dkim/index.js", "../../../../../../atende/node_modules/nodemailer/lib/smtp-connection/http-proxy-client.js", "../../../../../../atende/node_modules/nodemailer/lib/mailer/mail-message.js", "../../../../../../atende/node_modules/nodemailer/lib/mailer/index.js", "../../../../../../atende/node_modules/nodemailer/lib/smtp-connection/data-stream.js", "../../../../../../atende/node_modules/nodemailer/lib/smtp-connection/index.js", "../../../../../../atende/node_modules/nodemailer/lib/xoauth2/index.js", "../../../../../../atende/node_modules/nodemailer/lib/smtp-pool/pool-resource.js", "../../../../../../atende/node_modules/nodemailer/lib/well-known/services.json", "../../../../../../atende/node_modules/nodemailer/lib/well-known/index.js", "../../../../../../atende/node_modules/nodemailer/lib/smtp-pool/index.js", "../../../../../../atende/node_modules/nodemailer/lib/smtp-transport/index.js", "../../../../../../atende/node_modules/nodemailer/lib/sendmail-transport/index.js", "../../../../../../atende/node_modules/nodemailer/lib/stream-transport/index.js", "../../../../../../atende/node_modules/nodemailer/lib/json-transport/index.js", "../../../../../../atende/node_modules/nodemailer/lib/ses-transport/index.js", "../../../../../../atende/node_modules/nodemailer/lib/nodemailer.js", "../../../../../../atende/netlify/functions/submit-appointment.cjs"],
  "sourceRoot": "C:/Users/User/AppData/Local/Temp/tmp-5876-e7Qyk6uZfLXI",
  "sourcesContent": ["'use strict'\n\nexports.parse = function (source, transform) {\n  return new ArrayParser(source, transform).parse()\n}\n\nclass ArrayParser {\n  constructor (source, transform) {\n    this.source = source\n    this.transform = transform || identity\n    this.position = 0\n    this.entries = []\n    this.recorded = []\n    this.dimension = 0\n  }\n\n  isEof () {\n    return this.position >= this.source.length\n  }\n\n  nextCharacter () {\n    var character = this.source[this.position++]\n    if (character === '\\\\') {\n      return {\n        value: this.source[this.position++],\n        escaped: true\n      }\n    }\n    return {\n      value: character,\n      escaped: false\n    }\n  }\n\n  record (character) {\n    this.recorded.push(character)\n  }\n\n  newEntry (includeEmpty) {\n    var entry\n    if (this.recorded.length > 0 || includeEmpty) {\n      entry = this.recorded.join('')\n      if (entry === 'NULL' && !includeEmpty) {\n        entry = null\n      }\n      if (entry !== null) entry = this.transform(entry)\n      this.entries.push(entry)\n      this.recorded = []\n    }\n  }\n\n  consumeDimensions () {\n    if (this.source[0] === '[') {\n      while (!this.isEof()) {\n        var char = this.nextCharacter()\n        if (char.value === '=') break\n      }\n    }\n  }\n\n  parse (nested) {\n    var character, parser, quote\n    this.consumeDimensions()\n    while (!this.isEof()) {\n      character = this.nextCharacter()\n      if (character.value === '{' && !quote) {\n        this.dimension++\n        if (this.dimension > 1) {\n          parser = new ArrayParser(this.source.substr(this.position - 1), this.transform)\n          this.entries.push(parser.parse(true))\n          this.position += parser.position - 2\n        }\n      } else if (character.value === '}' && !quote) {\n        this.dimension--\n        if (!this.dimension) {\n          this.newEntry()\n          if (nested) return this.entries\n        }\n      } else if (character.value === '\"' && !character.escaped) {\n        if (quote) this.newEntry(true)\n        quote = !quote\n      } else if (character.value === ',' && !quote) {\n        this.newEntry()\n      } else {\n        this.record(character.value)\n      }\n    }\n    if (this.dimension !== 0) {\n      throw new Error('array dimension not balanced')\n    }\n    return this.entries\n  }\n}\n\nfunction identity (value) {\n  return value\n}\n", "var array = require('postgres-array');\n\nmodule.exports = {\n  create: function (source, transform) {\n    return {\n      parse: function() {\n        return array.parse(source, transform);\n      }\n    };\n  }\n};\n", "'use strict'\n\nvar DATE_TIME = /(\\d{1,})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(\\.\\d{1,})?.*?( BC)?$/\nvar DATE = /^(\\d{1,})-(\\d{2})-(\\d{2})( BC)?$/\nvar TIME_ZONE = /([Z+-])(\\d{2})?:?(\\d{2})?:?(\\d{2})?/\nvar INFINITY = /^-?infinity$/\n\nmodule.exports = function parseDate (isoDate) {\n  if (INFINITY.test(isoDate)) {\n    // Capitalize to Infinity before passing to Number\n    return Number(isoDate.replace('i', 'I'))\n  }\n  var matches = DATE_TIME.exec(isoDate)\n\n  if (!matches) {\n    // Force YYYY-MM-DD dates to be parsed as local time\n    return getDate(isoDate) || null\n  }\n\n  var isBC = !!matches[8]\n  var year = parseInt(matches[1], 10)\n  if (isBC) {\n    year = bcYearToNegativeYear(year)\n  }\n\n  var month = parseInt(matches[2], 10) - 1\n  var day = matches[3]\n  var hour = parseInt(matches[4], 10)\n  var minute = parseInt(matches[5], 10)\n  var second = parseInt(matches[6], 10)\n\n  var ms = matches[7]\n  ms = ms ? 1000 * parseFloat(ms) : 0\n\n  var date\n  var offset = timeZoneOffset(isoDate)\n  if (offset != null) {\n    date = new Date(Date.UTC(year, month, day, hour, minute, second, ms))\n\n    // Account for years from 0 to 99 being interpreted as 1900-1999\n    // by Date.UTC / the multi-argument form of the Date constructor\n    if (is0To99(year)) {\n      date.setUTCFullYear(year)\n    }\n\n    if (offset !== 0) {\n      date.setTime(date.getTime() - offset)\n    }\n  } else {\n    date = new Date(year, month, day, hour, minute, second, ms)\n\n    if (is0To99(year)) {\n      date.setFullYear(year)\n    }\n  }\n\n  return date\n}\n\nfunction getDate (isoDate) {\n  var matches = DATE.exec(isoDate)\n  if (!matches) {\n    return\n  }\n\n  var year = parseInt(matches[1], 10)\n  var isBC = !!matches[4]\n  if (isBC) {\n    year = bcYearToNegativeYear(year)\n  }\n\n  var month = parseInt(matches[2], 10) - 1\n  var day = matches[3]\n  // YYYY-MM-DD will be parsed as local time\n  var date = new Date(year, month, day)\n\n  if (is0To99(year)) {\n    date.setFullYear(year)\n  }\n\n  return date\n}\n\n// match timezones:\n// Z (UTC)\n// -05\n// +06:30\nfunction timeZoneOffset (isoDate) {\n  if (isoDate.endsWith('+00')) {\n    return 0\n  }\n\n  var zone = TIME_ZONE.exec(isoDate.split(' ')[1])\n  if (!zone) return\n  var type = zone[1]\n\n  if (type === 'Z') {\n    return 0\n  }\n  var sign = type === '-' ? -1 : 1\n  var offset = parseInt(zone[2], 10) * 3600 +\n    parseInt(zone[3] || 0, 10) * 60 +\n    parseInt(zone[4] || 0, 10)\n\n  return offset * sign * 1000\n}\n\nfunction bcYearToNegativeYear (year) {\n  // Account for numerical difference between representations of BC years\n  // See: https://github.com/bendrucker/postgres-date/issues/5\n  return -(year - 1)\n}\n\nfunction is0To99 (num) {\n  return num >= 0 && num < 100\n}\n", "module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend(target) {\n    for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n", "'use strict'\n\nvar extend = require('xtend/mutable')\n\nmodule.exports = PostgresInterval\n\nfunction PostgresInterval (raw) {\n  if (!(this instanceof PostgresInterval)) {\n    return new PostgresInterval(raw)\n  }\n  extend(this, parse(raw))\n}\nvar properties = ['seconds', 'minutes', 'hours', 'days', 'months', 'years']\nPostgresInterval.prototype.toPostgres = function () {\n  var filtered = properties.filter(this.hasOwnProperty, this)\n\n  // In addition to `properties`, we need to account for fractions of seconds.\n  if (this.milliseconds && filtered.indexOf('seconds') < 0) {\n    filtered.push('seconds')\n  }\n\n  if (filtered.length === 0) return '0'\n  return filtered\n    .map(function (property) {\n      var value = this[property] || 0\n\n      // Account for fractional part of seconds,\n      // remove trailing zeroes.\n      if (property === 'seconds' && this.milliseconds) {\n        value = (value + this.milliseconds / 1000).toFixed(6).replace(/\\.?0+$/, '')\n      }\n\n      return value + ' ' + property\n    }, this)\n    .join(' ')\n}\n\nvar propertiesISOEquivalent = {\n  years: 'Y',\n  months: 'M',\n  days: 'D',\n  hours: 'H',\n  minutes: 'M',\n  seconds: 'S'\n}\nvar dateProperties = ['years', 'months', 'days']\nvar timeProperties = ['hours', 'minutes', 'seconds']\n// according to ISO 8601\nPostgresInterval.prototype.toISOString = PostgresInterval.prototype.toISO = function () {\n  var datePart = dateProperties\n    .map(buildProperty, this)\n    .join('')\n\n  var timePart = timeProperties\n    .map(buildProperty, this)\n    .join('')\n\n  return 'P' + datePart + 'T' + timePart\n\n  function buildProperty (property) {\n    var value = this[property] || 0\n\n    // Account for fractional part of seconds,\n    // remove trailing zeroes.\n    if (property === 'seconds' && this.milliseconds) {\n      value = (value + this.milliseconds / 1000).toFixed(6).replace(/0+$/, '')\n    }\n\n    return value + propertiesISOEquivalent[property]\n  }\n}\n\nvar NUMBER = '([+-]?\\\\d+)'\nvar YEAR = NUMBER + '\\\\s+years?'\nvar MONTH = NUMBER + '\\\\s+mons?'\nvar DAY = NUMBER + '\\\\s+days?'\nvar TIME = '([+-])?([\\\\d]*):(\\\\d\\\\d):(\\\\d\\\\d)\\\\.?(\\\\d{1,6})?'\nvar INTERVAL = new RegExp([YEAR, MONTH, DAY, TIME].map(function (regexString) {\n  return '(' + regexString + ')?'\n})\n  .join('\\\\s*'))\n\n// Positions of values in regex match\nvar positions = {\n  years: 2,\n  months: 4,\n  days: 6,\n  hours: 9,\n  minutes: 10,\n  seconds: 11,\n  milliseconds: 12\n}\n// We can use negative time\nvar negatives = ['hours', 'minutes', 'seconds', 'milliseconds']\n\nfunction parseMilliseconds (fraction) {\n  // add omitted zeroes\n  var microseconds = fraction + '000000'.slice(fraction.length)\n  return parseInt(microseconds, 10) / 1000\n}\n\nfunction parse (interval) {\n  if (!interval) return {}\n  var matches = INTERVAL.exec(interval)\n  var isNegative = matches[8] === '-'\n  return Object.keys(positions)\n    .reduce(function (parsed, property) {\n      var position = positions[property]\n      var value = matches[position]\n      // no empty string\n      if (!value) return parsed\n      // milliseconds are actually microseconds (up to 6 digits)\n      // with omitted trailing zeroes.\n      value = property === 'milliseconds'\n        ? parseMilliseconds(value)\n        : parseInt(value, 10)\n      // no zeros\n      if (!value) return parsed\n      if (isNegative && ~negatives.indexOf(property)) {\n        value *= -1\n      }\n      parsed[property] = value\n      return parsed\n    }, {})\n}\n", "'use strict'\n\nmodule.exports = function parseBytea (input) {\n  if (/^\\\\x/.test(input)) {\n    // new 'hex' style response (pg >9.0)\n    return new Buffer(input.substr(2), 'hex')\n  }\n  var output = ''\n  var i = 0\n  while (i < input.length) {\n    if (input[i] !== '\\\\') {\n      output += input[i]\n      ++i\n    } else {\n      if (/[0-7]{3}/.test(input.substr(i + 1, 3))) {\n        output += String.fromCharCode(parseInt(input.substr(i + 1, 3), 8))\n        i += 4\n      } else {\n        var backslashes = 1\n        while (i + backslashes < input.length && input[i + backslashes] === '\\\\') {\n          backslashes++\n        }\n        for (var k = 0; k < Math.floor(backslashes / 2); ++k) {\n          output += '\\\\'\n        }\n        i += Math.floor(backslashes / 2) * 2\n      }\n    }\n  }\n  return new Buffer(output, 'binary')\n}\n", "var array = require('postgres-array')\nvar arrayParser = require('./arrayParser');\nvar parseDate = require('postgres-date');\nvar parseInterval = require('postgres-interval');\nvar parseByteA = require('postgres-bytea');\n\nfunction allowNull (fn) {\n  return function nullAllowed (value) {\n    if (value === null) return value\n    return fn(value)\n  }\n}\n\nfunction parseBool (value) {\n  if (value === null) return value\n  return value === 'TRUE' ||\n    value === 't' ||\n    value === 'true' ||\n    value === 'y' ||\n    value === 'yes' ||\n    value === 'on' ||\n    value === '1';\n}\n\nfunction parseBoolArray (value) {\n  if (!value) return null\n  return array.parse(value, parseBool)\n}\n\nfunction parseBaseTenInt (string) {\n  return parseInt(string, 10)\n}\n\nfunction parseIntegerArray (value) {\n  if (!value) return null\n  return array.parse(value, allowNull(parseBaseTenInt))\n}\n\nfunction parseBigIntegerArray (value) {\n  if (!value) return null\n  return array.parse(value, allowNull(function (entry) {\n    return parseBigInteger(entry).trim()\n  }))\n}\n\nvar parsePointArray = function(value) {\n  if(!value) { return null; }\n  var p = arrayParser.create(value, function(entry) {\n    if(entry !== null) {\n      entry = parsePoint(entry);\n    }\n    return entry;\n  });\n\n  return p.parse();\n};\n\nvar parseFloatArray = function(value) {\n  if(!value) { return null; }\n  var p = arrayParser.create(value, function(entry) {\n    if(entry !== null) {\n      entry = parseFloat(entry);\n    }\n    return entry;\n  });\n\n  return p.parse();\n};\n\nvar parseStringArray = function(value) {\n  if(!value) { return null; }\n\n  var p = arrayParser.create(value);\n  return p.parse();\n};\n\nvar parseDateArray = function(value) {\n  if (!value) { return null; }\n\n  var p = arrayParser.create(value, function(entry) {\n    if (entry !== null) {\n      entry = parseDate(entry);\n    }\n    return entry;\n  });\n\n  return p.parse();\n};\n\nvar parseIntervalArray = function(value) {\n  if (!value) { return null; }\n\n  var p = arrayParser.create(value, function(entry) {\n    if (entry !== null) {\n      entry = parseInterval(entry);\n    }\n    return entry;\n  });\n\n  return p.parse();\n};\n\nvar parseByteAArray = function(value) {\n  if (!value) { return null; }\n\n  return array.parse(value, allowNull(parseByteA));\n};\n\nvar parseInteger = function(value) {\n  return parseInt(value, 10);\n};\n\nvar parseBigInteger = function(value) {\n  var valStr = String(value);\n  if (/^\\d+$/.test(valStr)) { return valStr; }\n  return value;\n};\n\nvar parseJsonArray = function(value) {\n  if (!value) { return null; }\n\n  return array.parse(value, allowNull(JSON.parse));\n};\n\nvar parsePoint = function(value) {\n  if (value[0] !== '(') { return null; }\n\n  value = value.substring( 1, value.length - 1 ).split(',');\n\n  return {\n    x: parseFloat(value[0])\n  , y: parseFloat(value[1])\n  };\n};\n\nvar parseCircle = function(value) {\n  if (value[0] !== '<' && value[1] !== '(') { return null; }\n\n  var point = '(';\n  var radius = '';\n  var pointParsed = false;\n  for (var i = 2; i < value.length - 1; i++){\n    if (!pointParsed) {\n      point += value[i];\n    }\n\n    if (value[i] === ')') {\n      pointParsed = true;\n      continue;\n    } else if (!pointParsed) {\n      continue;\n    }\n\n    if (value[i] === ','){\n      continue;\n    }\n\n    radius += value[i];\n  }\n  var result = parsePoint(point);\n  result.radius = parseFloat(radius);\n\n  return result;\n};\n\nvar init = function(register) {\n  register(20, parseBigInteger); // int8\n  register(21, parseInteger); // int2\n  register(23, parseInteger); // int4\n  register(26, parseInteger); // oid\n  register(700, parseFloat); // float4/real\n  register(701, parseFloat); // float8/double\n  register(16, parseBool);\n  register(1082, parseDate); // date\n  register(1114, parseDate); // timestamp without timezone\n  register(1184, parseDate); // timestamp\n  register(600, parsePoint); // point\n  register(651, parseStringArray); // cidr[]\n  register(718, parseCircle); // circle\n  register(1000, parseBoolArray);\n  register(1001, parseByteAArray);\n  register(1005, parseIntegerArray); // _int2\n  register(1007, parseIntegerArray); // _int4\n  register(1028, parseIntegerArray); // oid[]\n  register(1016, parseBigIntegerArray); // _int8\n  register(1017, parsePointArray); // point[]\n  register(1021, parseFloatArray); // _float4\n  register(1022, parseFloatArray); // _float8\n  register(1231, parseFloatArray); // _numeric\n  register(1014, parseStringArray); //char\n  register(1015, parseStringArray); //varchar\n  register(1008, parseStringArray);\n  register(1009, parseStringArray);\n  register(1040, parseStringArray); // macaddr[]\n  register(1041, parseStringArray); // inet[]\n  register(1115, parseDateArray); // timestamp without time zone[]\n  register(1182, parseDateArray); // _date\n  register(1185, parseDateArray); // timestamp with time zone[]\n  register(1186, parseInterval);\n  register(1187, parseIntervalArray);\n  register(17, parseByteA);\n  register(114, JSON.parse.bind(JSON)); // json\n  register(3802, JSON.parse.bind(JSON)); // jsonb\n  register(199, parseJsonArray); // json[]\n  register(3807, parseJsonArray); // jsonb[]\n  register(3907, parseStringArray); // numrange[]\n  register(2951, parseStringArray); // uuid[]\n  register(791, parseStringArray); // money[]\n  register(1183, parseStringArray); // time[]\n  register(1270, parseStringArray); // timetz[]\n};\n\nmodule.exports = {\n  init: init\n};\n", "'use strict';\n\n// selected so (BASE - 1) * 0x100000000 + 0xffffffff is a safe integer\nvar BASE = 1000000;\n\nfunction readInt8(buffer) {\n\tvar high = buffer.readInt32BE(0);\n\tvar low = buffer.readUInt32BE(4);\n\tvar sign = '';\n\n\tif (high < 0) {\n\t\thigh = ~high + (low === 0);\n\t\tlow = (~low + 1) >>> 0;\n\t\tsign = '-';\n\t}\n\n\tvar result = '';\n\tvar carry;\n\tvar t;\n\tvar digits;\n\tvar pad;\n\tvar l;\n\tvar i;\n\n\t{\n\t\tcarry = high % BASE;\n\t\thigh = high / BASE >>> 0;\n\n\t\tt = 0x100000000 * carry + low;\n\t\tlow = t / BASE >>> 0;\n\t\tdigits = '' + (t - BASE * low);\n\n\t\tif (low === 0 && high === 0) {\n\t\t\treturn sign + digits + result;\n\t\t}\n\n\t\tpad = '';\n\t\tl = 6 - digits.length;\n\n\t\tfor (i = 0; i < l; i++) {\n\t\t\tpad += '0';\n\t\t}\n\n\t\tresult = pad + digits + result;\n\t}\n\n\t{\n\t\tcarry = high % BASE;\n\t\thigh = high / BASE >>> 0;\n\n\t\tt = 0x100000000 * carry + low;\n\t\tlow = t / BASE >>> 0;\n\t\tdigits = '' + (t - BASE * low);\n\n\t\tif (low === 0 && high === 0) {\n\t\t\treturn sign + digits + result;\n\t\t}\n\n\t\tpad = '';\n\t\tl = 6 - digits.length;\n\n\t\tfor (i = 0; i < l; i++) {\n\t\t\tpad += '0';\n\t\t}\n\n\t\tresult = pad + digits + result;\n\t}\n\n\t{\n\t\tcarry = high % BASE;\n\t\thigh = high / BASE >>> 0;\n\n\t\tt = 0x100000000 * carry + low;\n\t\tlow = t / BASE >>> 0;\n\t\tdigits = '' + (t - BASE * low);\n\n\t\tif (low === 0 && high === 0) {\n\t\t\treturn sign + digits + result;\n\t\t}\n\n\t\tpad = '';\n\t\tl = 6 - digits.length;\n\n\t\tfor (i = 0; i < l; i++) {\n\t\t\tpad += '0';\n\t\t}\n\n\t\tresult = pad + digits + result;\n\t}\n\n\t{\n\t\tcarry = high % BASE;\n\t\tt = 0x100000000 * carry + low;\n\t\tdigits = '' + t % BASE;\n\n\t\treturn sign + digits + result;\n\t}\n}\n\nmodule.exports = readInt8;\n", "var parseInt64 = require('pg-int8');\n\nvar parseBits = function(data, bits, offset, invert, callback) {\n  offset = offset || 0;\n  invert = invert || false;\n  callback = callback || function(lastValue, newValue, bits) { return (lastValue * Math.pow(2, bits)) + newValue; };\n  var offsetBytes = offset >> 3;\n\n  var inv = function(value) {\n    if (invert) {\n      return ~value & 0xff;\n    }\n\n    return value;\n  };\n\n  // read first (maybe partial) byte\n  var mask = 0xff;\n  var firstBits = 8 - (offset % 8);\n  if (bits < firstBits) {\n    mask = (0xff << (8 - bits)) & 0xff;\n    firstBits = bits;\n  }\n\n  if (offset) {\n    mask = mask >> (offset % 8);\n  }\n\n  var result = 0;\n  if ((offset % 8) + bits >= 8) {\n    result = callback(0, inv(data[offsetBytes]) & mask, firstBits);\n  }\n\n  // read bytes\n  var bytes = (bits + offset) >> 3;\n  for (var i = offsetBytes + 1; i < bytes; i++) {\n    result = callback(result, inv(data[i]), 8);\n  }\n\n  // bits to read, that are not a complete byte\n  var lastBits = (bits + offset) % 8;\n  if (lastBits > 0) {\n    result = callback(result, inv(data[bytes]) >> (8 - lastBits), lastBits);\n  }\n\n  return result;\n};\n\nvar parseFloatFromBits = function(data, precisionBits, exponentBits) {\n  var bias = Math.pow(2, exponentBits - 1) - 1;\n  var sign = parseBits(data, 1);\n  var exponent = parseBits(data, exponentBits, 1);\n\n  if (exponent === 0) {\n    return 0;\n  }\n\n  // parse mantissa\n  var precisionBitsCounter = 1;\n  var parsePrecisionBits = function(lastValue, newValue, bits) {\n    if (lastValue === 0) {\n      lastValue = 1;\n    }\n\n    for (var i = 1; i <= bits; i++) {\n      precisionBitsCounter /= 2;\n      if ((newValue & (0x1 << (bits - i))) > 0) {\n        lastValue += precisionBitsCounter;\n      }\n    }\n\n    return lastValue;\n  };\n\n  var mantissa = parseBits(data, precisionBits, exponentBits + 1, false, parsePrecisionBits);\n\n  // special cases\n  if (exponent == (Math.pow(2, exponentBits + 1) - 1)) {\n    if (mantissa === 0) {\n      return (sign === 0) ? Infinity : -Infinity;\n    }\n\n    return NaN;\n  }\n\n  // normale number\n  return ((sign === 0) ? 1 : -1) * Math.pow(2, exponent - bias) * mantissa;\n};\n\nvar parseInt16 = function(value) {\n  if (parseBits(value, 1) == 1) {\n    return -1 * (parseBits(value, 15, 1, true) + 1);\n  }\n\n  return parseBits(value, 15, 1);\n};\n\nvar parseInt32 = function(value) {\n  if (parseBits(value, 1) == 1) {\n    return -1 * (parseBits(value, 31, 1, true) + 1);\n  }\n\n  return parseBits(value, 31, 1);\n};\n\nvar parseFloat32 = function(value) {\n  return parseFloatFromBits(value, 23, 8);\n};\n\nvar parseFloat64 = function(value) {\n  return parseFloatFromBits(value, 52, 11);\n};\n\nvar parseNumeric = function(value) {\n  var sign = parseBits(value, 16, 32);\n  if (sign == 0xc000) {\n    return NaN;\n  }\n\n  var weight = Math.pow(10000, parseBits(value, 16, 16));\n  var result = 0;\n\n  var digits = [];\n  var ndigits = parseBits(value, 16);\n  for (var i = 0; i < ndigits; i++) {\n    result += parseBits(value, 16, 64 + (16 * i)) * weight;\n    weight /= 10000;\n  }\n\n  var scale = Math.pow(10, parseBits(value, 16, 48));\n  return ((sign === 0) ? 1 : -1) * Math.round(result * scale) / scale;\n};\n\nvar parseDate = function(isUTC, value) {\n  var sign = parseBits(value, 1);\n  var rawValue = parseBits(value, 63, 1);\n\n  // discard usecs and shift from 2000 to 1970\n  var result = new Date((((sign === 0) ? 1 : -1) * rawValue / 1000) + 946684800000);\n\n  if (!isUTC) {\n    result.setTime(result.getTime() + result.getTimezoneOffset() * 60000);\n  }\n\n  // add microseconds to the date\n  result.usec = rawValue % 1000;\n  result.getMicroSeconds = function() {\n    return this.usec;\n  };\n  result.setMicroSeconds = function(value) {\n    this.usec = value;\n  };\n  result.getUTCMicroSeconds = function() {\n    return this.usec;\n  };\n\n  return result;\n};\n\nvar parseArray = function(value) {\n  var dim = parseBits(value, 32);\n\n  var flags = parseBits(value, 32, 32);\n  var elementType = parseBits(value, 32, 64);\n\n  var offset = 96;\n  var dims = [];\n  for (var i = 0; i < dim; i++) {\n    // parse dimension\n    dims[i] = parseBits(value, 32, offset);\n    offset += 32;\n\n    // ignore lower bounds\n    offset += 32;\n  }\n\n  var parseElement = function(elementType) {\n    // parse content length\n    var length = parseBits(value, 32, offset);\n    offset += 32;\n\n    // parse null values\n    if (length == 0xffffffff) {\n      return null;\n    }\n\n    var result;\n    if ((elementType == 0x17) || (elementType == 0x14)) {\n      // int/bigint\n      result = parseBits(value, length * 8, offset);\n      offset += length * 8;\n      return result;\n    }\n    else if (elementType == 0x19) {\n      // string\n      result = value.toString(this.encoding, offset >> 3, (offset += (length << 3)) >> 3);\n      return result;\n    }\n    else {\n      console.log(\"ERROR: ElementType not implemented: \" + elementType);\n    }\n  };\n\n  var parse = function(dimension, elementType) {\n    var array = [];\n    var i;\n\n    if (dimension.length > 1) {\n      var count = dimension.shift();\n      for (i = 0; i < count; i++) {\n        array[i] = parse(dimension, elementType);\n      }\n      dimension.unshift(count);\n    }\n    else {\n      for (i = 0; i < dimension[0]; i++) {\n        array[i] = parseElement(elementType);\n      }\n    }\n\n    return array;\n  };\n\n  return parse(dims, elementType);\n};\n\nvar parseText = function(value) {\n  return value.toString('utf8');\n};\n\nvar parseBool = function(value) {\n  if(value === null) return null;\n  return (parseBits(value, 8) > 0);\n};\n\nvar init = function(register) {\n  register(20, parseInt64);\n  register(21, parseInt16);\n  register(23, parseInt32);\n  register(26, parseInt32);\n  register(1700, parseNumeric);\n  register(700, parseFloat32);\n  register(701, parseFloat64);\n  register(16, parseBool);\n  register(1114, parseDate.bind(null, false));\n  register(1184, parseDate.bind(null, true));\n  register(1000, parseArray);\n  register(1007, parseArray);\n  register(1016, parseArray);\n  register(1008, parseArray);\n  register(1009, parseArray);\n  register(25, parseText);\n};\n\nmodule.exports = {\n  init: init\n};\n", "/**\n * Following query was used to generate this file:\n\n SELECT json_object_agg(UPPER(PT.typname), PT.oid::int4 ORDER BY pt.oid)\n FROM pg_type PT\n WHERE typnamespace = (SELECT pgn.oid FROM pg_namespace pgn WHERE nspname = 'pg_catalog') -- Take only builting Postgres types with stable OID (extension types are not guaranted to be stable)\n AND typtype = 'b' -- Only basic types\n AND typelem = 0 -- Ignore aliases\n AND typisdefined -- Ignore undefined types\n */\n\nmodule.exports = {\n    BOOL: 16,\n    BYTEA: 17,\n    CHAR: 18,\n    INT8: 20,\n    INT2: 21,\n    INT4: 23,\n    REGPROC: 24,\n    TEXT: 25,\n    OID: 26,\n    TID: 27,\n    XID: 28,\n    CID: 29,\n    JSON: 114,\n    XML: 142,\n    PG_NODE_TREE: 194,\n    SMGR: 210,\n    PATH: 602,\n    POLYGON: 604,\n    CIDR: 650,\n    FLOAT4: 700,\n    FLOAT8: 701,\n    ABSTIME: 702,\n    RELTIME: 703,\n    TINTERVAL: 704,\n    CIRCLE: 718,\n    MACADDR8: 774,\n    MONEY: 790,\n    MACADDR: 829,\n    INET: 869,\n    ACLITEM: 1033,\n    BPCHAR: 1042,\n    VARCHAR: 1043,\n    DATE: 1082,\n    TIME: 1083,\n    TIMESTAMP: 1114,\n    TIMESTAMPTZ: 1184,\n    INTERVAL: 1186,\n    TIMETZ: 1266,\n    BIT: 1560,\n    VARBIT: 1562,\n    NUMERIC: 1700,\n    REFCURSOR: 1790,\n    REGPROCEDURE: 2202,\n    REGOPER: 2203,\n    REGOPERATOR: 2204,\n    REGCLASS: 2205,\n    REGTYPE: 2206,\n    UUID: 2950,\n    TXID_SNAPSHOT: 2970,\n    PG_LSN: 3220,\n    PG_NDISTINCT: 3361,\n    PG_DEPENDENCIES: 3402,\n    TSVECTOR: 3614,\n    TSQUERY: 3615,\n    GTSVECTOR: 3642,\n    REGCONFIG: 3734,\n    REGDICTIONARY: 3769,\n    JSONB: 3802,\n    REGNAMESPACE: 4089,\n    REGROLE: 4096\n};\n", "var textParsers = require('./lib/textParsers');\nvar binaryParsers = require('./lib/binaryParsers');\nvar arrayParser = require('./lib/arrayParser');\nvar builtinTypes = require('./lib/builtins');\n\nexports.getTypeParser = getTypeParser;\nexports.setTypeParser = setTypeParser;\nexports.arrayParser = arrayParser;\nexports.builtins = builtinTypes;\n\nvar typeParsers = {\n  text: {},\n  binary: {}\n};\n\n//the empty parse function\nfunction noParse (val) {\n  return String(val);\n};\n\n//returns a function used to convert a specific type (specified by\n//oid) into a result javascript type\n//note: the oid can be obtained via the following sql query:\n//SELECT oid FROM pg_type WHERE typname = 'TYPE_NAME_HERE';\nfunction getTypeParser (oid, format) {\n  format = format || 'text';\n  if (!typeParsers[format]) {\n    return noParse;\n  }\n  return typeParsers[format][oid] || noParse;\n};\n\nfunction setTypeParser (oid, format, parseFn) {\n  if(typeof format == 'function') {\n    parseFn = format;\n    format = 'text';\n  }\n  typeParsers[format][oid] = parseFn;\n};\n\ntextParsers.init(function(oid, converter) {\n  typeParsers.text[oid] = converter;\n});\n\nbinaryParsers.init(function(oid, converter) {\n  typeParsers.binary[oid] = converter;\n});\n", "'use strict'\n\nmodule.exports = {\n  // database host. defaults to localhost\n  host: 'localhost',\n\n  // database user's name\n  user: process.platform === 'win32' ? process.env.USERNAME : process.env.USER,\n\n  // name of database to connect\n  database: undefined,\n\n  // database user's password\n  password: null,\n\n  // a Postgres connection string to be used instead of setting individual connection items\n  // NOTE:  Setting this value will cause it to override any other value (such as database or user) defined\n  // in the defaults object.\n  connectionString: undefined,\n\n  // database port\n  port: 5432,\n\n  // number of rows to return at a time from a prepared statement's\n  // portal. 0 will return all rows at once\n  rows: 0,\n\n  // binary result mode\n  binary: false,\n\n  // Connection pool options - see https://github.com/brianc/node-pg-pool\n\n  // number of connections to use in connection pool\n  // 0 will disable connection pooling\n  max: 10,\n\n  // max milliseconds a client can go unused before it is removed\n  // from the pool and destroyed\n  idleTimeoutMillis: 30000,\n\n  client_encoding: '',\n\n  ssl: false,\n\n  application_name: undefined,\n\n  fallback_application_name: undefined,\n\n  options: undefined,\n\n  parseInputDatesAsUTC: false,\n\n  // max milliseconds any query using this connection will execute for before timing out in error.\n  // false=unlimited\n  statement_timeout: false,\n\n  // Abort any statement that waits longer than the specified duration in milliseconds while attempting to acquire a lock.\n  // false=unlimited\n  lock_timeout: false,\n\n  // Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds\n  // false=unlimited\n  idle_in_transaction_session_timeout: false,\n\n  // max milliseconds to wait for query to complete (client side)\n  query_timeout: false,\n\n  connect_timeout: 0,\n\n  keepalives: 1,\n\n  keepalives_idle: 0,\n}\n\nconst pgTypes = require('pg-types')\n// save default parsers\nconst parseBigInteger = pgTypes.getTypeParser(20, 'text')\nconst parseBigIntegerArray = pgTypes.getTypeParser(1016, 'text')\n\n// parse int8 so you can get your count values as actual numbers\nmodule.exports.__defineSetter__('parseInt8', function (val) {\n  pgTypes.setTypeParser(20, 'text', val ? pgTypes.getTypeParser(23, 'text') : parseBigInteger)\n  pgTypes.setTypeParser(1016, 'text', val ? pgTypes.getTypeParser(1007, 'text') : parseBigIntegerArray)\n})\n", "'use strict'\n\nconst defaults = require('./defaults')\n\nconst util = require('util')\nconst { isDate } = util.types || util // Node 8 doesn't have `util.types`\n\nfunction escapeElement(elementRepresentation) {\n  const escaped = elementRepresentation.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"')\n\n  return '\"' + escaped + '\"'\n}\n\n// convert a JS array to a postgres array literal\n// uses comma separator so won't work for types like box that use\n// a different array separator.\nfunction arrayString(val) {\n  let result = '{'\n  for (let i = 0; i < val.length; i++) {\n    if (i > 0) {\n      result = result + ','\n    }\n    if (val[i] === null || typeof val[i] === 'undefined') {\n      result = result + 'NULL'\n    } else if (Array.isArray(val[i])) {\n      result = result + arrayString(val[i])\n    } else if (ArrayBuffer.isView(val[i])) {\n      let item = val[i]\n      if (!(item instanceof Buffer)) {\n        const buf = Buffer.from(item.buffer, item.byteOffset, item.byteLength)\n        if (buf.length === item.byteLength) {\n          item = buf\n        } else {\n          item = buf.slice(item.byteOffset, item.byteOffset + item.byteLength)\n        }\n      }\n      result += '\\\\\\\\x' + item.toString('hex')\n    } else {\n      result += escapeElement(prepareValue(val[i]))\n    }\n  }\n  result = result + '}'\n  return result\n}\n\n// converts values from javascript types\n// to their 'raw' counterparts for use as a postgres parameter\n// note: you can override this function to provide your own conversion mechanism\n// for complex types, etc...\nconst prepareValue = function (val, seen) {\n  // null and undefined are both null for postgres\n  if (val == null) {\n    return null\n  }\n  if (typeof val === 'object') {\n    if (val instanceof Buffer) {\n      return val\n    }\n    if (ArrayBuffer.isView(val)) {\n      const buf = Buffer.from(val.buffer, val.byteOffset, val.byteLength)\n      if (buf.length === val.byteLength) {\n        return buf\n      }\n      return buf.slice(val.byteOffset, val.byteOffset + val.byteLength) // Node.js v4 does not support those Buffer.from params\n    }\n    if (isDate(val)) {\n      if (defaults.parseInputDatesAsUTC) {\n        return dateToStringUTC(val)\n      } else {\n        return dateToString(val)\n      }\n    }\n    if (Array.isArray(val)) {\n      return arrayString(val)\n    }\n\n    return prepareObject(val, seen)\n  }\n  return val.toString()\n}\n\nfunction prepareObject(val, seen) {\n  if (val && typeof val.toPostgres === 'function') {\n    seen = seen || []\n    if (seen.indexOf(val) !== -1) {\n      throw new Error('circular reference detected while preparing \"' + val + '\" for query')\n    }\n    seen.push(val)\n\n    return prepareValue(val.toPostgres(prepareValue), seen)\n  }\n  return JSON.stringify(val)\n}\n\nfunction dateToString(date) {\n  let offset = -date.getTimezoneOffset()\n\n  let year = date.getFullYear()\n  const isBCYear = year < 1\n  if (isBCYear) year = Math.abs(year) + 1 // negative years are 1 off their BC representation\n\n  let ret =\n    String(year).padStart(4, '0') +\n    '-' +\n    String(date.getMonth() + 1).padStart(2, '0') +\n    '-' +\n    String(date.getDate()).padStart(2, '0') +\n    'T' +\n    String(date.getHours()).padStart(2, '0') +\n    ':' +\n    String(date.getMinutes()).padStart(2, '0') +\n    ':' +\n    String(date.getSeconds()).padStart(2, '0') +\n    '.' +\n    String(date.getMilliseconds()).padStart(3, '0')\n\n  if (offset < 0) {\n    ret += '-'\n    offset *= -1\n  } else {\n    ret += '+'\n  }\n\n  ret += String(Math.floor(offset / 60)).padStart(2, '0') + ':' + String(offset % 60).padStart(2, '0')\n  if (isBCYear) ret += ' BC'\n  return ret\n}\n\nfunction dateToStringUTC(date) {\n  let year = date.getUTCFullYear()\n  const isBCYear = year < 1\n  if (isBCYear) year = Math.abs(year) + 1 // negative years are 1 off their BC representation\n\n  let ret =\n    String(year).padStart(4, '0') +\n    '-' +\n    String(date.getUTCMonth() + 1).padStart(2, '0') +\n    '-' +\n    String(date.getUTCDate()).padStart(2, '0') +\n    'T' +\n    String(date.getUTCHours()).padStart(2, '0') +\n    ':' +\n    String(date.getUTCMinutes()).padStart(2, '0') +\n    ':' +\n    String(date.getUTCSeconds()).padStart(2, '0') +\n    '.' +\n    String(date.getUTCMilliseconds()).padStart(3, '0')\n\n  ret += '+00:00'\n  if (isBCYear) ret += ' BC'\n  return ret\n}\n\nfunction normalizeQueryConfig(config, values, callback) {\n  // can take in strings or config objects\n  config = typeof config === 'string' ? { text: config } : config\n  if (values) {\n    if (typeof values === 'function') {\n      config.callback = values\n    } else {\n      config.values = values\n    }\n  }\n  if (callback) {\n    config.callback = callback\n  }\n  return config\n}\n\n// Ported from PostgreSQL 9.2.4 source code in src/interfaces/libpq/fe-exec.c\nconst escapeIdentifier = function (str) {\n  return '\"' + str.replace(/\"/g, '\"\"') + '\"'\n}\n\nconst escapeLiteral = function (str) {\n  let hasBackslash = false\n  let escaped = \"'\"\n\n  if (str == null) {\n    return \"''\"\n  }\n\n  if (typeof str !== 'string') {\n    return \"''\"\n  }\n\n  for (let i = 0; i < str.length; i++) {\n    const c = str[i]\n    if (c === \"'\") {\n      escaped += c + c\n    } else if (c === '\\\\') {\n      escaped += c + c\n      hasBackslash = true\n    } else {\n      escaped += c\n    }\n  }\n\n  escaped += \"'\"\n\n  if (hasBackslash === true) {\n    escaped = ' E' + escaped\n  }\n\n  return escaped\n}\n\nmodule.exports = {\n  prepareValue: function prepareValueWrapper(value) {\n    // this ensures that extra arguments do not get passed into prepareValue\n    // by accident, eg: from calling values.map(utils.prepareValue)\n    return prepareValue(value)\n  },\n  normalizeQueryConfig,\n  escapeIdentifier,\n  escapeLiteral,\n}\n", "'use strict'\n// This file contains crypto utility functions for versions of Node.js < 15.0.0,\n// which does not support the WebCrypto.subtle API.\n\nconst nodeCrypto = require('crypto')\n\nfunction md5(string) {\n  return nodeCrypto.createHash('md5').update(string, 'utf-8').digest('hex')\n}\n\n// See AuthenticationMD5Password at https://www.postgresql.org/docs/current/static/protocol-flow.html\nfunction postgresMd5PasswordHash(user, password, salt) {\n  const inner = md5(password + user)\n  const outer = md5(Buffer.concat([Buffer.from(inner), salt]))\n  return 'md5' + outer\n}\n\nfunction sha256(text) {\n  return nodeCrypto.createHash('sha256').update(text).digest()\n}\n\nfunction hashByName(hashName, text) {\n  hashName = hashName.replace(/(\\D)-/, '$1') // e.g. SHA-256 -> SHA256\n  return nodeCrypto.createHash(hashName).update(text).digest()\n}\n\nfunction hmacSha256(key, msg) {\n  return nodeCrypto.createHmac('sha256', key).update(msg).digest()\n}\n\nasync function deriveKey(password, salt, iterations) {\n  return nodeCrypto.pbkdf2Sync(password, salt, iterations, 32, 'sha256')\n}\n\nmodule.exports = {\n  postgresMd5PasswordHash,\n  randomBytes: nodeCrypto.randomBytes,\n  deriveKey,\n  sha256,\n  hashByName,\n  hmacSha256,\n  md5,\n}\n", "const nodeCrypto = require('crypto')\n\nmodule.exports = {\n  postgresMd5PasswordHash,\n  randomBytes,\n  deriveKey,\n  sha256,\n  hashByName,\n  hmacSha256,\n  md5,\n}\n\n/**\n * The Web Crypto API - grabbed from the Node.js library or the global\n * @type Crypto\n */\n// eslint-disable-next-line no-undef\nconst webCrypto = nodeCrypto.webcrypto || globalThis.crypto\n/**\n * The SubtleCrypto API for low level crypto operations.\n * @type SubtleCrypto\n */\nconst subtleCrypto = webCrypto.subtle\nconst textEncoder = new TextEncoder()\n\n/**\n *\n * @param {*} length\n * @returns\n */\nfunction randomBytes(length) {\n  return webCrypto.getRandomValues(Buffer.alloc(length))\n}\n\nasync function md5(string) {\n  try {\n    return nodeCrypto.createHash('md5').update(string, 'utf-8').digest('hex')\n  } catch (e) {\n    // `createHash()` failed so we are probably not in Node.js, use the WebCrypto API instead.\n    // Note that the MD5 algorithm on WebCrypto is not available in Node.js.\n    // This is why we cannot just use WebCrypto in all environments.\n    const data = typeof string === 'string' ? textEncoder.encode(string) : string\n    const hash = await subtleCrypto.digest('MD5', data)\n    return Array.from(new Uint8Array(hash))\n      .map((b) => b.toString(16).padStart(2, '0'))\n      .join('')\n  }\n}\n\n// See AuthenticationMD5Password at https://www.postgresql.org/docs/current/static/protocol-flow.html\nasync function postgresMd5PasswordHash(user, password, salt) {\n  const inner = await md5(password + user)\n  const outer = await md5(Buffer.concat([Buffer.from(inner), salt]))\n  return 'md5' + outer\n}\n\n/**\n * Create a SHA-256 digest of the given data\n * @param {Buffer} data\n */\nasync function sha256(text) {\n  return await subtleCrypto.digest('SHA-256', text)\n}\n\nasync function hashByName(hashName, text) {\n  return await subtleCrypto.digest(hashName, text)\n}\n\n/**\n * Sign the message with the given key\n * @param {ArrayBuffer} keyBuffer\n * @param {string} msg\n */\nasync function hmacSha256(keyBuffer, msg) {\n  const key = await subtleCrypto.importKey('raw', keyBuffer, { name: 'HMAC', hash: 'SHA-256' }, false, ['sign'])\n  return await subtleCrypto.sign('HMAC', key, textEncoder.encode(msg))\n}\n\n/**\n * Derive a key from the password and salt\n * @param {string} password\n * @param {Uint8Array} salt\n * @param {number} iterations\n */\nasync function deriveKey(password, salt, iterations) {\n  const key = await subtleCrypto.importKey('raw', textEncoder.encode(password), 'PBKDF2', false, ['deriveBits'])\n  const params = { name: 'PBKDF2', hash: 'SHA-256', salt: salt, iterations: iterations }\n  return await subtleCrypto.deriveBits(params, key, 32 * 8, ['deriveBits'])\n}\n", "'use strict'\n\nconst useLegacyCrypto = parseInt(process.versions && process.versions.node && process.versions.node.split('.')[0]) < 15\nif (useLegacyCrypto) {\n  // We are on an old version of Node.js that requires legacy crypto utilities.\n  module.exports = require('./utils-legacy')\n} else {\n  module.exports = require('./utils-webcrypto')\n}\n", "function x509Error(msg, cert) {\n  return new Error('SASL channel binding: ' + msg + ' when parsing public certificate ' + cert.toString('base64'))\n}\n\nfunction readASN1Length(data, index) {\n  let length = data[index++]\n  if (length < 0x80) return { length, index }\n\n  const lengthBytes = length & 0x7f\n  if (lengthBytes > 4) throw x509Error('bad length', data)\n\n  length = 0\n  for (let i = 0; i < lengthBytes; i++) {\n    length = (length << 8) | data[index++]\n  }\n\n  return { length, index }\n}\n\nfunction readASN1OID(data, index) {\n  if (data[index++] !== 0x6) throw x509Error('non-OID data', data) // 6 = OID\n\n  const { length: OIDLength, index: indexAfterOIDLength } = readASN1Length(data, index)\n  index = indexAfterOIDLength\n  const lastIndex = index + OIDLength\n\n  const byte1 = data[index++]\n  let oid = ((byte1 / 40) >> 0) + '.' + (byte1 % 40)\n\n  while (index < lastIndex) {\n    // loop over numbers in OID\n    let value = 0\n    while (index < lastIndex) {\n      // loop over bytes in number\n      const nextByte = data[index++]\n      value = (value << 7) | (nextByte & 0x7f)\n      if (nextByte < 0x80) break\n    }\n    oid += '.' + value\n  }\n\n  return { oid, index }\n}\n\nfunction expectASN1Seq(data, index) {\n  if (data[index++] !== 0x30) throw x509Error('non-sequence data', data) // 30 = Sequence\n  return readASN1Length(data, index)\n}\n\nfunction signatureAlgorithmHashFromCertificate(data, index) {\n  // read this thread: https://www.postgresql.org/message-id/17760-b6c61e752ec07060%40postgresql.org\n  if (index === undefined) index = 0\n  index = expectASN1Seq(data, index).index\n  const { length: certInfoLength, index: indexAfterCertInfoLength } = expectASN1Seq(data, index)\n  index = indexAfterCertInfoLength + certInfoLength // skip over certificate info\n  index = expectASN1Seq(data, index).index // skip over signature length field\n  const { oid, index: indexAfterOID } = readASN1OID(data, index)\n  switch (oid) {\n    // RSA\n    case '1.2.840.113549.1.1.4':\n      return 'MD5'\n    case '1.2.840.113549.1.1.5':\n      return 'SHA-1'\n    case '1.2.840.113549.1.1.11':\n      return 'SHA-256'\n    case '1.2.840.113549.1.1.12':\n      return 'SHA-384'\n    case '1.2.840.113549.1.1.13':\n      return 'SHA-512'\n    case '1.2.840.113549.1.1.14':\n      return 'SHA-224'\n    case '1.2.840.113549.1.1.15':\n      return 'SHA512-224'\n    case '1.2.840.113549.1.1.16':\n      return 'SHA512-256'\n    // ECDSA\n    case '1.2.840.10045.4.1':\n      return 'SHA-1'\n    case '1.2.840.10045.4.3.1':\n      return 'SHA-224'\n    case '1.2.840.10045.4.3.2':\n      return 'SHA-256'\n    case '1.2.840.10045.4.3.3':\n      return 'SHA-384'\n    case '1.2.840.10045.4.3.4':\n      return 'SHA-512'\n    // RSASSA-PSS: hash is indicated separately\n    case '1.2.840.113549.1.1.10': {\n      index = indexAfterOID\n      index = expectASN1Seq(data, index).index\n      if (data[index++] !== 0xa0) throw x509Error('non-tag data', data) // a0 = constructed tag 0\n      index = readASN1Length(data, index).index // skip over tag length field\n      index = expectASN1Seq(data, index).index // skip over sequence length field\n      const { oid: hashOID } = readASN1OID(data, index)\n      switch (hashOID) {\n        // standalone hash OIDs\n        case '1.2.840.113549.2.5':\n          return 'MD5'\n        case '1.3.14.3.2.26':\n          return 'SHA-1'\n        case '2.16.840.1.101.3.4.2.1':\n          return 'SHA-256'\n        case '2.16.840.1.101.3.4.2.2':\n          return 'SHA-384'\n        case '2.16.840.1.101.3.4.2.3':\n          return 'SHA-512'\n      }\n      throw x509Error('unknown hash OID ' + hashOID, data)\n    }\n    // Ed25519 -- see https: return//github.com/openssl/openssl/issues/15477\n    case '1.3.101.110':\n    case '1.3.101.112': // ph\n      return 'SHA-512'\n    // Ed448 -- still not in pg 17.2 (if supported, digest would be SHAKE256 x 64 bytes)\n    case '1.3.101.111':\n    case '1.3.101.113': // ph\n      throw x509Error('Ed448 certificate channel binding is not currently supported by Postgres')\n  }\n  throw x509Error('unknown OID ' + oid, data)\n}\n\nmodule.exports = { signatureAlgorithmHashFromCertificate }\n", "'use strict'\nconst crypto = require('./utils')\nconst { signatureAlgorithmHashFromCertificate } = require('./cert-signatures')\n\nfunction startSession(mechanisms, stream) {\n  const candidates = ['SCRAM-SHA-256']\n  if (stream) candidates.unshift('SCRAM-SHA-256-PLUS') // higher-priority, so placed first\n\n  const mechanism = candidates.find((candidate) => mechanisms.includes(candidate))\n\n  if (!mechanism) {\n    throw new Error('SASL: Only mechanism(s) ' + candidates.join(' and ') + ' are supported')\n  }\n\n  if (mechanism === 'SCRAM-SHA-256-PLUS' && typeof stream.getPeerCertificate !== 'function') {\n    // this should never happen if we are really talking to a Postgres server\n    throw new Error('SASL: Mechanism SCRAM-SHA-256-PLUS requires a certificate')\n  }\n\n  const clientNonce = crypto.randomBytes(18).toString('base64')\n  const gs2Header = mechanism === 'SCRAM-SHA-256-PLUS' ? 'p=tls-server-end-point' : stream ? 'y' : 'n'\n\n  return {\n    mechanism,\n    clientNonce,\n    response: gs2Header + ',,n=*,r=' + clientNonce,\n    message: 'SASLInitialResponse',\n  }\n}\n\nasync function continueSession(session, password, serverData, stream) {\n  if (session.message !== 'SASLInitialResponse') {\n    throw new Error('SASL: Last message was not SASLInitialResponse')\n  }\n  if (typeof password !== 'string') {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: client password must be a string')\n  }\n  if (password === '') {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: client password must be a non-empty string')\n  }\n  if (typeof serverData !== 'string') {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: serverData must be a string')\n  }\n\n  const sv = parseServerFirstMessage(serverData)\n\n  if (!sv.nonce.startsWith(session.clientNonce)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce does not start with client nonce')\n  } else if (sv.nonce.length === session.clientNonce.length) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce is too short')\n  }\n\n  const clientFirstMessageBare = 'n=*,r=' + session.clientNonce\n  const serverFirstMessage = 'r=' + sv.nonce + ',s=' + sv.salt + ',i=' + sv.iteration\n\n  // without channel binding:\n  let channelBinding = stream ? 'eSws' : 'biws' // 'y,,' or 'n,,', base64-encoded\n\n  // override if channel binding is in use:\n  if (session.mechanism === 'SCRAM-SHA-256-PLUS') {\n    const peerCert = stream.getPeerCertificate().raw\n    let hashName = signatureAlgorithmHashFromCertificate(peerCert)\n    if (hashName === 'MD5' || hashName === 'SHA-1') hashName = 'SHA-256'\n    const certHash = await crypto.hashByName(hashName, peerCert)\n    const bindingData = Buffer.concat([Buffer.from('p=tls-server-end-point,,'), Buffer.from(certHash)])\n    channelBinding = bindingData.toString('base64')\n  }\n\n  const clientFinalMessageWithoutProof = 'c=' + channelBinding + ',r=' + sv.nonce\n  const authMessage = clientFirstMessageBare + ',' + serverFirstMessage + ',' + clientFinalMessageWithoutProof\n\n  const saltBytes = Buffer.from(sv.salt, 'base64')\n  const saltedPassword = await crypto.deriveKey(password, saltBytes, sv.iteration)\n  const clientKey = await crypto.hmacSha256(saltedPassword, 'Client Key')\n  const storedKey = await crypto.sha256(clientKey)\n  const clientSignature = await crypto.hmacSha256(storedKey, authMessage)\n  const clientProof = xorBuffers(Buffer.from(clientKey), Buffer.from(clientSignature)).toString('base64')\n  const serverKey = await crypto.hmacSha256(saltedPassword, 'Server Key')\n  const serverSignatureBytes = await crypto.hmacSha256(serverKey, authMessage)\n\n  session.message = 'SASLResponse'\n  session.serverSignature = Buffer.from(serverSignatureBytes).toString('base64')\n  session.response = clientFinalMessageWithoutProof + ',p=' + clientProof\n}\n\nfunction finalizeSession(session, serverData) {\n  if (session.message !== 'SASLResponse') {\n    throw new Error('SASL: Last message was not SASLResponse')\n  }\n  if (typeof serverData !== 'string') {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: serverData must be a string')\n  }\n\n  const { serverSignature } = parseServerFinalMessage(serverData)\n\n  if (serverSignature !== session.serverSignature) {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature does not match')\n  }\n}\n\n/**\n * printable       = %x21-2B / %x2D-7E\n *                   ;; Printable ASCII except \",\".\n *                   ;; Note that any \"printable\" is also\n *                   ;; a valid \"value\".\n */\nfunction isPrintableChars(text) {\n  if (typeof text !== 'string') {\n    throw new TypeError('SASL: text must be a string')\n  }\n  return text\n    .split('')\n    .map((_, i) => text.charCodeAt(i))\n    .every((c) => (c >= 0x21 && c <= 0x2b) || (c >= 0x2d && c <= 0x7e))\n}\n\n/**\n * base64-char     = ALPHA / DIGIT / \"/\" / \"+\"\n *\n * base64-4        = 4base64-char\n *\n * base64-3        = 3base64-char \"=\"\n *\n * base64-2        = 2base64-char \"==\"\n *\n * base64          = *base64-4 [base64-3 / base64-2]\n */\nfunction isBase64(text) {\n  return /^(?:[a-zA-Z0-9+/]{4})*(?:[a-zA-Z0-9+/]{2}==|[a-zA-Z0-9+/]{3}=)?$/.test(text)\n}\n\nfunction parseAttributePairs(text) {\n  if (typeof text !== 'string') {\n    throw new TypeError('SASL: attribute pairs text must be a string')\n  }\n\n  return new Map(\n    text.split(',').map((attrValue) => {\n      if (!/^.=/.test(attrValue)) {\n        throw new Error('SASL: Invalid attribute pair entry')\n      }\n      const name = attrValue[0]\n      const value = attrValue.substring(2)\n      return [name, value]\n    })\n  )\n}\n\nfunction parseServerFirstMessage(data) {\n  const attrPairs = parseAttributePairs(data)\n\n  const nonce = attrPairs.get('r')\n  if (!nonce) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce missing')\n  } else if (!isPrintableChars(nonce)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce must only contain printable characters')\n  }\n  const salt = attrPairs.get('s')\n  if (!salt) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: salt missing')\n  } else if (!isBase64(salt)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: salt must be base64')\n  }\n  const iterationText = attrPairs.get('i')\n  if (!iterationText) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: iteration missing')\n  } else if (!/^[1-9][0-9]*$/.test(iterationText)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: invalid iteration count')\n  }\n  const iteration = parseInt(iterationText, 10)\n\n  return {\n    nonce,\n    salt,\n    iteration,\n  }\n}\n\nfunction parseServerFinalMessage(serverData) {\n  const attrPairs = parseAttributePairs(serverData)\n  const serverSignature = attrPairs.get('v')\n  if (!serverSignature) {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature is missing')\n  } else if (!isBase64(serverSignature)) {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature must be base64')\n  }\n  return {\n    serverSignature,\n  }\n}\n\nfunction xorBuffers(a, b) {\n  if (!Buffer.isBuffer(a)) {\n    throw new TypeError('first argument must be a Buffer')\n  }\n  if (!Buffer.isBuffer(b)) {\n    throw new TypeError('second argument must be a Buffer')\n  }\n  if (a.length !== b.length) {\n    throw new Error('Buffer lengths must match')\n  }\n  if (a.length === 0) {\n    throw new Error('Buffers cannot be empty')\n  }\n  return Buffer.from(a.map((_, i) => a[i] ^ b[i]))\n}\n\nmodule.exports = {\n  startSession,\n  continueSession,\n  finalizeSession,\n}\n", "'use strict'\n\nconst types = require('pg-types')\n\nfunction TypeOverrides(userTypes) {\n  this._types = userTypes || types\n  this.text = {}\n  this.binary = {}\n}\n\nTypeOverrides.prototype.getOverrides = function (format) {\n  switch (format) {\n    case 'text':\n      return this.text\n    case 'binary':\n      return this.binary\n    default:\n      return {}\n  }\n}\n\nTypeOverrides.prototype.setTypeParser = function (oid, format, parseFn) {\n  if (typeof format === 'function') {\n    parseFn = format\n    format = 'text'\n  }\n  this.getOverrides(format)[oid] = parseFn\n}\n\nTypeOverrides.prototype.getTypeParser = function (oid, format) {\n  format = format || 'text'\n  return this.getOverrides(format)[oid] || this._types.getTypeParser(oid, format)\n}\n\nmodule.exports = TypeOverrides\n", "'use strict'\n\n//Parse method copied from https://github.com/brianc/node-postgres\n//Copyright (c) 2010-2014 Brian Carlson (brian.m.carlson@gmail.com)\n//MIT License\n\n//parses a connection string\nfunction parse(str, options = {}) {\n  //unix socket\n  if (str.charAt(0) === '/') {\n    const config = str.split(' ')\n    return { host: config[0], database: config[1] }\n  }\n\n  // Check for empty host in URL\n\n  const config = {}\n  let result\n  let dummyHost = false\n  if (/ |%[^a-f0-9]|%[a-f0-9][^a-f0-9]/i.test(str)) {\n    // Ensure spaces are encoded as %20\n    str = encodeURI(str).replace(/%25(\\d\\d)/g, '%$1')\n  }\n\n  try {\n    try {\n      result = new URL(str, 'postgres://base')\n    } catch (e) {\n      // The URL is invalid so try again with a dummy host\n      result = new URL(str.replace('@/', '@___DUMMY___/'), 'postgres://base')\n      dummyHost = true\n    }\n  } catch (err) {\n    // Remove the input from the error message to avoid leaking sensitive information\n    err.input && (err.input = '*****REDACTED*****')\n  }\n\n  // We'd like to use Object.fromEntries() here but Node.js 10 does not support it\n  for (const entry of result.searchParams.entries()) {\n    config[entry[0]] = entry[1]\n  }\n\n  config.user = config.user || decodeURIComponent(result.username)\n  config.password = config.password || decodeURIComponent(result.password)\n\n  if (result.protocol == 'socket:') {\n    config.host = decodeURI(result.pathname)\n    config.database = result.searchParams.get('db')\n    config.client_encoding = result.searchParams.get('encoding')\n    return config\n  }\n  const hostname = dummyHost ? '' : result.hostname\n  if (!config.host) {\n    // Only set the host if there is no equivalent query param.\n    config.host = decodeURIComponent(hostname)\n  } else if (hostname && /^%2f/i.test(hostname)) {\n    // Only prepend the hostname to the pathname if it is not a URL encoded Unix socket host.\n    result.pathname = hostname + result.pathname\n  }\n  if (!config.port) {\n    // Only set the port if there is no equivalent query param.\n    config.port = result.port\n  }\n\n  const pathname = result.pathname.slice(1) || null\n  config.database = pathname ? decodeURI(pathname) : null\n\n  if (config.ssl === 'true' || config.ssl === '1') {\n    config.ssl = true\n  }\n\n  if (config.ssl === '0') {\n    config.ssl = false\n  }\n\n  if (config.sslcert || config.sslkey || config.sslrootcert || config.sslmode) {\n    config.ssl = {}\n  }\n\n  // Only try to load fs if we expect to read from the disk\n  const fs = config.sslcert || config.sslkey || config.sslrootcert ? require('fs') : null\n\n  if (config.sslcert) {\n    config.ssl.cert = fs.readFileSync(config.sslcert).toString()\n  }\n\n  if (config.sslkey) {\n    config.ssl.key = fs.readFileSync(config.sslkey).toString()\n  }\n\n  if (config.sslrootcert) {\n    config.ssl.ca = fs.readFileSync(config.sslrootcert).toString()\n  }\n\n  if (options.useLibpqCompat && config.uselibpqcompat) {\n    throw new Error('Both useLibpqCompat and uselibpqcompat are set. Please use only one of them.')\n  }\n\n  if (config.uselibpqcompat === 'true' || options.useLibpqCompat) {\n    switch (config.sslmode) {\n      case 'disable': {\n        config.ssl = false\n        break\n      }\n      case 'prefer': {\n        config.ssl.rejectUnauthorized = false\n        break\n      }\n      case 'require': {\n        if (config.sslrootcert) {\n          // If a root CA is specified, behavior of `sslmode=require` will be the same as that of `verify-ca`\n          config.ssl.checkServerIdentity = function () {}\n        } else {\n          config.ssl.rejectUnauthorized = false\n        }\n        break\n      }\n      case 'verify-ca': {\n        if (!config.ssl.ca) {\n          throw new Error(\n            'SECURITY WARNING: Using sslmode=verify-ca requires specifying a CA with sslrootcert. If a public CA is used, verify-ca allows connections to a server that somebody else may have registered with the CA, making you vulnerable to Man-in-the-Middle attacks. Either specify a custom CA certificate with sslrootcert parameter or use sslmode=verify-full for proper security.'\n          )\n        }\n        config.ssl.checkServerIdentity = function () {}\n        break\n      }\n      case 'verify-full': {\n        break\n      }\n    }\n  } else {\n    switch (config.sslmode) {\n      case 'disable': {\n        config.ssl = false\n        break\n      }\n      case 'prefer':\n      case 'require':\n      case 'verify-ca':\n      case 'verify-full': {\n        break\n      }\n      case 'no-verify': {\n        config.ssl.rejectUnauthorized = false\n        break\n      }\n    }\n  }\n\n  return config\n}\n\n// convert pg-connection-string ssl config to a ClientConfig.ConnectionOptions\nfunction toConnectionOptions(sslConfig) {\n  const connectionOptions = Object.entries(sslConfig).reduce((c, [key, value]) => {\n    // we explicitly check for undefined and null instead of `if (value)` because some\n    // options accept falsy values. Example: `ssl.rejectUnauthorized = false`\n    if (value !== undefined && value !== null) {\n      c[key] = value\n    }\n\n    return c\n  }, {})\n\n  return connectionOptions\n}\n\n// convert pg-connection-string config to a ClientConfig\nfunction toClientConfig(config) {\n  const poolConfig = Object.entries(config).reduce((c, [key, value]) => {\n    if (key === 'ssl') {\n      const sslConfig = value\n\n      if (typeof sslConfig === 'boolean') {\n        c[key] = sslConfig\n      }\n\n      if (typeof sslConfig === 'object') {\n        c[key] = toConnectionOptions(sslConfig)\n      }\n    } else if (value !== undefined && value !== null) {\n      if (key === 'port') {\n        // when port is not specified, it is converted into an empty string\n        // we want to avoid NaN or empty string as a values in ClientConfig\n        if (value !== '') {\n          const v = parseInt(value, 10)\n          if (isNaN(v)) {\n            throw new Error(`Invalid ${key}: ${value}`)\n          }\n\n          c[key] = v\n        }\n      } else {\n        c[key] = value\n      }\n    }\n\n    return c\n  }, {})\n\n  return poolConfig\n}\n\n// parses a connection string into ClientConfig\nfunction parseIntoClientConfig(str) {\n  return toClientConfig(parse(str))\n}\n\nmodule.exports = parse\n\nparse.parse = parse\nparse.toClientConfig = toClientConfig\nparse.parseIntoClientConfig = parseIntoClientConfig\n", "'use strict'\n\nconst dns = require('dns')\n\nconst defaults = require('./defaults')\n\nconst parse = require('pg-connection-string').parse // parses a connection string\n\nconst val = function (key, config, envVar) {\n  if (envVar === undefined) {\n    envVar = process.env['PG' + key.toUpperCase()]\n  } else if (envVar === false) {\n    // do nothing ... use false\n  } else {\n    envVar = process.env[envVar]\n  }\n\n  return config[key] || envVar || defaults[key]\n}\n\nconst readSSLConfigFromEnvironment = function () {\n  switch (process.env.PGSSLMODE) {\n    case 'disable':\n      return false\n    case 'prefer':\n    case 'require':\n    case 'verify-ca':\n    case 'verify-full':\n      return true\n    case 'no-verify':\n      return { rejectUnauthorized: false }\n  }\n  return defaults.ssl\n}\n\n// Convert arg to a string, surround in single quotes, and escape single quotes and backslashes\nconst quoteParamValue = function (value) {\n  return \"'\" + ('' + value).replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"\\\\'\") + \"'\"\n}\n\nconst add = function (params, config, paramName) {\n  const value = config[paramName]\n  if (value !== undefined && value !== null) {\n    params.push(paramName + '=' + quoteParamValue(value))\n  }\n}\n\nclass ConnectionParameters {\n  constructor(config) {\n    // if a string is passed, it is a raw connection string so we parse it into a config\n    config = typeof config === 'string' ? parse(config) : config || {}\n\n    // if the config has a connectionString defined, parse IT into the config we use\n    // this will override other default values with what is stored in connectionString\n    if (config.connectionString) {\n      config = Object.assign({}, config, parse(config.connectionString))\n    }\n\n    this.user = val('user', config)\n    this.database = val('database', config)\n\n    if (this.database === undefined) {\n      this.database = this.user\n    }\n\n    this.port = parseInt(val('port', config), 10)\n    this.host = val('host', config)\n\n    // \"hiding\" the password so it doesn't show up in stack traces\n    // or if the client is console.logged\n    Object.defineProperty(this, 'password', {\n      configurable: true,\n      enumerable: false,\n      writable: true,\n      value: val('password', config),\n    })\n\n    this.binary = val('binary', config)\n    this.options = val('options', config)\n\n    this.ssl = typeof config.ssl === 'undefined' ? readSSLConfigFromEnvironment() : config.ssl\n\n    if (typeof this.ssl === 'string') {\n      if (this.ssl === 'true') {\n        this.ssl = true\n      }\n    }\n    // support passing in ssl=no-verify via connection string\n    if (this.ssl === 'no-verify') {\n      this.ssl = { rejectUnauthorized: false }\n    }\n    if (this.ssl && this.ssl.key) {\n      Object.defineProperty(this.ssl, 'key', {\n        enumerable: false,\n      })\n    }\n\n    this.client_encoding = val('client_encoding', config)\n    this.replication = val('replication', config)\n    // a domain socket begins with '/'\n    this.isDomainSocket = !(this.host || '').indexOf('/')\n\n    this.application_name = val('application_name', config, 'PGAPPNAME')\n    this.fallback_application_name = val('fallback_application_name', config, false)\n    this.statement_timeout = val('statement_timeout', config, false)\n    this.lock_timeout = val('lock_timeout', config, false)\n    this.idle_in_transaction_session_timeout = val('idle_in_transaction_session_timeout', config, false)\n    this.query_timeout = val('query_timeout', config, false)\n\n    if (config.connectionTimeoutMillis === undefined) {\n      this.connect_timeout = process.env.PGCONNECT_TIMEOUT || 0\n    } else {\n      this.connect_timeout = Math.floor(config.connectionTimeoutMillis / 1000)\n    }\n\n    if (config.keepAlive === false) {\n      this.keepalives = 0\n    } else if (config.keepAlive === true) {\n      this.keepalives = 1\n    }\n\n    if (typeof config.keepAliveInitialDelayMillis === 'number') {\n      this.keepalives_idle = Math.floor(config.keepAliveInitialDelayMillis / 1000)\n    }\n  }\n\n  getLibpqConnectionString(cb) {\n    const params = []\n    add(params, this, 'user')\n    add(params, this, 'password')\n    add(params, this, 'port')\n    add(params, this, 'application_name')\n    add(params, this, 'fallback_application_name')\n    add(params, this, 'connect_timeout')\n    add(params, this, 'options')\n\n    const ssl = typeof this.ssl === 'object' ? this.ssl : this.ssl ? { sslmode: this.ssl } : {}\n    add(params, ssl, 'sslmode')\n    add(params, ssl, 'sslca')\n    add(params, ssl, 'sslkey')\n    add(params, ssl, 'sslcert')\n    add(params, ssl, 'sslrootcert')\n\n    if (this.database) {\n      params.push('dbname=' + quoteParamValue(this.database))\n    }\n    if (this.replication) {\n      params.push('replication=' + quoteParamValue(this.replication))\n    }\n    if (this.host) {\n      params.push('host=' + quoteParamValue(this.host))\n    }\n    if (this.isDomainSocket) {\n      return cb(null, params.join(' '))\n    }\n    if (this.client_encoding) {\n      params.push('client_encoding=' + quoteParamValue(this.client_encoding))\n    }\n    dns.lookup(this.host, function (err, address) {\n      if (err) return cb(err, null)\n      params.push('hostaddr=' + quoteParamValue(address))\n      return cb(null, params.join(' '))\n    })\n  }\n}\n\nmodule.exports = ConnectionParameters\n", "'use strict'\n\nconst types = require('pg-types')\n\nconst matchRegexp = /^([A-Za-z]+)(?: (\\d+))?(?: (\\d+))?/\n\n// result object returned from query\n// in the 'end' event and also\n// passed as second argument to provided callback\nclass Result {\n  constructor(rowMode, types) {\n    this.command = null\n    this.rowCount = null\n    this.oid = null\n    this.rows = []\n    this.fields = []\n    this._parsers = undefined\n    this._types = types\n    this.RowCtor = null\n    this.rowAsArray = rowMode === 'array'\n    if (this.rowAsArray) {\n      this.parseRow = this._parseRowAsArray\n    }\n    this._prebuiltEmptyResultObject = null\n  }\n\n  // adds a command complete message\n  addCommandComplete(msg) {\n    let match\n    if (msg.text) {\n      // pure javascript\n      match = matchRegexp.exec(msg.text)\n    } else {\n      // native bindings\n      match = matchRegexp.exec(msg.command)\n    }\n    if (match) {\n      this.command = match[1]\n      if (match[3]) {\n        // COMMAND OID ROWS\n        this.oid = parseInt(match[2], 10)\n        this.rowCount = parseInt(match[3], 10)\n      } else if (match[2]) {\n        // COMMAND ROWS\n        this.rowCount = parseInt(match[2], 10)\n      }\n    }\n  }\n\n  _parseRowAsArray(rowData) {\n    const row = new Array(rowData.length)\n    for (let i = 0, len = rowData.length; i < len; i++) {\n      const rawValue = rowData[i]\n      if (rawValue !== null) {\n        row[i] = this._parsers[i](rawValue)\n      } else {\n        row[i] = null\n      }\n    }\n    return row\n  }\n\n  parseRow(rowData) {\n    const row = { ...this._prebuiltEmptyResultObject }\n    for (let i = 0, len = rowData.length; i < len; i++) {\n      const rawValue = rowData[i]\n      const field = this.fields[i].name\n      if (rawValue !== null) {\n        const v = this.fields[i].format === 'binary' ? Buffer.from(rawValue) : rawValue\n        row[field] = this._parsers[i](v)\n      } else {\n        row[field] = null\n      }\n    }\n    return row\n  }\n\n  addRow(row) {\n    this.rows.push(row)\n  }\n\n  addFields(fieldDescriptions) {\n    // clears field definitions\n    // multiple query statements in 1 action can result in multiple sets\n    // of rowDescriptions...eg: 'select NOW(); select 1::int;'\n    // you need to reset the fields\n    this.fields = fieldDescriptions\n    if (this.fields.length) {\n      this._parsers = new Array(fieldDescriptions.length)\n    }\n\n    const row = {}\n\n    for (let i = 0; i < fieldDescriptions.length; i++) {\n      const desc = fieldDescriptions[i]\n      row[desc.name] = null\n\n      if (this._types) {\n        this._parsers[i] = this._types.getTypeParser(desc.dataTypeID, desc.format || 'text')\n      } else {\n        this._parsers[i] = types.getTypeParser(desc.dataTypeID, desc.format || 'text')\n      }\n    }\n\n    this._prebuiltEmptyResultObject = { ...row }\n  }\n}\n\nmodule.exports = Result\n", "'use strict'\n\nconst { EventEmitter } = require('events')\n\nconst Result = require('./result')\nconst utils = require('./utils')\n\nclass Query extends EventEmitter {\n  constructor(config, values, callback) {\n    super()\n\n    config = utils.normalizeQueryConfig(config, values, callback)\n\n    this.text = config.text\n    this.values = config.values\n    this.rows = config.rows\n    this.types = config.types\n    this.name = config.name\n    this.queryMode = config.queryMode\n    this.binary = config.binary\n    // use unique portal name each time\n    this.portal = config.portal || ''\n    this.callback = config.callback\n    this._rowMode = config.rowMode\n    if (process.domain && config.callback) {\n      this.callback = process.domain.bind(config.callback)\n    }\n    this._result = new Result(this._rowMode, this.types)\n\n    // potential for multiple results\n    this._results = this._result\n    this._canceledDueToError = false\n  }\n\n  requiresPreparation() {\n    if (this.queryMode === 'extended') {\n      return true\n    }\n\n    // named queries must always be prepared\n    if (this.name) {\n      return true\n    }\n    // always prepare if there are max number of rows expected per\n    // portal execution\n    if (this.rows) {\n      return true\n    }\n    // don't prepare empty text queries\n    if (!this.text) {\n      return false\n    }\n    // prepare if there are values\n    if (!this.values) {\n      return false\n    }\n    return this.values.length > 0\n  }\n\n  _checkForMultirow() {\n    // if we already have a result with a command property\n    // then we've already executed one query in a multi-statement simple query\n    // turn our results into an array of results\n    if (this._result.command) {\n      if (!Array.isArray(this._results)) {\n        this._results = [this._result]\n      }\n      this._result = new Result(this._rowMode, this._result._types)\n      this._results.push(this._result)\n    }\n  }\n\n  // associates row metadata from the supplied\n  // message with this query object\n  // metadata used when parsing row results\n  handleRowDescription(msg) {\n    this._checkForMultirow()\n    this._result.addFields(msg.fields)\n    this._accumulateRows = this.callback || !this.listeners('row').length\n  }\n\n  handleDataRow(msg) {\n    let row\n\n    if (this._canceledDueToError) {\n      return\n    }\n\n    try {\n      row = this._result.parseRow(msg.fields)\n    } catch (err) {\n      this._canceledDueToError = err\n      return\n    }\n\n    this.emit('row', row, this._result)\n    if (this._accumulateRows) {\n      this._result.addRow(row)\n    }\n  }\n\n  handleCommandComplete(msg, connection) {\n    this._checkForMultirow()\n    this._result.addCommandComplete(msg)\n    // need to sync after each command complete of a prepared statement\n    // if we were using a row count which results in multiple calls to _getRows\n    if (this.rows) {\n      connection.sync()\n    }\n  }\n\n  // if a named prepared statement is created with empty query text\n  // the backend will send an emptyQuery message but *not* a command complete message\n  // since we pipeline sync immediately after execute we don't need to do anything here\n  // unless we have rows specified, in which case we did not pipeline the initial sync call\n  handleEmptyQuery(connection) {\n    if (this.rows) {\n      connection.sync()\n    }\n  }\n\n  handleError(err, connection) {\n    // need to sync after error during a prepared statement\n    if (this._canceledDueToError) {\n      err = this._canceledDueToError\n      this._canceledDueToError = false\n    }\n    // if callback supplied do not emit error event as uncaught error\n    // events will bubble up to node process\n    if (this.callback) {\n      return this.callback(err)\n    }\n    this.emit('error', err)\n  }\n\n  handleReadyForQuery(con) {\n    if (this._canceledDueToError) {\n      return this.handleError(this._canceledDueToError, con)\n    }\n    if (this.callback) {\n      try {\n        this.callback(null, this._results)\n      } catch (err) {\n        process.nextTick(() => {\n          throw err\n        })\n      }\n    }\n    this.emit('end', this._results)\n  }\n\n  submit(connection) {\n    if (typeof this.text !== 'string' && typeof this.name !== 'string') {\n      return new Error('A query must have either text or a name. Supplying neither is unsupported.')\n    }\n    const previous = connection.parsedStatements[this.name]\n    if (this.text && previous && this.text !== previous) {\n      return new Error(`Prepared statements must be unique - '${this.name}' was used for a different statement`)\n    }\n    if (this.values && !Array.isArray(this.values)) {\n      return new Error('Query values must be an array')\n    }\n    if (this.requiresPreparation()) {\n      // If we're using the extended query protocol we fire off several separate commands\n      // to the backend. On some versions of node & some operating system versions\n      // the network stack writes each message separately instead of buffering them together\n      // causing the client & network to send more slowly. Corking & uncorking the stream\n      // allows node to buffer up the messages internally before sending them all off at once.\n      // note: we're checking for existence of cork/uncork because some versions of streams\n      // might not have this (cloudflare?)\n      connection.stream.cork && connection.stream.cork()\n      try {\n        this.prepare(connection)\n      } finally {\n        // while unlikely for this.prepare to throw, if it does & we don't uncork this stream\n        // this client becomes unresponsive, so put in finally block \"just in case\"\n        connection.stream.uncork && connection.stream.uncork()\n      }\n    } else {\n      connection.query(this.text)\n    }\n    return null\n  }\n\n  hasBeenParsed(connection) {\n    return this.name && connection.parsedStatements[this.name]\n  }\n\n  handlePortalSuspended(connection) {\n    this._getRows(connection, this.rows)\n  }\n\n  _getRows(connection, rows) {\n    connection.execute({\n      portal: this.portal,\n      rows: rows,\n    })\n    // if we're not reading pages of rows send the sync command\n    // to indicate the pipeline is finished\n    if (!rows) {\n      connection.sync()\n    } else {\n      // otherwise flush the call out to read more rows\n      connection.flush()\n    }\n  }\n\n  // http://developer.postgresql.org/pgdocs/postgres/protocol-flow.html#PROTOCOL-FLOW-EXT-QUERY\n  prepare(connection) {\n    // TODO refactor this poor encapsulation\n    if (!this.hasBeenParsed(connection)) {\n      connection.parse({\n        text: this.text,\n        name: this.name,\n        types: this.types,\n      })\n    }\n\n    // because we're mapping user supplied values to\n    // postgres wire protocol compatible values it could\n    // throw an exception, so try/catch this section\n    try {\n      connection.bind({\n        portal: this.portal,\n        statement: this.name,\n        values: this.values,\n        binary: this.binary,\n        valueMapper: utils.prepareValue,\n      })\n    } catch (err) {\n      this.handleError(err, connection)\n      return\n    }\n\n    connection.describe({\n      type: 'P',\n      name: this.portal || '',\n    })\n\n    this._getRows(connection, this.rows)\n  }\n\n  handleCopyInResponse(connection) {\n    connection.sendCopyFail('No source stream defined')\n  }\n\n  handleCopyData(msg, connection) {\n    // noop\n  }\n}\n\nmodule.exports = Query\n", "export type Mode = 'text' | 'binary'\n\nexport type MessageName =\n  | 'parseComplete'\n  | 'bindComplete'\n  | 'closeComplete'\n  | 'noData'\n  | 'portalSuspended'\n  | 'replicationStart'\n  | 'emptyQuery'\n  | 'copyDone'\n  | 'copyData'\n  | 'rowDescription'\n  | 'parameterDescription'\n  | 'parameterStatus'\n  | 'backendKeyData'\n  | 'notification'\n  | 'readyForQuery'\n  | 'commandComplete'\n  | 'dataRow'\n  | 'copyInResponse'\n  | 'copyOutResponse'\n  | 'authenticationOk'\n  | 'authenticationMD5Password'\n  | 'authenticationCleartextPassword'\n  | 'authenticationSASL'\n  | 'authenticationSASLContinue'\n  | 'authenticationSASLFinal'\n  | 'error'\n  | 'notice'\n\nexport interface BackendMessage {\n  name: MessageName\n  length: number\n}\n\nexport const parseComplete: BackendMessage = {\n  name: 'parseComplete',\n  length: 5,\n}\n\nexport const bindComplete: BackendMessage = {\n  name: 'bindComplete',\n  length: 5,\n}\n\nexport const closeComplete: BackendMessage = {\n  name: 'closeComplete',\n  length: 5,\n}\n\nexport const noData: BackendMessage = {\n  name: 'noData',\n  length: 5,\n}\n\nexport const portalSuspended: BackendMessage = {\n  name: 'portalSuspended',\n  length: 5,\n}\n\nexport const replicationStart: BackendMessage = {\n  name: 'replicationStart',\n  length: 4,\n}\n\nexport const emptyQuery: BackendMessage = {\n  name: 'emptyQuery',\n  length: 4,\n}\n\nexport const copyDone: BackendMessage = {\n  name: 'copyDone',\n  length: 4,\n}\n\ninterface NoticeOrError {\n  message: string | undefined\n  severity: string | undefined\n  code: string | undefined\n  detail: string | undefined\n  hint: string | undefined\n  position: string | undefined\n  internalPosition: string | undefined\n  internalQuery: string | undefined\n  where: string | undefined\n  schema: string | undefined\n  table: string | undefined\n  column: string | undefined\n  dataType: string | undefined\n  constraint: string | undefined\n  file: string | undefined\n  line: string | undefined\n  routine: string | undefined\n}\n\nexport class DatabaseError extends Error implements NoticeOrError {\n  public severity: string | undefined\n  public code: string | undefined\n  public detail: string | undefined\n  public hint: string | undefined\n  public position: string | undefined\n  public internalPosition: string | undefined\n  public internalQuery: string | undefined\n  public where: string | undefined\n  public schema: string | undefined\n  public table: string | undefined\n  public column: string | undefined\n  public dataType: string | undefined\n  public constraint: string | undefined\n  public file: string | undefined\n  public line: string | undefined\n  public routine: string | undefined\n  constructor(\n    message: string,\n    public readonly length: number,\n    public readonly name: MessageName\n  ) {\n    super(message)\n  }\n}\n\nexport class CopyDataMessage {\n  public readonly name = 'copyData'\n  constructor(\n    public readonly length: number,\n    public readonly chunk: Buffer\n  ) {}\n}\n\nexport class CopyResponse {\n  public readonly columnTypes: number[]\n  constructor(\n    public readonly length: number,\n    public readonly name: MessageName,\n    public readonly binary: boolean,\n    columnCount: number\n  ) {\n    this.columnTypes = new Array(columnCount)\n  }\n}\n\nexport class Field {\n  constructor(\n    public readonly name: string,\n    public readonly tableID: number,\n    public readonly columnID: number,\n    public readonly dataTypeID: number,\n    public readonly dataTypeSize: number,\n    public readonly dataTypeModifier: number,\n    public readonly format: Mode\n  ) {}\n}\n\nexport class RowDescriptionMessage {\n  public readonly name: MessageName = 'rowDescription'\n  public readonly fields: Field[]\n  constructor(\n    public readonly length: number,\n    public readonly fieldCount: number\n  ) {\n    this.fields = new Array(this.fieldCount)\n  }\n}\n\nexport class ParameterDescriptionMessage {\n  public readonly name: MessageName = 'parameterDescription'\n  public readonly dataTypeIDs: number[]\n  constructor(\n    public readonly length: number,\n    public readonly parameterCount: number\n  ) {\n    this.dataTypeIDs = new Array(this.parameterCount)\n  }\n}\n\nexport class ParameterStatusMessage {\n  public readonly name: MessageName = 'parameterStatus'\n  constructor(\n    public readonly length: number,\n    public readonly parameterName: string,\n    public readonly parameterValue: string\n  ) {}\n}\n\nexport class AuthenticationMD5Password implements BackendMessage {\n  public readonly name: MessageName = 'authenticationMD5Password'\n  constructor(\n    public readonly length: number,\n    public readonly salt: Buffer\n  ) {}\n}\n\nexport class BackendKeyDataMessage {\n  public readonly name: MessageName = 'backendKeyData'\n  constructor(\n    public readonly length: number,\n    public readonly processID: number,\n    public readonly secretKey: number\n  ) {}\n}\n\nexport class NotificationResponseMessage {\n  public readonly name: MessageName = 'notification'\n  constructor(\n    public readonly length: number,\n    public readonly processId: number,\n    public readonly channel: string,\n    public readonly payload: string\n  ) {}\n}\n\nexport class ReadyForQueryMessage {\n  public readonly name: MessageName = 'readyForQuery'\n  constructor(\n    public readonly length: number,\n    public readonly status: string\n  ) {}\n}\n\nexport class CommandCompleteMessage {\n  public readonly name: MessageName = 'commandComplete'\n  constructor(\n    public readonly length: number,\n    public readonly text: string\n  ) {}\n}\n\nexport class DataRowMessage {\n  public readonly fieldCount: number\n  public readonly name: MessageName = 'dataRow'\n  constructor(\n    public length: number,\n    public fields: any[]\n  ) {\n    this.fieldCount = fields.length\n  }\n}\n\nexport class NoticeMessage implements BackendMessage, NoticeOrError {\n  constructor(\n    public readonly length: number,\n    public readonly message: string | undefined\n  ) {}\n  public readonly name = 'notice'\n  public severity: string | undefined\n  public code: string | undefined\n  public detail: string | undefined\n  public hint: string | undefined\n  public position: string | undefined\n  public internalPosition: string | undefined\n  public internalQuery: string | undefined\n  public where: string | undefined\n  public schema: string | undefined\n  public table: string | undefined\n  public column: string | undefined\n  public dataType: string | undefined\n  public constraint: string | undefined\n  public file: string | undefined\n  public line: string | undefined\n  public routine: string | undefined\n}\n", "//binary data writer tuned for encoding binary specific to the postgres binary protocol\n\nexport class Writer {\n  private buffer: Buffer\n  private offset: number = 5\n  private headerPosition: number = 0\n  constructor(private size = 256) {\n    this.buffer = Buffer.allocUnsafe(size)\n  }\n\n  private ensure(size: number): void {\n    const remaining = this.buffer.length - this.offset\n    if (remaining < size) {\n      const oldBuffer = this.buffer\n      // exponential growth factor of around ~ 1.5\n      // https://stackoverflow.com/questions/2269063/buffer-growth-strategy\n      const newSize = oldBuffer.length + (oldBuffer.length >> 1) + size\n      this.buffer = Buffer.allocUnsafe(newSize)\n      oldBuffer.copy(this.buffer)\n    }\n  }\n\n  public addInt32(num: number): Writer {\n    this.ensure(4)\n    this.buffer[this.offset++] = (num >>> 24) & 0xff\n    this.buffer[this.offset++] = (num >>> 16) & 0xff\n    this.buffer[this.offset++] = (num >>> 8) & 0xff\n    this.buffer[this.offset++] = (num >>> 0) & 0xff\n    return this\n  }\n\n  public addInt16(num: number): Writer {\n    this.ensure(2)\n    this.buffer[this.offset++] = (num >>> 8) & 0xff\n    this.buffer[this.offset++] = (num >>> 0) & 0xff\n    return this\n  }\n\n  public addCString(string: string): Writer {\n    if (!string) {\n      this.ensure(1)\n    } else {\n      const len = Buffer.byteLength(string)\n      this.ensure(len + 1) // +1 for null terminator\n      this.buffer.write(string, this.offset, 'utf-8')\n      this.offset += len\n    }\n\n    this.buffer[this.offset++] = 0 // null terminator\n    return this\n  }\n\n  public addString(string: string = ''): Writer {\n    const len = Buffer.byteLength(string)\n    this.ensure(len)\n    this.buffer.write(string, this.offset)\n    this.offset += len\n    return this\n  }\n\n  public add(otherBuffer: Buffer): Writer {\n    this.ensure(otherBuffer.length)\n    otherBuffer.copy(this.buffer, this.offset)\n    this.offset += otherBuffer.length\n    return this\n  }\n\n  private join(code?: number): Buffer {\n    if (code) {\n      this.buffer[this.headerPosition] = code\n      //length is everything in this packet minus the code\n      const length = this.offset - (this.headerPosition + 1)\n      this.buffer.writeInt32BE(length, this.headerPosition + 1)\n    }\n    return this.buffer.slice(code ? 0 : 5, this.offset)\n  }\n\n  public flush(code?: number): Buffer {\n    const result = this.join(code)\n    this.offset = 5\n    this.headerPosition = 0\n    this.buffer = Buffer.allocUnsafe(this.size)\n    return result\n  }\n}\n", "import { Writer } from './buffer-writer'\n\nconst enum code {\n  startup = 0x70,\n  query = 0x51,\n  parse = 0x50,\n  bind = 0x42,\n  execute = 0x45,\n  flush = 0x48,\n  sync = 0x53,\n  end = 0x58,\n  close = 0x43,\n  describe = 0x44,\n  copyFromChunk = 0x64,\n  copyDone = 0x63,\n  copyFail = 0x66,\n}\n\nconst writer = new Writer()\n\nconst startup = (opts: Record<string, string>): Buffer => {\n  // protocol version\n  writer.addInt16(3).addInt16(0)\n  for (const key of Object.keys(opts)) {\n    writer.addCString(key).addCString(opts[key])\n  }\n\n  writer.addCString('client_encoding').addCString('UTF8')\n\n  const bodyBuffer = writer.addCString('').flush()\n  // this message is sent without a code\n\n  const length = bodyBuffer.length + 4\n\n  return new Writer().addInt32(length).add(bodyBuffer).flush()\n}\n\nconst requestSsl = (): Buffer => {\n  const response = Buffer.allocUnsafe(8)\n  response.writeInt32BE(8, 0)\n  response.writeInt32BE(80877103, 4)\n  return response\n}\n\nconst password = (password: string): Buffer => {\n  return writer.addCString(password).flush(code.startup)\n}\n\nconst sendSASLInitialResponseMessage = function (mechanism: string, initialResponse: string): Buffer {\n  // 0x70 = 'p'\n  writer.addCString(mechanism).addInt32(Buffer.byteLength(initialResponse)).addString(initialResponse)\n\n  return writer.flush(code.startup)\n}\n\nconst sendSCRAMClientFinalMessage = function (additionalData: string): Buffer {\n  return writer.addString(additionalData).flush(code.startup)\n}\n\nconst query = (text: string): Buffer => {\n  return writer.addCString(text).flush(code.query)\n}\n\ntype ParseOpts = {\n  name?: string\n  types?: number[]\n  text: string\n}\n\nconst emptyArray: any[] = []\n\nconst parse = (query: ParseOpts): Buffer => {\n  // expect something like this:\n  // { name: 'queryName',\n  //   text: 'select * from blah',\n  //   types: ['int8', 'bool'] }\n\n  // normalize missing query names to allow for null\n  const name = query.name || ''\n  if (name.length > 63) {\n    console.error('Warning! Postgres only supports 63 characters for query names.')\n    console.error('You supplied %s (%s)', name, name.length)\n    console.error('This can cause conflicts and silent errors executing queries')\n  }\n\n  const types = query.types || emptyArray\n\n  const len = types.length\n\n  const buffer = writer\n    .addCString(name) // name of query\n    .addCString(query.text) // actual query text\n    .addInt16(len)\n\n  for (let i = 0; i < len; i++) {\n    buffer.addInt32(types[i])\n  }\n\n  return writer.flush(code.parse)\n}\n\ntype ValueMapper = (param: any, index: number) => any\n\ntype BindOpts = {\n  portal?: string\n  binary?: boolean\n  statement?: string\n  values?: any[]\n  // optional map from JS value to postgres value per parameter\n  valueMapper?: ValueMapper\n}\n\nconst paramWriter = new Writer()\n\n// make this a const enum so typescript will inline the value\nconst enum ParamType {\n  STRING = 0,\n  BINARY = 1,\n}\n\nconst writeValues = function (values: any[], valueMapper?: ValueMapper): void {\n  for (let i = 0; i < values.length; i++) {\n    const mappedVal = valueMapper ? valueMapper(values[i], i) : values[i]\n    if (mappedVal == null) {\n      // add the param type (string) to the writer\n      writer.addInt16(ParamType.STRING)\n      // write -1 to the param writer to indicate null\n      paramWriter.addInt32(-1)\n    } else if (mappedVal instanceof Buffer) {\n      // add the param type (binary) to the writer\n      writer.addInt16(ParamType.BINARY)\n      // add the buffer to the param writer\n      paramWriter.addInt32(mappedVal.length)\n      paramWriter.add(mappedVal)\n    } else {\n      // add the param type (string) to the writer\n      writer.addInt16(ParamType.STRING)\n      paramWriter.addInt32(Buffer.byteLength(mappedVal))\n      paramWriter.addString(mappedVal)\n    }\n  }\n}\n\nconst bind = (config: BindOpts = {}): Buffer => {\n  // normalize config\n  const portal = config.portal || ''\n  const statement = config.statement || ''\n  const binary = config.binary || false\n  const values = config.values || emptyArray\n  const len = values.length\n\n  writer.addCString(portal).addCString(statement)\n  writer.addInt16(len)\n\n  writeValues(values, config.valueMapper)\n\n  writer.addInt16(len)\n  writer.add(paramWriter.flush())\n\n  // all results use the same format code\n  writer.addInt16(1)\n  // format code\n  writer.addInt16(binary ? ParamType.BINARY : ParamType.STRING)\n  return writer.flush(code.bind)\n}\n\ntype ExecOpts = {\n  portal?: string\n  rows?: number\n}\n\nconst emptyExecute = Buffer.from([code.execute, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00])\n\nconst execute = (config?: ExecOpts): Buffer => {\n  // this is the happy path for most queries\n  if (!config || (!config.portal && !config.rows)) {\n    return emptyExecute\n  }\n\n  const portal = config.portal || ''\n  const rows = config.rows || 0\n\n  const portalLength = Buffer.byteLength(portal)\n  const len = 4 + portalLength + 1 + 4\n  // one extra bit for code\n  const buff = Buffer.allocUnsafe(1 + len)\n  buff[0] = code.execute\n  buff.writeInt32BE(len, 1)\n  buff.write(portal, 5, 'utf-8')\n  buff[portalLength + 5] = 0 // null terminate portal cString\n  buff.writeUInt32BE(rows, buff.length - 4)\n  return buff\n}\n\nconst cancel = (processID: number, secretKey: number): Buffer => {\n  const buffer = Buffer.allocUnsafe(16)\n  buffer.writeInt32BE(16, 0)\n  buffer.writeInt16BE(1234, 4)\n  buffer.writeInt16BE(5678, 6)\n  buffer.writeInt32BE(processID, 8)\n  buffer.writeInt32BE(secretKey, 12)\n  return buffer\n}\n\ntype PortalOpts = {\n  type: 'S' | 'P'\n  name?: string\n}\n\nconst cstringMessage = (code: code, string: string): Buffer => {\n  const stringLen = Buffer.byteLength(string)\n  const len = 4 + stringLen + 1\n  // one extra bit for code\n  const buffer = Buffer.allocUnsafe(1 + len)\n  buffer[0] = code\n  buffer.writeInt32BE(len, 1)\n  buffer.write(string, 5, 'utf-8')\n  buffer[len] = 0 // null terminate cString\n  return buffer\n}\n\nconst emptyDescribePortal = writer.addCString('P').flush(code.describe)\nconst emptyDescribeStatement = writer.addCString('S').flush(code.describe)\n\nconst describe = (msg: PortalOpts): Buffer => {\n  return msg.name\n    ? cstringMessage(code.describe, `${msg.type}${msg.name || ''}`)\n    : msg.type === 'P'\n    ? emptyDescribePortal\n    : emptyDescribeStatement\n}\n\nconst close = (msg: PortalOpts): Buffer => {\n  const text = `${msg.type}${msg.name || ''}`\n  return cstringMessage(code.close, text)\n}\n\nconst copyData = (chunk: Buffer): Buffer => {\n  return writer.add(chunk).flush(code.copyFromChunk)\n}\n\nconst copyFail = (message: string): Buffer => {\n  return cstringMessage(code.copyFail, message)\n}\n\nconst codeOnlyBuffer = (code: code): Buffer => Buffer.from([code, 0x00, 0x00, 0x00, 0x04])\n\nconst flushBuffer = codeOnlyBuffer(code.flush)\nconst syncBuffer = codeOnlyBuffer(code.sync)\nconst endBuffer = codeOnlyBuffer(code.end)\nconst copyDoneBuffer = codeOnlyBuffer(code.copyDone)\n\nconst serialize = {\n  startup,\n  password,\n  requestSsl,\n  sendSASLInitialResponseMessage,\n  sendSCRAMClientFinalMessage,\n  query,\n  parse,\n  bind,\n  execute,\n  describe,\n  close,\n  flush: () => flushBuffer,\n  sync: () => syncBuffer,\n  end: () => endBuffer,\n  copyData,\n  copyDone: () => copyDoneBuffer,\n  copyFail,\n  cancel,\n}\n\nexport { serialize }\n", "const emptyBuffer = Buffer.allocUnsafe(0)\n\nexport class BufferReader {\n  private buffer: Buffer = emptyBuffer\n\n  // TODO(bmc): support non-utf8 encoding?\n  private encoding: string = 'utf-8'\n\n  constructor(private offset: number = 0) {}\n\n  public setBuffer(offset: number, buffer: Buffer): void {\n    this.offset = offset\n    this.buffer = buffer\n  }\n\n  public int16(): number {\n    const result = this.buffer.readInt16BE(this.offset)\n    this.offset += 2\n    return result\n  }\n\n  public byte(): number {\n    const result = this.buffer[this.offset]\n    this.offset++\n    return result\n  }\n\n  public int32(): number {\n    const result = this.buffer.readInt32BE(this.offset)\n    this.offset += 4\n    return result\n  }\n\n  public uint32(): number {\n    const result = this.buffer.readUInt32BE(this.offset)\n    this.offset += 4\n    return result\n  }\n\n  public string(length: number): string {\n    const result = this.buffer.toString(this.encoding, this.offset, this.offset + length)\n    this.offset += length\n    return result\n  }\n\n  public cstring(): string {\n    const start = this.offset\n    let end = start\n    // eslint-disable-next-line no-empty\n    while (this.buffer[end++] !== 0) {}\n    this.offset = end\n    return this.buffer.toString(this.encoding, start, end - 1)\n  }\n\n  public bytes(length: number): Buffer {\n    const result = this.buffer.slice(this.offset, this.offset + length)\n    this.offset += length\n    return result\n  }\n}\n", "import { TransformOptions } from 'stream'\nimport {\n  Mode,\n  bindComplete,\n  parseComplete,\n  closeComplete,\n  noData,\n  portalSuspended,\n  copyDone,\n  replicationStart,\n  emptyQuery,\n  ReadyForQueryMessage,\n  CommandCompleteMessage,\n  CopyDataMessage,\n  CopyResponse,\n  NotificationResponseMessage,\n  RowDescriptionMessage,\n  ParameterDescriptionMessage,\n  Field,\n  DataRowMessage,\n  ParameterStatusMessage,\n  BackendKeyDataMessage,\n  DatabaseError,\n  BackendMessage,\n  MessageName,\n  AuthenticationMD5Password,\n  NoticeMessage,\n} from './messages'\nimport { BufferReader } from './buffer-reader'\n\n// every message is prefixed with a single bye\nconst CODE_LENGTH = 1\n// every message has an int32 length which includes itself but does\n// NOT include the code in the length\nconst LEN_LENGTH = 4\n\nconst HEADER_LENGTH = CODE_LENGTH + LEN_LENGTH\n\nexport type Packet = {\n  code: number\n  packet: Buffer\n}\n\nconst emptyBuffer = Buffer.allocUnsafe(0)\n\ntype StreamOptions = TransformOptions & {\n  mode: Mode\n}\n\nconst enum MessageCodes {\n  DataRow = 0x44, // D\n  ParseComplete = 0x31, // 1\n  BindComplete = 0x32, // 2\n  CloseComplete = 0x33, // 3\n  CommandComplete = 0x43, // C\n  ReadyForQuery = 0x5a, // Z\n  NoData = 0x6e, // n\n  NotificationResponse = 0x41, // A\n  AuthenticationResponse = 0x52, // R\n  ParameterStatus = 0x53, // S\n  BackendKeyData = 0x4b, // K\n  ErrorMessage = 0x45, // E\n  NoticeMessage = 0x4e, // N\n  RowDescriptionMessage = 0x54, // T\n  ParameterDescriptionMessage = 0x74, // t\n  PortalSuspended = 0x73, // s\n  ReplicationStart = 0x57, // W\n  EmptyQuery = 0x49, // I\n  CopyIn = 0x47, // G\n  CopyOut = 0x48, // H\n  CopyDone = 0x63, // c\n  CopyData = 0x64, // d\n}\n\nexport type MessageCallback = (msg: BackendMessage) => void\n\nexport class Parser {\n  private buffer: Buffer = emptyBuffer\n  private bufferLength: number = 0\n  private bufferOffset: number = 0\n  private reader = new BufferReader()\n  private mode: Mode\n\n  constructor(opts?: StreamOptions) {\n    if (opts?.mode === 'binary') {\n      throw new Error('Binary mode not supported yet')\n    }\n    this.mode = opts?.mode || 'text'\n  }\n\n  public parse(buffer: Buffer, callback: MessageCallback) {\n    this.mergeBuffer(buffer)\n    const bufferFullLength = this.bufferOffset + this.bufferLength\n    let offset = this.bufferOffset\n    while (offset + HEADER_LENGTH <= bufferFullLength) {\n      // code is 1 byte long - it identifies the message type\n      const code = this.buffer[offset]\n      // length is 1 Uint32BE - it is the length of the message EXCLUDING the code\n      const length = this.buffer.readUInt32BE(offset + CODE_LENGTH)\n      const fullMessageLength = CODE_LENGTH + length\n      if (fullMessageLength + offset <= bufferFullLength) {\n        const message = this.handlePacket(offset + HEADER_LENGTH, code, length, this.buffer)\n        callback(message)\n        offset += fullMessageLength\n      } else {\n        break\n      }\n    }\n    if (offset === bufferFullLength) {\n      // No more use for the buffer\n      this.buffer = emptyBuffer\n      this.bufferLength = 0\n      this.bufferOffset = 0\n    } else {\n      // Adjust the cursors of remainingBuffer\n      this.bufferLength = bufferFullLength - offset\n      this.bufferOffset = offset\n    }\n  }\n\n  private mergeBuffer(buffer: Buffer): void {\n    if (this.bufferLength > 0) {\n      const newLength = this.bufferLength + buffer.byteLength\n      const newFullLength = newLength + this.bufferOffset\n      if (newFullLength > this.buffer.byteLength) {\n        // We can't concat the new buffer with the remaining one\n        let newBuffer: Buffer\n        if (newLength <= this.buffer.byteLength && this.bufferOffset >= this.bufferLength) {\n          // We can move the relevant part to the beginning of the buffer instead of allocating a new buffer\n          newBuffer = this.buffer\n        } else {\n          // Allocate a new larger buffer\n          let newBufferLength = this.buffer.byteLength * 2\n          while (newLength >= newBufferLength) {\n            newBufferLength *= 2\n          }\n          newBuffer = Buffer.allocUnsafe(newBufferLength)\n        }\n        // Move the remaining buffer to the new one\n        this.buffer.copy(newBuffer, 0, this.bufferOffset, this.bufferOffset + this.bufferLength)\n        this.buffer = newBuffer\n        this.bufferOffset = 0\n      }\n      // Concat the new buffer with the remaining one\n      buffer.copy(this.buffer, this.bufferOffset + this.bufferLength)\n      this.bufferLength = newLength\n    } else {\n      this.buffer = buffer\n      this.bufferOffset = 0\n      this.bufferLength = buffer.byteLength\n    }\n  }\n\n  private handlePacket(offset: number, code: number, length: number, bytes: Buffer): BackendMessage {\n    switch (code) {\n      case MessageCodes.BindComplete:\n        return bindComplete\n      case MessageCodes.ParseComplete:\n        return parseComplete\n      case MessageCodes.CloseComplete:\n        return closeComplete\n      case MessageCodes.NoData:\n        return noData\n      case MessageCodes.PortalSuspended:\n        return portalSuspended\n      case MessageCodes.CopyDone:\n        return copyDone\n      case MessageCodes.ReplicationStart:\n        return replicationStart\n      case MessageCodes.EmptyQuery:\n        return emptyQuery\n      case MessageCodes.DataRow:\n        return this.parseDataRowMessage(offset, length, bytes)\n      case MessageCodes.CommandComplete:\n        return this.parseCommandCompleteMessage(offset, length, bytes)\n      case MessageCodes.ReadyForQuery:\n        return this.parseReadyForQueryMessage(offset, length, bytes)\n      case MessageCodes.NotificationResponse:\n        return this.parseNotificationMessage(offset, length, bytes)\n      case MessageCodes.AuthenticationResponse:\n        return this.parseAuthenticationResponse(offset, length, bytes)\n      case MessageCodes.ParameterStatus:\n        return this.parseParameterStatusMessage(offset, length, bytes)\n      case MessageCodes.BackendKeyData:\n        return this.parseBackendKeyData(offset, length, bytes)\n      case MessageCodes.ErrorMessage:\n        return this.parseErrorMessage(offset, length, bytes, 'error')\n      case MessageCodes.NoticeMessage:\n        return this.parseErrorMessage(offset, length, bytes, 'notice')\n      case MessageCodes.RowDescriptionMessage:\n        return this.parseRowDescriptionMessage(offset, length, bytes)\n      case MessageCodes.ParameterDescriptionMessage:\n        return this.parseParameterDescriptionMessage(offset, length, bytes)\n      case MessageCodes.CopyIn:\n        return this.parseCopyInMessage(offset, length, bytes)\n      case MessageCodes.CopyOut:\n        return this.parseCopyOutMessage(offset, length, bytes)\n      case MessageCodes.CopyData:\n        return this.parseCopyData(offset, length, bytes)\n      default:\n        return new DatabaseError('received invalid response: ' + code.toString(16), length, 'error')\n    }\n  }\n\n  private parseReadyForQueryMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const status = this.reader.string(1)\n    return new ReadyForQueryMessage(length, status)\n  }\n\n  private parseCommandCompleteMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const text = this.reader.cstring()\n    return new CommandCompleteMessage(length, text)\n  }\n\n  private parseCopyData(offset: number, length: number, bytes: Buffer) {\n    const chunk = bytes.slice(offset, offset + (length - 4))\n    return new CopyDataMessage(length, chunk)\n  }\n\n  private parseCopyInMessage(offset: number, length: number, bytes: Buffer) {\n    return this.parseCopyMessage(offset, length, bytes, 'copyInResponse')\n  }\n\n  private parseCopyOutMessage(offset: number, length: number, bytes: Buffer) {\n    return this.parseCopyMessage(offset, length, bytes, 'copyOutResponse')\n  }\n\n  private parseCopyMessage(offset: number, length: number, bytes: Buffer, messageName: MessageName) {\n    this.reader.setBuffer(offset, bytes)\n    const isBinary = this.reader.byte() !== 0\n    const columnCount = this.reader.int16()\n    const message = new CopyResponse(length, messageName, isBinary, columnCount)\n    for (let i = 0; i < columnCount; i++) {\n      message.columnTypes[i] = this.reader.int16()\n    }\n    return message\n  }\n\n  private parseNotificationMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const processId = this.reader.int32()\n    const channel = this.reader.cstring()\n    const payload = this.reader.cstring()\n    return new NotificationResponseMessage(length, processId, channel, payload)\n  }\n\n  private parseRowDescriptionMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const fieldCount = this.reader.int16()\n    const message = new RowDescriptionMessage(length, fieldCount)\n    for (let i = 0; i < fieldCount; i++) {\n      message.fields[i] = this.parseField()\n    }\n    return message\n  }\n\n  private parseField(): Field {\n    const name = this.reader.cstring()\n    const tableID = this.reader.uint32()\n    const columnID = this.reader.int16()\n    const dataTypeID = this.reader.uint32()\n    const dataTypeSize = this.reader.int16()\n    const dataTypeModifier = this.reader.int32()\n    const mode = this.reader.int16() === 0 ? 'text' : 'binary'\n    return new Field(name, tableID, columnID, dataTypeID, dataTypeSize, dataTypeModifier, mode)\n  }\n\n  private parseParameterDescriptionMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const parameterCount = this.reader.int16()\n    const message = new ParameterDescriptionMessage(length, parameterCount)\n    for (let i = 0; i < parameterCount; i++) {\n      message.dataTypeIDs[i] = this.reader.int32()\n    }\n    return message\n  }\n\n  private parseDataRowMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const fieldCount = this.reader.int16()\n    const fields: any[] = new Array(fieldCount)\n    for (let i = 0; i < fieldCount; i++) {\n      const len = this.reader.int32()\n      // a -1 for length means the value of the field is null\n      fields[i] = len === -1 ? null : this.reader.string(len)\n    }\n    return new DataRowMessage(length, fields)\n  }\n\n  private parseParameterStatusMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const name = this.reader.cstring()\n    const value = this.reader.cstring()\n    return new ParameterStatusMessage(length, name, value)\n  }\n\n  private parseBackendKeyData(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const processID = this.reader.int32()\n    const secretKey = this.reader.int32()\n    return new BackendKeyDataMessage(length, processID, secretKey)\n  }\n\n  public parseAuthenticationResponse(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const code = this.reader.int32()\n    // TODO(bmc): maybe better types here\n    const message: BackendMessage & any = {\n      name: 'authenticationOk',\n      length,\n    }\n\n    switch (code) {\n      case 0: // AuthenticationOk\n        break\n      case 3: // AuthenticationCleartextPassword\n        if (message.length === 8) {\n          message.name = 'authenticationCleartextPassword'\n        }\n        break\n      case 5: // AuthenticationMD5Password\n        if (message.length === 12) {\n          message.name = 'authenticationMD5Password'\n          const salt = this.reader.bytes(4)\n          return new AuthenticationMD5Password(length, salt)\n        }\n        break\n      case 10: // AuthenticationSASL\n        {\n          message.name = 'authenticationSASL'\n          message.mechanisms = []\n          let mechanism: string\n          do {\n            mechanism = this.reader.cstring()\n            if (mechanism) {\n              message.mechanisms.push(mechanism)\n            }\n          } while (mechanism)\n        }\n        break\n      case 11: // AuthenticationSASLContinue\n        message.name = 'authenticationSASLContinue'\n        message.data = this.reader.string(length - 8)\n        break\n      case 12: // AuthenticationSASLFinal\n        message.name = 'authenticationSASLFinal'\n        message.data = this.reader.string(length - 8)\n        break\n      default:\n        throw new Error('Unknown authenticationOk message type ' + code)\n    }\n    return message\n  }\n\n  private parseErrorMessage(offset: number, length: number, bytes: Buffer, name: MessageName) {\n    this.reader.setBuffer(offset, bytes)\n    const fields: Record<string, string> = {}\n    let fieldType = this.reader.string(1)\n    while (fieldType !== '\\0') {\n      fields[fieldType] = this.reader.cstring()\n      fieldType = this.reader.string(1)\n    }\n\n    const messageValue = fields.M\n\n    const message =\n      name === 'notice' ? new NoticeMessage(length, messageValue) : new DatabaseError(messageValue, length, name)\n\n    message.severity = fields.S\n    message.code = fields.C\n    message.detail = fields.D\n    message.hint = fields.H\n    message.position = fields.P\n    message.internalPosition = fields.p\n    message.internalQuery = fields.q\n    message.where = fields.W\n    message.schema = fields.s\n    message.table = fields.t\n    message.column = fields.c\n    message.dataType = fields.d\n    message.constraint = fields.n\n    message.file = fields.F\n    message.line = fields.L\n    message.routine = fields.R\n    return message\n  }\n}\n", "import { DatabaseError } from './messages'\nimport { serialize } from './serializer'\nimport { Parser, MessageCallback } from './parser'\n\nexport function parse(stream: NodeJS.ReadableStream, callback: MessageCallback): Promise<void> {\n  const parser = new Parser()\n  stream.on('data', (buffer: Buffer) => parser.parse(buffer, callback))\n  return new Promise((resolve) => stream.on('end', () => resolve()))\n}\n\nexport { serialize, DatabaseError }\n", "// This is an empty module that is served up when outside of a workerd environment\n// See the `exports` field in package.json\nexport default {}\n", "const { getStream, getSecureStream } = getStreamFuncs()\n\nmodule.exports = {\n  /**\n   * Get a socket stream compatible with the current runtime environment.\n   * @returns {Duplex}\n   */\n  getStream,\n  /**\n   * Get a TLS secured socket, compatible with the current environment,\n   * using the socket and other settings given in `options`.\n   * @returns {Duplex}\n   */\n  getSecureStream,\n}\n\n/**\n * The stream functions that work in Node.js\n */\nfunction getNodejsStreamFuncs() {\n  function getStream(ssl) {\n    const net = require('net')\n    return new net.Socket()\n  }\n\n  function getSecureStream(options) {\n    const tls = require('tls')\n    return tls.connect(options)\n  }\n  return {\n    getStream,\n    getSecureStream,\n  }\n}\n\n/**\n * The stream functions that work in Cloudflare Workers\n */\nfunction getCloudflareStreamFuncs() {\n  function getStream(ssl) {\n    const { CloudflareSocket } = require('pg-cloudflare')\n    return new CloudflareSocket(ssl)\n  }\n\n  function getSecureStream(options) {\n    options.socket.startTls(options)\n    return options.socket\n  }\n  return {\n    getStream,\n    getSecureStream,\n  }\n}\n\n/**\n * Are we running in a Cloudflare Worker?\n *\n * @returns true if the code is currently running inside a Cloudflare Worker.\n */\nfunction isCloudflareRuntime() {\n  // Since 2022-03-21 the `global_navigator` compatibility flag is on for Cloudflare Workers\n  // which means that `navigator.userAgent` will be defined.\n  // eslint-disable-next-line no-undef\n  if (typeof navigator === 'object' && navigator !== null && typeof navigator.userAgent === 'string') {\n    // eslint-disable-next-line no-undef\n    return navigator.userAgent === 'Cloudflare-Workers'\n  }\n  // In case `navigator` or `navigator.userAgent` is not defined then try a more sneaky approach\n  if (typeof Response === 'function') {\n    const resp = new Response(null, { cf: { thing: true } })\n    if (typeof resp.cf === 'object' && resp.cf !== null && resp.cf.thing) {\n      return true\n    }\n  }\n  return false\n}\n\nfunction getStreamFuncs() {\n  if (isCloudflareRuntime()) {\n    return getCloudflareStreamFuncs()\n  }\n  return getNodejsStreamFuncs()\n}\n", "'use strict'\n\nconst EventEmitter = require('events').EventEmitter\n\nconst { parse, serialize } = require('pg-protocol')\nconst { getStream, getSecureStream } = require('./stream')\n\nconst flushBuffer = serialize.flush()\nconst syncBuffer = serialize.sync()\nconst endBuffer = serialize.end()\n\n// TODO(bmc) support binary mode at some point\nclass Connection extends EventEmitter {\n  constructor(config) {\n    super()\n    config = config || {}\n\n    this.stream = config.stream || getStream(config.ssl)\n    if (typeof this.stream === 'function') {\n      this.stream = this.stream(config)\n    }\n\n    this._keepAlive = config.keepAlive\n    this._keepAliveInitialDelayMillis = config.keepAliveInitialDelayMillis\n    this.lastBuffer = false\n    this.parsedStatements = {}\n    this.ssl = config.ssl || false\n    this._ending = false\n    this._emitMessage = false\n    const self = this\n    this.on('newListener', function (eventName) {\n      if (eventName === 'message') {\n        self._emitMessage = true\n      }\n    })\n  }\n\n  connect(port, host) {\n    const self = this\n\n    this._connecting = true\n    this.stream.setNoDelay(true)\n    this.stream.connect(port, host)\n\n    this.stream.once('connect', function () {\n      if (self._keepAlive) {\n        self.stream.setKeepAlive(true, self._keepAliveInitialDelayMillis)\n      }\n      self.emit('connect')\n    })\n\n    const reportStreamError = function (error) {\n      // errors about disconnections should be ignored during disconnect\n      if (self._ending && (error.code === 'ECONNRESET' || error.code === 'EPIPE')) {\n        return\n      }\n      self.emit('error', error)\n    }\n    this.stream.on('error', reportStreamError)\n\n    this.stream.on('close', function () {\n      self.emit('end')\n    })\n\n    if (!this.ssl) {\n      return this.attachListeners(this.stream)\n    }\n\n    this.stream.once('data', function (buffer) {\n      const responseCode = buffer.toString('utf8')\n      switch (responseCode) {\n        case 'S': // Server supports SSL connections, continue with a secure connection\n          break\n        case 'N': // Server does not support SSL connections\n          self.stream.end()\n          return self.emit('error', new Error('The server does not support SSL connections'))\n        default:\n          // Any other response byte, including 'E' (ErrorResponse) indicating a server error\n          self.stream.end()\n          return self.emit('error', new Error('There was an error establishing an SSL connection'))\n      }\n      const options = {\n        socket: self.stream,\n      }\n\n      if (self.ssl !== true) {\n        Object.assign(options, self.ssl)\n\n        if ('key' in self.ssl) {\n          options.key = self.ssl.key\n        }\n      }\n\n      const net = require('net')\n      if (net.isIP && net.isIP(host) === 0) {\n        options.servername = host\n      }\n      try {\n        self.stream = getSecureStream(options)\n      } catch (err) {\n        return self.emit('error', err)\n      }\n      self.attachListeners(self.stream)\n      self.stream.on('error', reportStreamError)\n\n      self.emit('sslconnect')\n    })\n  }\n\n  attachListeners(stream) {\n    parse(stream, (msg) => {\n      const eventName = msg.name === 'error' ? 'errorMessage' : msg.name\n      if (this._emitMessage) {\n        this.emit('message', msg)\n      }\n      this.emit(eventName, msg)\n    })\n  }\n\n  requestSsl() {\n    this.stream.write(serialize.requestSsl())\n  }\n\n  startup(config) {\n    this.stream.write(serialize.startup(config))\n  }\n\n  cancel(processID, secretKey) {\n    this._send(serialize.cancel(processID, secretKey))\n  }\n\n  password(password) {\n    this._send(serialize.password(password))\n  }\n\n  sendSASLInitialResponseMessage(mechanism, initialResponse) {\n    this._send(serialize.sendSASLInitialResponseMessage(mechanism, initialResponse))\n  }\n\n  sendSCRAMClientFinalMessage(additionalData) {\n    this._send(serialize.sendSCRAMClientFinalMessage(additionalData))\n  }\n\n  _send(buffer) {\n    if (!this.stream.writable) {\n      return false\n    }\n    return this.stream.write(buffer)\n  }\n\n  query(text) {\n    this._send(serialize.query(text))\n  }\n\n  // send parse message\n  parse(query) {\n    this._send(serialize.parse(query))\n  }\n\n  // send bind message\n  bind(config) {\n    this._send(serialize.bind(config))\n  }\n\n  // send execute message\n  execute(config) {\n    this._send(serialize.execute(config))\n  }\n\n  flush() {\n    if (this.stream.writable) {\n      this.stream.write(flushBuffer)\n    }\n  }\n\n  sync() {\n    this._ending = true\n    this._send(syncBuffer)\n  }\n\n  ref() {\n    this.stream.ref()\n  }\n\n  unref() {\n    this.stream.unref()\n  }\n\n  end() {\n    // 0x58 = 'X'\n    this._ending = true\n    if (!this._connecting || !this.stream.writable) {\n      this.stream.end()\n      return\n    }\n    return this.stream.write(endBuffer, () => {\n      this.stream.end()\n    })\n  }\n\n  close(msg) {\n    this._send(serialize.close(msg))\n  }\n\n  describe(msg) {\n    this._send(serialize.describe(msg))\n  }\n\n  sendCopyFromChunk(chunk) {\n    this._send(serialize.copyData(chunk))\n  }\n\n  endCopyFrom() {\n    this._send(serialize.copyDone())\n  }\n\n  sendCopyFail(msg) {\n    this._send(serialize.copyFail(msg))\n  }\n}\n\nmodule.exports = Connection\n", "/*\nCopyright (c) 2014-2021, Matteo Collina <hello@matteocollina.com>\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\n\n'use strict'\n\nconst { Transform } = require('stream')\nconst { StringDecoder } = require('string_decoder')\nconst kLast = Symbol('last')\nconst kDecoder = Symbol('decoder')\n\nfunction transform (chunk, enc, cb) {\n  let list\n  if (this.overflow) { // Line buffer is full. Skip to start of next line.\n    const buf = this[kDecoder].write(chunk)\n    list = buf.split(this.matcher)\n\n    if (list.length === 1) return cb() // Line ending not found. Discard entire chunk.\n\n    // Line ending found. Discard trailing fragment of previous line and reset overflow state.\n    list.shift()\n    this.overflow = false\n  } else {\n    this[kLast] += this[kDecoder].write(chunk)\n    list = this[kLast].split(this.matcher)\n  }\n\n  this[kLast] = list.pop()\n\n  for (let i = 0; i < list.length; i++) {\n    try {\n      push(this, this.mapper(list[i]))\n    } catch (error) {\n      return cb(error)\n    }\n  }\n\n  this.overflow = this[kLast].length > this.maxLength\n  if (this.overflow && !this.skipOverflow) {\n    cb(new Error('maximum buffer reached'))\n    return\n  }\n\n  cb()\n}\n\nfunction flush (cb) {\n  // forward any gibberish left in there\n  this[kLast] += this[kDecoder].end()\n\n  if (this[kLast]) {\n    try {\n      push(this, this.mapper(this[kLast]))\n    } catch (error) {\n      return cb(error)\n    }\n  }\n\n  cb()\n}\n\nfunction push (self, val) {\n  if (val !== undefined) {\n    self.push(val)\n  }\n}\n\nfunction noop (incoming) {\n  return incoming\n}\n\nfunction split (matcher, mapper, options) {\n  // Set defaults for any arguments not supplied.\n  matcher = matcher || /\\r?\\n/\n  mapper = mapper || noop\n  options = options || {}\n\n  // Test arguments explicitly.\n  switch (arguments.length) {\n    case 1:\n      // If mapper is only argument.\n      if (typeof matcher === 'function') {\n        mapper = matcher\n        matcher = /\\r?\\n/\n      // If options is only argument.\n      } else if (typeof matcher === 'object' && !(matcher instanceof RegExp) && !matcher[Symbol.split]) {\n        options = matcher\n        matcher = /\\r?\\n/\n      }\n      break\n\n    case 2:\n      // If mapper and options are arguments.\n      if (typeof matcher === 'function') {\n        options = mapper\n        mapper = matcher\n        matcher = /\\r?\\n/\n      // If matcher and options are arguments.\n      } else if (typeof mapper === 'object') {\n        options = mapper\n        mapper = noop\n      }\n  }\n\n  options = Object.assign({}, options)\n  options.autoDestroy = true\n  options.transform = transform\n  options.flush = flush\n  options.readableObjectMode = true\n\n  const stream = new Transform(options)\n\n  stream[kLast] = ''\n  stream[kDecoder] = new StringDecoder('utf8')\n  stream.matcher = matcher\n  stream.mapper = mapper\n  stream.maxLength = options.maxLength\n  stream.skipOverflow = options.skipOverflow || false\n  stream.overflow = false\n  stream._destroy = function (err, cb) {\n    // Weird Node v12 bug that we need to work around\n    this._writableState.errorEmitted = false\n    cb(err)\n  }\n\n  return stream\n}\n\nmodule.exports = split\n", "'use strict';\n\nvar path = require('path')\n  , Stream = require('stream').Stream\n  , split = require('split2')\n  , util = require('util')\n  , defaultPort = 5432\n  , isWin = (process.platform === 'win32')\n  , warnStream = process.stderr\n;\n\n\nvar S_IRWXG = 56     //    00070(8)\n  , S_IRWXO = 7      //    00007(8)\n  , S_IFMT  = 61440  // 00170000(8)\n  , S_IFREG = 32768  //  0100000(8)\n;\nfunction isRegFile(mode) {\n    return ((mode & S_IFMT) == S_IFREG);\n}\n\nvar fieldNames = [ 'host', 'port', 'database', 'user', 'password' ];\nvar nrOfFields = fieldNames.length;\nvar passKey = fieldNames[ nrOfFields -1 ];\n\n\nfunction warn() {\n    var isWritable = (\n        warnStream instanceof Stream &&\n          true === warnStream.writable\n    );\n\n    if (isWritable) {\n        var args = Array.prototype.slice.call(arguments).concat(\"\\n\");\n        warnStream.write( util.format.apply(util, args) );\n    }\n}\n\n\nObject.defineProperty(module.exports, 'isWin', {\n    get : function() {\n        return isWin;\n    } ,\n    set : function(val) {\n        isWin = val;\n    }\n});\n\n\nmodule.exports.warnTo = function(stream) {\n    var old = warnStream;\n    warnStream = stream;\n    return old;\n};\n\nmodule.exports.getFileName = function(rawEnv){\n    var env = rawEnv || process.env;\n    var file = env.PGPASSFILE || (\n        isWin ?\n          path.join( env.APPDATA || './' , 'postgresql', 'pgpass.conf' ) :\n          path.join( env.HOME || './', '.pgpass' )\n    );\n    return file;\n};\n\nmodule.exports.usePgPass = function(stats, fname) {\n    if (Object.prototype.hasOwnProperty.call(process.env, 'PGPASSWORD')) {\n        return false;\n    }\n\n    if (isWin) {\n        return true;\n    }\n\n    fname = fname || '<unkn>';\n\n    if (! isRegFile(stats.mode)) {\n        warn('WARNING: password file \"%s\" is not a plain file', fname);\n        return false;\n    }\n\n    if (stats.mode & (S_IRWXG | S_IRWXO)) {\n        /* If password file is insecure, alert the user and ignore it. */\n        warn('WARNING: password file \"%s\" has group or world access; permissions should be u=rw (0600) or less', fname);\n        return false;\n    }\n\n    return true;\n};\n\n\nvar matcher = module.exports.match = function(connInfo, entry) {\n    return fieldNames.slice(0, -1).reduce(function(prev, field, idx){\n        if (idx == 1) {\n            // the port\n            if ( Number( connInfo[field] || defaultPort ) === Number( entry[field] ) ) {\n                return prev && true;\n            }\n        }\n        return prev && (\n            entry[field] === '*' ||\n              entry[field] === connInfo[field]\n        );\n    }, true);\n};\n\n\nmodule.exports.getPassword = function(connInfo, stream, cb) {\n    var pass;\n    var lineStream = stream.pipe(split());\n\n    function onLine(line) {\n        var entry = parseLine(line);\n        if (entry && isValidEntry(entry) && matcher(connInfo, entry)) {\n            pass = entry[passKey];\n            lineStream.end(); // -> calls onEnd(), but pass is set now\n        }\n    }\n\n    var onEnd = function() {\n        stream.destroy();\n        cb(pass);\n    };\n\n    var onErr = function(err) {\n        stream.destroy();\n        warn('WARNING: error on reading file: %s', err);\n        cb(undefined);\n    };\n\n    stream.on('error', onErr);\n    lineStream\n        .on('data', onLine)\n        .on('end', onEnd)\n        .on('error', onErr)\n    ;\n\n};\n\n\nvar parseLine = module.exports.parseLine = function(line) {\n    if (line.length < 11 || line.match(/^\\s+#/)) {\n        return null;\n    }\n\n    var curChar = '';\n    var prevChar = '';\n    var fieldIdx = 0;\n    var startIdx = 0;\n    var endIdx = 0;\n    var obj = {};\n    var isLastField = false;\n    var addToObj = function(idx, i0, i1) {\n        var field = line.substring(i0, i1);\n\n        if (! Object.hasOwnProperty.call(process.env, 'PGPASS_NO_DEESCAPE')) {\n            field = field.replace(/\\\\([:\\\\])/g, '$1');\n        }\n\n        obj[ fieldNames[idx] ] = field;\n    };\n\n    for (var i = 0 ; i < line.length-1 ; i += 1) {\n        curChar = line.charAt(i+1);\n        prevChar = line.charAt(i);\n\n        isLastField = (fieldIdx == nrOfFields-1);\n\n        if (isLastField) {\n            addToObj(fieldIdx, startIdx);\n            break;\n        }\n\n        if (i >= 0 && curChar == ':' && prevChar !== '\\\\') {\n            addToObj(fieldIdx, startIdx, i+1);\n\n            startIdx = i+2;\n            fieldIdx += 1;\n        }\n    }\n\n    obj = ( Object.keys(obj).length === nrOfFields ) ? obj : null;\n\n    return obj;\n};\n\n\nvar isValidEntry = module.exports.isValidEntry = function(entry){\n    var rules = {\n        // host\n        0 : function(x){\n            return x.length > 0;\n        } ,\n        // port\n        1 : function(x){\n            if (x === '*') {\n                return true;\n            }\n            x = Number(x);\n            return (\n                isFinite(x) &&\n                  x > 0 &&\n                  x < 9007199254740992 &&\n                  Math.floor(x) === x\n            );\n        } ,\n        // database\n        2 : function(x){\n            return x.length > 0;\n        } ,\n        // username\n        3 : function(x){\n            return x.length > 0;\n        } ,\n        // password\n        4 : function(x){\n            return x.length > 0;\n        }\n    };\n\n    for (var idx = 0 ; idx < fieldNames.length ; idx += 1) {\n        var rule = rules[idx];\n        var value = entry[ fieldNames[idx] ] || '';\n\n        var res = rule(value);\n        if (!res) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\n", "'use strict';\n\nvar path = require('path')\n  , fs = require('fs')\n  , helper = require('./helper.js')\n;\n\n\nmodule.exports = function(connInfo, cb) {\n    var file = helper.getFileName();\n    \n    fs.stat(file, function(err, stat){\n        if (err || !helper.usePgPass(stat, file)) {\n            return cb(undefined);\n        }\n\n        var st = fs.createReadStream(file);\n\n        helper.getPassword(connInfo, st, cb);\n    });\n};\n\nmodule.exports.warnTo = helper.warnTo;\n", "'use strict'\n\nconst EventEmitter = require('events').EventEmitter\nconst utils = require('./utils')\nconst sasl = require('./crypto/sasl')\nconst TypeOverrides = require('./type-overrides')\n\nconst ConnectionParameters = require('./connection-parameters')\nconst Query = require('./query')\nconst defaults = require('./defaults')\nconst Connection = require('./connection')\nconst crypto = require('./crypto/utils')\n\nclass Client extends EventEmitter {\n  constructor(config) {\n    super()\n\n    this.connectionParameters = new ConnectionParameters(config)\n    this.user = this.connectionParameters.user\n    this.database = this.connectionParameters.database\n    this.port = this.connectionParameters.port\n    this.host = this.connectionParameters.host\n\n    // \"hiding\" the password so it doesn't show up in stack traces\n    // or if the client is console.logged\n    Object.defineProperty(this, 'password', {\n      configurable: true,\n      enumerable: false,\n      writable: true,\n      value: this.connectionParameters.password,\n    })\n\n    this.replication = this.connectionParameters.replication\n\n    const c = config || {}\n\n    this._Promise = c.Promise || global.Promise\n    this._types = new TypeOverrides(c.types)\n    this._ending = false\n    this._ended = false\n    this._connecting = false\n    this._connected = false\n    this._connectionError = false\n    this._queryable = true\n\n    this.enableChannelBinding = Boolean(c.enableChannelBinding) // set true to use SCRAM-SHA-256-PLUS when offered\n    this.connection =\n      c.connection ||\n      new Connection({\n        stream: c.stream,\n        ssl: this.connectionParameters.ssl,\n        keepAlive: c.keepAlive || false,\n        keepAliveInitialDelayMillis: c.keepAliveInitialDelayMillis || 0,\n        encoding: this.connectionParameters.client_encoding || 'utf8',\n      })\n    this.queryQueue = []\n    this.binary = c.binary || defaults.binary\n    this.processID = null\n    this.secretKey = null\n    this.ssl = this.connectionParameters.ssl || false\n    // As with Password, make SSL->Key (the private key) non-enumerable.\n    // It won't show up in stack traces\n    // or if the client is console.logged\n    if (this.ssl && this.ssl.key) {\n      Object.defineProperty(this.ssl, 'key', {\n        enumerable: false,\n      })\n    }\n\n    this._connectionTimeoutMillis = c.connectionTimeoutMillis || 0\n  }\n\n  _errorAllQueries(err) {\n    const enqueueError = (query) => {\n      process.nextTick(() => {\n        query.handleError(err, this.connection)\n      })\n    }\n\n    if (this.activeQuery) {\n      enqueueError(this.activeQuery)\n      this.activeQuery = null\n    }\n\n    this.queryQueue.forEach(enqueueError)\n    this.queryQueue.length = 0\n  }\n\n  _connect(callback) {\n    const self = this\n    const con = this.connection\n    this._connectionCallback = callback\n\n    if (this._connecting || this._connected) {\n      const err = new Error('Client has already been connected. You cannot reuse a client.')\n      process.nextTick(() => {\n        callback(err)\n      })\n      return\n    }\n    this._connecting = true\n\n    if (this._connectionTimeoutMillis > 0) {\n      this.connectionTimeoutHandle = setTimeout(() => {\n        con._ending = true\n        con.stream.destroy(new Error('timeout expired'))\n      }, this._connectionTimeoutMillis)\n\n      if (this.connectionTimeoutHandle.unref) {\n        this.connectionTimeoutHandle.unref()\n      }\n    }\n\n    if (this.host && this.host.indexOf('/') === 0) {\n      con.connect(this.host + '/.s.PGSQL.' + this.port)\n    } else {\n      con.connect(this.port, this.host)\n    }\n\n    // once connection is established send startup message\n    con.on('connect', function () {\n      if (self.ssl) {\n        con.requestSsl()\n      } else {\n        con.startup(self.getStartupConf())\n      }\n    })\n\n    con.on('sslconnect', function () {\n      con.startup(self.getStartupConf())\n    })\n\n    this._attachListeners(con)\n\n    con.once('end', () => {\n      const error = this._ending ? new Error('Connection terminated') : new Error('Connection terminated unexpectedly')\n\n      clearTimeout(this.connectionTimeoutHandle)\n      this._errorAllQueries(error)\n      this._ended = true\n\n      if (!this._ending) {\n        // if the connection is ended without us calling .end()\n        // on this client then we have an unexpected disconnection\n        // treat this as an error unless we've already emitted an error\n        // during connection.\n        if (this._connecting && !this._connectionError) {\n          if (this._connectionCallback) {\n            this._connectionCallback(error)\n          } else {\n            this._handleErrorEvent(error)\n          }\n        } else if (!this._connectionError) {\n          this._handleErrorEvent(error)\n        }\n      }\n\n      process.nextTick(() => {\n        this.emit('end')\n      })\n    })\n  }\n\n  connect(callback) {\n    if (callback) {\n      this._connect(callback)\n      return\n    }\n\n    return new this._Promise((resolve, reject) => {\n      this._connect((error) => {\n        if (error) {\n          reject(error)\n        } else {\n          resolve()\n        }\n      })\n    })\n  }\n\n  _attachListeners(con) {\n    // password request handling\n    con.on('authenticationCleartextPassword', this._handleAuthCleartextPassword.bind(this))\n    // password request handling\n    con.on('authenticationMD5Password', this._handleAuthMD5Password.bind(this))\n    // password request handling (SASL)\n    con.on('authenticationSASL', this._handleAuthSASL.bind(this))\n    con.on('authenticationSASLContinue', this._handleAuthSASLContinue.bind(this))\n    con.on('authenticationSASLFinal', this._handleAuthSASLFinal.bind(this))\n    con.on('backendKeyData', this._handleBackendKeyData.bind(this))\n    con.on('error', this._handleErrorEvent.bind(this))\n    con.on('errorMessage', this._handleErrorMessage.bind(this))\n    con.on('readyForQuery', this._handleReadyForQuery.bind(this))\n    con.on('notice', this._handleNotice.bind(this))\n    con.on('rowDescription', this._handleRowDescription.bind(this))\n    con.on('dataRow', this._handleDataRow.bind(this))\n    con.on('portalSuspended', this._handlePortalSuspended.bind(this))\n    con.on('emptyQuery', this._handleEmptyQuery.bind(this))\n    con.on('commandComplete', this._handleCommandComplete.bind(this))\n    con.on('parseComplete', this._handleParseComplete.bind(this))\n    con.on('copyInResponse', this._handleCopyInResponse.bind(this))\n    con.on('copyData', this._handleCopyData.bind(this))\n    con.on('notification', this._handleNotification.bind(this))\n  }\n\n  // TODO(bmc): deprecate pgpass \"built in\" integration since this.password can be a function\n  // it can be supplied by the user if required - this is a breaking change!\n  _checkPgPass(cb) {\n    const con = this.connection\n    if (typeof this.password === 'function') {\n      this._Promise\n        .resolve()\n        .then(() => this.password())\n        .then((pass) => {\n          if (pass !== undefined) {\n            if (typeof pass !== 'string') {\n              con.emit('error', new TypeError('Password must be a string'))\n              return\n            }\n            this.connectionParameters.password = this.password = pass\n          } else {\n            this.connectionParameters.password = this.password = null\n          }\n          cb()\n        })\n        .catch((err) => {\n          con.emit('error', err)\n        })\n    } else if (this.password !== null) {\n      cb()\n    } else {\n      try {\n        const pgPass = require('pgpass')\n        pgPass(this.connectionParameters, (pass) => {\n          if (undefined !== pass) {\n            this.connectionParameters.password = this.password = pass\n          }\n          cb()\n        })\n      } catch (e) {\n        this.emit('error', e)\n      }\n    }\n  }\n\n  _handleAuthCleartextPassword(msg) {\n    this._checkPgPass(() => {\n      this.connection.password(this.password)\n    })\n  }\n\n  _handleAuthMD5Password(msg) {\n    this._checkPgPass(async () => {\n      try {\n        const hashedPassword = await crypto.postgresMd5PasswordHash(this.user, this.password, msg.salt)\n        this.connection.password(hashedPassword)\n      } catch (e) {\n        this.emit('error', e)\n      }\n    })\n  }\n\n  _handleAuthSASL(msg) {\n    this._checkPgPass(() => {\n      try {\n        this.saslSession = sasl.startSession(msg.mechanisms, this.enableChannelBinding && this.connection.stream)\n        this.connection.sendSASLInitialResponseMessage(this.saslSession.mechanism, this.saslSession.response)\n      } catch (err) {\n        this.connection.emit('error', err)\n      }\n    })\n  }\n\n  async _handleAuthSASLContinue(msg) {\n    try {\n      await sasl.continueSession(\n        this.saslSession,\n        this.password,\n        msg.data,\n        this.enableChannelBinding && this.connection.stream\n      )\n      this.connection.sendSCRAMClientFinalMessage(this.saslSession.response)\n    } catch (err) {\n      this.connection.emit('error', err)\n    }\n  }\n\n  _handleAuthSASLFinal(msg) {\n    try {\n      sasl.finalizeSession(this.saslSession, msg.data)\n      this.saslSession = null\n    } catch (err) {\n      this.connection.emit('error', err)\n    }\n  }\n\n  _handleBackendKeyData(msg) {\n    this.processID = msg.processID\n    this.secretKey = msg.secretKey\n  }\n\n  _handleReadyForQuery(msg) {\n    if (this._connecting) {\n      this._connecting = false\n      this._connected = true\n      clearTimeout(this.connectionTimeoutHandle)\n\n      // process possible callback argument to Client#connect\n      if (this._connectionCallback) {\n        this._connectionCallback(null, this)\n        // remove callback for proper error handling\n        // after the connect event\n        this._connectionCallback = null\n      }\n      this.emit('connect')\n    }\n    const { activeQuery } = this\n    this.activeQuery = null\n    this.readyForQuery = true\n    if (activeQuery) {\n      activeQuery.handleReadyForQuery(this.connection)\n    }\n    this._pulseQueryQueue()\n  }\n\n  // if we receive an error event or error message\n  // during the connection process we handle it here\n  _handleErrorWhileConnecting(err) {\n    if (this._connectionError) {\n      // TODO(bmc): this is swallowing errors - we shouldn't do this\n      return\n    }\n    this._connectionError = true\n    clearTimeout(this.connectionTimeoutHandle)\n    if (this._connectionCallback) {\n      return this._connectionCallback(err)\n    }\n    this.emit('error', err)\n  }\n\n  // if we're connected and we receive an error event from the connection\n  // this means the socket is dead - do a hard abort of all queries and emit\n  // the socket error on the client as well\n  _handleErrorEvent(err) {\n    if (this._connecting) {\n      return this._handleErrorWhileConnecting(err)\n    }\n    this._queryable = false\n    this._errorAllQueries(err)\n    this.emit('error', err)\n  }\n\n  // handle error messages from the postgres backend\n  _handleErrorMessage(msg) {\n    if (this._connecting) {\n      return this._handleErrorWhileConnecting(msg)\n    }\n    const activeQuery = this.activeQuery\n\n    if (!activeQuery) {\n      this._handleErrorEvent(msg)\n      return\n    }\n\n    this.activeQuery = null\n    activeQuery.handleError(msg, this.connection)\n  }\n\n  _handleRowDescription(msg) {\n    // delegate rowDescription to active query\n    this.activeQuery.handleRowDescription(msg)\n  }\n\n  _handleDataRow(msg) {\n    // delegate dataRow to active query\n    this.activeQuery.handleDataRow(msg)\n  }\n\n  _handlePortalSuspended(msg) {\n    // delegate portalSuspended to active query\n    this.activeQuery.handlePortalSuspended(this.connection)\n  }\n\n  _handleEmptyQuery(msg) {\n    // delegate emptyQuery to active query\n    this.activeQuery.handleEmptyQuery(this.connection)\n  }\n\n  _handleCommandComplete(msg) {\n    if (this.activeQuery == null) {\n      const error = new Error('Received unexpected commandComplete message from backend.')\n      this._handleErrorEvent(error)\n      return\n    }\n    // delegate commandComplete to active query\n    this.activeQuery.handleCommandComplete(msg, this.connection)\n  }\n\n  _handleParseComplete() {\n    if (this.activeQuery == null) {\n      const error = new Error('Received unexpected parseComplete message from backend.')\n      this._handleErrorEvent(error)\n      return\n    }\n    // if a prepared statement has a name and properly parses\n    // we track that its already been executed so we don't parse\n    // it again on the same client\n    if (this.activeQuery.name) {\n      this.connection.parsedStatements[this.activeQuery.name] = this.activeQuery.text\n    }\n  }\n\n  _handleCopyInResponse(msg) {\n    this.activeQuery.handleCopyInResponse(this.connection)\n  }\n\n  _handleCopyData(msg) {\n    this.activeQuery.handleCopyData(msg, this.connection)\n  }\n\n  _handleNotification(msg) {\n    this.emit('notification', msg)\n  }\n\n  _handleNotice(msg) {\n    this.emit('notice', msg)\n  }\n\n  getStartupConf() {\n    const params = this.connectionParameters\n\n    const data = {\n      user: params.user,\n      database: params.database,\n    }\n\n    const appName = params.application_name || params.fallback_application_name\n    if (appName) {\n      data.application_name = appName\n    }\n    if (params.replication) {\n      data.replication = '' + params.replication\n    }\n    if (params.statement_timeout) {\n      data.statement_timeout = String(parseInt(params.statement_timeout, 10))\n    }\n    if (params.lock_timeout) {\n      data.lock_timeout = String(parseInt(params.lock_timeout, 10))\n    }\n    if (params.idle_in_transaction_session_timeout) {\n      data.idle_in_transaction_session_timeout = String(parseInt(params.idle_in_transaction_session_timeout, 10))\n    }\n    if (params.options) {\n      data.options = params.options\n    }\n\n    return data\n  }\n\n  cancel(client, query) {\n    if (client.activeQuery === query) {\n      const con = this.connection\n\n      if (this.host && this.host.indexOf('/') === 0) {\n        con.connect(this.host + '/.s.PGSQL.' + this.port)\n      } else {\n        con.connect(this.port, this.host)\n      }\n\n      // once connection is established send cancel message\n      con.on('connect', function () {\n        con.cancel(client.processID, client.secretKey)\n      })\n    } else if (client.queryQueue.indexOf(query) !== -1) {\n      client.queryQueue.splice(client.queryQueue.indexOf(query), 1)\n    }\n  }\n\n  setTypeParser(oid, format, parseFn) {\n    return this._types.setTypeParser(oid, format, parseFn)\n  }\n\n  getTypeParser(oid, format) {\n    return this._types.getTypeParser(oid, format)\n  }\n\n  // escapeIdentifier and escapeLiteral moved to utility functions & exported\n  // on PG\n  // re-exported here for backwards compatibility\n  escapeIdentifier(str) {\n    return utils.escapeIdentifier(str)\n  }\n\n  escapeLiteral(str) {\n    return utils.escapeLiteral(str)\n  }\n\n  _pulseQueryQueue() {\n    if (this.readyForQuery === true) {\n      this.activeQuery = this.queryQueue.shift()\n      if (this.activeQuery) {\n        this.readyForQuery = false\n        this.hasExecuted = true\n\n        const queryError = this.activeQuery.submit(this.connection)\n        if (queryError) {\n          process.nextTick(() => {\n            this.activeQuery.handleError(queryError, this.connection)\n            this.readyForQuery = true\n            this._pulseQueryQueue()\n          })\n        }\n      } else if (this.hasExecuted) {\n        this.activeQuery = null\n        this.emit('drain')\n      }\n    }\n  }\n\n  query(config, values, callback) {\n    // can take in strings, config object or query object\n    let query\n    let result\n    let readTimeout\n    let readTimeoutTimer\n    let queryCallback\n\n    if (config === null || config === undefined) {\n      throw new TypeError('Client was passed a null or undefined query')\n    } else if (typeof config.submit === 'function') {\n      readTimeout = config.query_timeout || this.connectionParameters.query_timeout\n      result = query = config\n      if (typeof values === 'function') {\n        query.callback = query.callback || values\n      }\n    } else {\n      readTimeout = config.query_timeout || this.connectionParameters.query_timeout\n      query = new Query(config, values, callback)\n      if (!query.callback) {\n        result = new this._Promise((resolve, reject) => {\n          query.callback = (err, res) => (err ? reject(err) : resolve(res))\n        }).catch((err) => {\n          // replace the stack trace that leads to `TCP.onStreamRead` with one that leads back to the\n          // application that created the query\n          Error.captureStackTrace(err)\n          throw err\n        })\n      }\n    }\n\n    if (readTimeout) {\n      queryCallback = query.callback\n\n      readTimeoutTimer = setTimeout(() => {\n        const error = new Error('Query read timeout')\n\n        process.nextTick(() => {\n          query.handleError(error, this.connection)\n        })\n\n        queryCallback(error)\n\n        // we already returned an error,\n        // just do nothing if query completes\n        query.callback = () => {}\n\n        // Remove from queue\n        const index = this.queryQueue.indexOf(query)\n        if (index > -1) {\n          this.queryQueue.splice(index, 1)\n        }\n\n        this._pulseQueryQueue()\n      }, readTimeout)\n\n      query.callback = (err, res) => {\n        clearTimeout(readTimeoutTimer)\n        queryCallback(err, res)\n      }\n    }\n\n    if (this.binary && !query.binary) {\n      query.binary = true\n    }\n\n    if (query._result && !query._result._types) {\n      query._result._types = this._types\n    }\n\n    if (!this._queryable) {\n      process.nextTick(() => {\n        query.handleError(new Error('Client has encountered a connection error and is not queryable'), this.connection)\n      })\n      return result\n    }\n\n    if (this._ending) {\n      process.nextTick(() => {\n        query.handleError(new Error('Client was closed and is not queryable'), this.connection)\n      })\n      return result\n    }\n\n    this.queryQueue.push(query)\n    this._pulseQueryQueue()\n    return result\n  }\n\n  ref() {\n    this.connection.ref()\n  }\n\n  unref() {\n    this.connection.unref()\n  }\n\n  end(cb) {\n    this._ending = true\n\n    // if we have never connected, then end is a noop, callback immediately\n    if (!this.connection._connecting || this._ended) {\n      if (cb) {\n        cb()\n      } else {\n        return this._Promise.resolve()\n      }\n    }\n\n    if (this.activeQuery || !this._queryable) {\n      // if we have an active query we need to force a disconnect\n      // on the socket - otherwise a hung query could block end forever\n      this.connection.stream.destroy()\n    } else {\n      this.connection.end()\n    }\n\n    if (cb) {\n      this.connection.once('end', cb)\n    } else {\n      return new this._Promise((resolve) => {\n        this.connection.once('end', resolve)\n      })\n    }\n  }\n}\n\n// expose a Query constructor\nClient.Query = Query\n\nmodule.exports = Client\n", "'use strict'\nconst EventEmitter = require('events').EventEmitter\n\nconst NOOP = function () {}\n\nconst removeWhere = (list, predicate) => {\n  const i = list.findIndex(predicate)\n\n  return i === -1 ? undefined : list.splice(i, 1)[0]\n}\n\nclass IdleItem {\n  constructor(client, idleListener, timeoutId) {\n    this.client = client\n    this.idleListener = idleListener\n    this.timeoutId = timeoutId\n  }\n}\n\nclass PendingItem {\n  constructor(callback) {\n    this.callback = callback\n  }\n}\n\nfunction throwOnDoubleRelease() {\n  throw new Error('Release called on client which has already been released to the pool.')\n}\n\nfunction promisify(Promise, callback) {\n  if (callback) {\n    return { callback: callback, result: undefined }\n  }\n  let rej\n  let res\n  const cb = function (err, client) {\n    err ? rej(err) : res(client)\n  }\n  const result = new Promise(function (resolve, reject) {\n    res = resolve\n    rej = reject\n  }).catch((err) => {\n    // replace the stack trace that leads to `TCP.onStreamRead` with one that leads back to the\n    // application that created the query\n    Error.captureStackTrace(err)\n    throw err\n  })\n  return { callback: cb, result: result }\n}\n\nfunction makeIdleListener(pool, client) {\n  return function idleListener(err) {\n    err.client = client\n\n    client.removeListener('error', idleListener)\n    client.on('error', () => {\n      pool.log('additional client error after disconnection due to error', err)\n    })\n    pool._remove(client)\n    // TODO - document that once the pool emits an error\n    // the client has already been closed & purged and is unusable\n    pool.emit('error', err, client)\n  }\n}\n\nclass Pool extends EventEmitter {\n  constructor(options, Client) {\n    super()\n    this.options = Object.assign({}, options)\n\n    if (options != null && 'password' in options) {\n      // \"hiding\" the password so it doesn't show up in stack traces\n      // or if the client is console.logged\n      Object.defineProperty(this.options, 'password', {\n        configurable: true,\n        enumerable: false,\n        writable: true,\n        value: options.password,\n      })\n    }\n    if (options != null && options.ssl && options.ssl.key) {\n      // \"hiding\" the ssl->key so it doesn't show up in stack traces\n      // or if the client is console.logged\n      Object.defineProperty(this.options.ssl, 'key', {\n        enumerable: false,\n      })\n    }\n\n    this.options.max = this.options.max || this.options.poolSize || 10\n    this.options.min = this.options.min || 0\n    this.options.maxUses = this.options.maxUses || Infinity\n    this.options.allowExitOnIdle = this.options.allowExitOnIdle || false\n    this.options.maxLifetimeSeconds = this.options.maxLifetimeSeconds || 0\n    this.log = this.options.log || function () {}\n    this.Client = this.options.Client || Client || require('pg').Client\n    this.Promise = this.options.Promise || global.Promise\n\n    if (typeof this.options.idleTimeoutMillis === 'undefined') {\n      this.options.idleTimeoutMillis = 10000\n    }\n\n    this._clients = []\n    this._idle = []\n    this._expired = new WeakSet()\n    this._pendingQueue = []\n    this._endCallback = undefined\n    this.ending = false\n    this.ended = false\n  }\n\n  _isFull() {\n    return this._clients.length >= this.options.max\n  }\n\n  _isAboveMin() {\n    return this._clients.length > this.options.min\n  }\n\n  _pulseQueue() {\n    this.log('pulse queue')\n    if (this.ended) {\n      this.log('pulse queue ended')\n      return\n    }\n    if (this.ending) {\n      this.log('pulse queue on ending')\n      if (this._idle.length) {\n        this._idle.slice().map((item) => {\n          this._remove(item.client)\n        })\n      }\n      if (!this._clients.length) {\n        this.ended = true\n        this._endCallback()\n      }\n      return\n    }\n\n    // if we don't have any waiting, do nothing\n    if (!this._pendingQueue.length) {\n      this.log('no queued requests')\n      return\n    }\n    // if we don't have any idle clients and we have no more room do nothing\n    if (!this._idle.length && this._isFull()) {\n      return\n    }\n    const pendingItem = this._pendingQueue.shift()\n    if (this._idle.length) {\n      const idleItem = this._idle.pop()\n      clearTimeout(idleItem.timeoutId)\n      const client = idleItem.client\n      client.ref && client.ref()\n      const idleListener = idleItem.idleListener\n\n      return this._acquireClient(client, pendingItem, idleListener, false)\n    }\n    if (!this._isFull()) {\n      return this.newClient(pendingItem)\n    }\n    throw new Error('unexpected condition')\n  }\n\n  _remove(client, callback) {\n    const removed = removeWhere(this._idle, (item) => item.client === client)\n\n    if (removed !== undefined) {\n      clearTimeout(removed.timeoutId)\n    }\n\n    this._clients = this._clients.filter((c) => c !== client)\n    const context = this\n    client.end(() => {\n      context.emit('remove', client)\n\n      if (typeof callback === 'function') {\n        callback()\n      }\n    })\n  }\n\n  connect(cb) {\n    if (this.ending) {\n      const err = new Error('Cannot use a pool after calling end on the pool')\n      return cb ? cb(err) : this.Promise.reject(err)\n    }\n\n    const response = promisify(this.Promise, cb)\n    const result = response.result\n\n    // if we don't have to connect a new client, don't do so\n    if (this._isFull() || this._idle.length) {\n      // if we have idle clients schedule a pulse immediately\n      if (this._idle.length) {\n        process.nextTick(() => this._pulseQueue())\n      }\n\n      if (!this.options.connectionTimeoutMillis) {\n        this._pendingQueue.push(new PendingItem(response.callback))\n        return result\n      }\n\n      const queueCallback = (err, res, done) => {\n        clearTimeout(tid)\n        response.callback(err, res, done)\n      }\n\n      const pendingItem = new PendingItem(queueCallback)\n\n      // set connection timeout on checking out an existing client\n      const tid = setTimeout(() => {\n        // remove the callback from pending waiters because\n        // we're going to call it with a timeout error\n        removeWhere(this._pendingQueue, (i) => i.callback === queueCallback)\n        pendingItem.timedOut = true\n        response.callback(new Error('timeout exceeded when trying to connect'))\n      }, this.options.connectionTimeoutMillis)\n\n      if (tid.unref) {\n        tid.unref()\n      }\n\n      this._pendingQueue.push(pendingItem)\n      return result\n    }\n\n    this.newClient(new PendingItem(response.callback))\n\n    return result\n  }\n\n  newClient(pendingItem) {\n    const client = new this.Client(this.options)\n    this._clients.push(client)\n    const idleListener = makeIdleListener(this, client)\n\n    this.log('checking client timeout')\n\n    // connection timeout logic\n    let tid\n    let timeoutHit = false\n    if (this.options.connectionTimeoutMillis) {\n      tid = setTimeout(() => {\n        this.log('ending client due to timeout')\n        timeoutHit = true\n        // force kill the node driver, and let libpq do its teardown\n        client.connection ? client.connection.stream.destroy() : client.end()\n      }, this.options.connectionTimeoutMillis)\n    }\n\n    this.log('connecting new client')\n    client.connect((err) => {\n      if (tid) {\n        clearTimeout(tid)\n      }\n      client.on('error', idleListener)\n      if (err) {\n        this.log('client failed to connect', err)\n        // remove the dead client from our list of clients\n        this._clients = this._clients.filter((c) => c !== client)\n        if (timeoutHit) {\n          err = new Error('Connection terminated due to connection timeout', { cause: err })\n        }\n\n        // this client won\u2019t be released, so move on immediately\n        this._pulseQueue()\n\n        if (!pendingItem.timedOut) {\n          pendingItem.callback(err, undefined, NOOP)\n        }\n      } else {\n        this.log('new client connected')\n\n        if (this.options.maxLifetimeSeconds !== 0) {\n          const maxLifetimeTimeout = setTimeout(() => {\n            this.log('ending client due to expired lifetime')\n            this._expired.add(client)\n            const idleIndex = this._idle.findIndex((idleItem) => idleItem.client === client)\n            if (idleIndex !== -1) {\n              this._acquireClient(\n                client,\n                new PendingItem((err, client, clientRelease) => clientRelease()),\n                idleListener,\n                false\n              )\n            }\n          }, this.options.maxLifetimeSeconds * 1000)\n\n          maxLifetimeTimeout.unref()\n          client.once('end', () => clearTimeout(maxLifetimeTimeout))\n        }\n\n        return this._acquireClient(client, pendingItem, idleListener, true)\n      }\n    })\n  }\n\n  // acquire a client for a pending work item\n  _acquireClient(client, pendingItem, idleListener, isNew) {\n    if (isNew) {\n      this.emit('connect', client)\n    }\n\n    this.emit('acquire', client)\n\n    client.release = this._releaseOnce(client, idleListener)\n\n    client.removeListener('error', idleListener)\n\n    if (!pendingItem.timedOut) {\n      if (isNew && this.options.verify) {\n        this.options.verify(client, (err) => {\n          if (err) {\n            client.release(err)\n            return pendingItem.callback(err, undefined, NOOP)\n          }\n\n          pendingItem.callback(undefined, client, client.release)\n        })\n      } else {\n        pendingItem.callback(undefined, client, client.release)\n      }\n    } else {\n      if (isNew && this.options.verify) {\n        this.options.verify(client, client.release)\n      } else {\n        client.release()\n      }\n    }\n  }\n\n  // returns a function that wraps _release and throws if called more than once\n  _releaseOnce(client, idleListener) {\n    let released = false\n\n    return (err) => {\n      if (released) {\n        throwOnDoubleRelease()\n      }\n\n      released = true\n      this._release(client, idleListener, err)\n    }\n  }\n\n  // release a client back to the poll, include an error\n  // to remove it from the pool\n  _release(client, idleListener, err) {\n    client.on('error', idleListener)\n\n    client._poolUseCount = (client._poolUseCount || 0) + 1\n\n    this.emit('release', err, client)\n\n    // TODO(bmc): expose a proper, public interface _queryable and _ending\n    if (err || this.ending || !client._queryable || client._ending || client._poolUseCount >= this.options.maxUses) {\n      if (client._poolUseCount >= this.options.maxUses) {\n        this.log('remove expended client')\n      }\n\n      return this._remove(client, this._pulseQueue.bind(this))\n    }\n\n    const isExpired = this._expired.has(client)\n    if (isExpired) {\n      this.log('remove expired client')\n      this._expired.delete(client)\n      return this._remove(client, this._pulseQueue.bind(this))\n    }\n\n    // idle timeout\n    let tid\n    if (this.options.idleTimeoutMillis && this._isAboveMin()) {\n      tid = setTimeout(() => {\n        this.log('remove idle client')\n        this._remove(client, this._pulseQueue.bind(this))\n      }, this.options.idleTimeoutMillis)\n\n      if (this.options.allowExitOnIdle) {\n        // allow Node to exit if this is all that's left\n        tid.unref()\n      }\n    }\n\n    if (this.options.allowExitOnIdle) {\n      client.unref()\n    }\n\n    this._idle.push(new IdleItem(client, idleListener, tid))\n    this._pulseQueue()\n  }\n\n  query(text, values, cb) {\n    // guard clause against passing a function as the first parameter\n    if (typeof text === 'function') {\n      const response = promisify(this.Promise, text)\n      setImmediate(function () {\n        return response.callback(new Error('Passing a function as the first parameter to pool.query is not supported'))\n      })\n      return response.result\n    }\n\n    // allow plain text query without values\n    if (typeof values === 'function') {\n      cb = values\n      values = undefined\n    }\n    const response = promisify(this.Promise, cb)\n    cb = response.callback\n\n    this.connect((err, client) => {\n      if (err) {\n        return cb(err)\n      }\n\n      let clientReleased = false\n      const onError = (err) => {\n        if (clientReleased) {\n          return\n        }\n        clientReleased = true\n        client.release(err)\n        cb(err)\n      }\n\n      client.once('error', onError)\n      this.log('dispatching query')\n      try {\n        client.query(text, values, (err, res) => {\n          this.log('query dispatched')\n          client.removeListener('error', onError)\n          if (clientReleased) {\n            return\n          }\n          clientReleased = true\n          client.release(err)\n          if (err) {\n            return cb(err)\n          }\n          return cb(undefined, res)\n        })\n      } catch (err) {\n        client.release(err)\n        return cb(err)\n      }\n    })\n    return response.result\n  }\n\n  end(cb) {\n    this.log('ending')\n    if (this.ending) {\n      const err = new Error('Called end on pool more than once')\n      return cb ? cb(err) : this.Promise.reject(err)\n    }\n    this.ending = true\n    const promised = promisify(this.Promise, cb)\n    this._endCallback = promised.callback\n    this._pulseQueue()\n    return promised.result\n  }\n\n  get waitingCount() {\n    return this._pendingQueue.length\n  }\n\n  get idleCount() {\n    return this._idle.length\n  }\n\n  get expiredCount() {\n    return this._clients.reduce((acc, client) => acc + (this._expired.has(client) ? 1 : 0), 0)\n  }\n\n  get totalCount() {\n    return this._clients.length\n  }\n}\nmodule.exports = Pool\n", "'use strict'\n\nconst EventEmitter = require('events').EventEmitter\nconst util = require('util')\nconst utils = require('../utils')\n\nconst NativeQuery = (module.exports = function (config, values, callback) {\n  EventEmitter.call(this)\n  config = utils.normalizeQueryConfig(config, values, callback)\n  this.text = config.text\n  this.values = config.values\n  this.name = config.name\n  this.queryMode = config.queryMode\n  this.callback = config.callback\n  this.state = 'new'\n  this._arrayMode = config.rowMode === 'array'\n\n  // if the 'row' event is listened for\n  // then emit them as they come in\n  // without setting singleRowMode to true\n  // this has almost no meaning because libpq\n  // reads all rows into memory before returning any\n  this._emitRowEvents = false\n  this.on(\n    'newListener',\n    function (event) {\n      if (event === 'row') this._emitRowEvents = true\n    }.bind(this)\n  )\n})\n\nutil.inherits(NativeQuery, EventEmitter)\n\nconst errorFieldMap = {\n  sqlState: 'code',\n  statementPosition: 'position',\n  messagePrimary: 'message',\n  context: 'where',\n  schemaName: 'schema',\n  tableName: 'table',\n  columnName: 'column',\n  dataTypeName: 'dataType',\n  constraintName: 'constraint',\n  sourceFile: 'file',\n  sourceLine: 'line',\n  sourceFunction: 'routine',\n}\n\nNativeQuery.prototype.handleError = function (err) {\n  // copy pq error fields into the error object\n  const fields = this.native.pq.resultErrorFields()\n  if (fields) {\n    for (const key in fields) {\n      const normalizedFieldName = errorFieldMap[key] || key\n      err[normalizedFieldName] = fields[key]\n    }\n  }\n  if (this.callback) {\n    this.callback(err)\n  } else {\n    this.emit('error', err)\n  }\n  this.state = 'error'\n}\n\nNativeQuery.prototype.then = function (onSuccess, onFailure) {\n  return this._getPromise().then(onSuccess, onFailure)\n}\n\nNativeQuery.prototype.catch = function (callback) {\n  return this._getPromise().catch(callback)\n}\n\nNativeQuery.prototype._getPromise = function () {\n  if (this._promise) return this._promise\n  this._promise = new Promise(\n    function (resolve, reject) {\n      this._once('end', resolve)\n      this._once('error', reject)\n    }.bind(this)\n  )\n  return this._promise\n}\n\nNativeQuery.prototype.submit = function (client) {\n  this.state = 'running'\n  const self = this\n  this.native = client.native\n  client.native.arrayMode = this._arrayMode\n\n  let after = function (err, rows, results) {\n    client.native.arrayMode = false\n    setImmediate(function () {\n      self.emit('_done')\n    })\n\n    // handle possible query error\n    if (err) {\n      return self.handleError(err)\n    }\n\n    // emit row events for each row in the result\n    if (self._emitRowEvents) {\n      if (results.length > 1) {\n        rows.forEach((rowOfRows, i) => {\n          rowOfRows.forEach((row) => {\n            self.emit('row', row, results[i])\n          })\n        })\n      } else {\n        rows.forEach(function (row) {\n          self.emit('row', row, results)\n        })\n      }\n    }\n\n    // handle successful result\n    self.state = 'end'\n    self.emit('end', results)\n    if (self.callback) {\n      self.callback(null, results)\n    }\n  }\n\n  if (process.domain) {\n    after = process.domain.bind(after)\n  }\n\n  // named query\n  if (this.name) {\n    if (this.name.length > 63) {\n      console.error('Warning! Postgres only supports 63 characters for query names.')\n      console.error('You supplied %s (%s)', this.name, this.name.length)\n      console.error('This can cause conflicts and silent errors executing queries')\n    }\n    const values = (this.values || []).map(utils.prepareValue)\n\n    // check if the client has already executed this named query\n    // if so...just execute it again - skip the planning phase\n    if (client.namedQueries[this.name]) {\n      if (this.text && client.namedQueries[this.name] !== this.text) {\n        const err = new Error(`Prepared statements must be unique - '${this.name}' was used for a different statement`)\n        return after(err)\n      }\n      return client.native.execute(this.name, values, after)\n    }\n    // plan the named query the first time, then execute it\n    return client.native.prepare(this.name, this.text, values.length, function (err) {\n      if (err) return after(err)\n      client.namedQueries[self.name] = self.text\n      return self.native.execute(self.name, values, after)\n    })\n  } else if (this.values) {\n    if (!Array.isArray(this.values)) {\n      const err = new Error('Query values must be an array')\n      return after(err)\n    }\n    const vals = this.values.map(utils.prepareValue)\n    client.native.query(this.text, vals, after)\n  } else if (this.queryMode === 'extended') {\n    client.native.query(this.text, [], after)\n  } else {\n    client.native.query(this.text, after)\n  }\n}\n", "'use strict'\n\n// eslint-disable-next-line\nvar Native\n// eslint-disable-next-line no-useless-catch\ntry {\n  // Wrap this `require()` in a try-catch to avoid upstream bundlers from complaining that this might not be available since it is an optional import\n  Native = require('pg-native')\n} catch (e) {\n  throw e\n}\nconst TypeOverrides = require('../type-overrides')\nconst EventEmitter = require('events').EventEmitter\nconst util = require('util')\nconst ConnectionParameters = require('../connection-parameters')\n\nconst NativeQuery = require('./query')\n\nconst Client = (module.exports = function (config) {\n  EventEmitter.call(this)\n  config = config || {}\n\n  this._Promise = config.Promise || global.Promise\n  this._types = new TypeOverrides(config.types)\n\n  this.native = new Native({\n    types: this._types,\n  })\n\n  this._queryQueue = []\n  this._ending = false\n  this._connecting = false\n  this._connected = false\n  this._queryable = true\n\n  // keep these on the object for legacy reasons\n  // for the time being. TODO: deprecate all this jazz\n  const cp = (this.connectionParameters = new ConnectionParameters(config))\n  if (config.nativeConnectionString) cp.nativeConnectionString = config.nativeConnectionString\n  this.user = cp.user\n\n  // \"hiding\" the password so it doesn't show up in stack traces\n  // or if the client is console.logged\n  Object.defineProperty(this, 'password', {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value: cp.password,\n  })\n  this.database = cp.database\n  this.host = cp.host\n  this.port = cp.port\n\n  // a hash to hold named queries\n  this.namedQueries = {}\n})\n\nClient.Query = NativeQuery\n\nutil.inherits(Client, EventEmitter)\n\nClient.prototype._errorAllQueries = function (err) {\n  const enqueueError = (query) => {\n    process.nextTick(() => {\n      query.native = this.native\n      query.handleError(err)\n    })\n  }\n\n  if (this._hasActiveQuery()) {\n    enqueueError(this._activeQuery)\n    this._activeQuery = null\n  }\n\n  this._queryQueue.forEach(enqueueError)\n  this._queryQueue.length = 0\n}\n\n// connect to the backend\n// pass an optional callback to be called once connected\n// or with an error if there was a connection error\nClient.prototype._connect = function (cb) {\n  const self = this\n\n  if (this._connecting) {\n    process.nextTick(() => cb(new Error('Client has already been connected. You cannot reuse a client.')))\n    return\n  }\n\n  this._connecting = true\n\n  this.connectionParameters.getLibpqConnectionString(function (err, conString) {\n    if (self.connectionParameters.nativeConnectionString) conString = self.connectionParameters.nativeConnectionString\n    if (err) return cb(err)\n    self.native.connect(conString, function (err) {\n      if (err) {\n        self.native.end()\n        return cb(err)\n      }\n\n      // set internal states to connected\n      self._connected = true\n\n      // handle connection errors from the native layer\n      self.native.on('error', function (err) {\n        self._queryable = false\n        self._errorAllQueries(err)\n        self.emit('error', err)\n      })\n\n      self.native.on('notification', function (msg) {\n        self.emit('notification', {\n          channel: msg.relname,\n          payload: msg.extra,\n        })\n      })\n\n      // signal we are connected now\n      self.emit('connect')\n      self._pulseQueryQueue(true)\n\n      cb()\n    })\n  })\n}\n\nClient.prototype.connect = function (callback) {\n  if (callback) {\n    this._connect(callback)\n    return\n  }\n\n  return new this._Promise((resolve, reject) => {\n    this._connect((error) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve()\n      }\n    })\n  })\n}\n\n// send a query to the server\n// this method is highly overloaded to take\n// 1) string query, optional array of parameters, optional function callback\n// 2) object query with {\n//    string query\n//    optional array values,\n//    optional function callback instead of as a separate parameter\n//    optional string name to name & cache the query plan\n//    optional string rowMode = 'array' for an array of results\n//  }\nClient.prototype.query = function (config, values, callback) {\n  let query\n  let result\n  let readTimeout\n  let readTimeoutTimer\n  let queryCallback\n\n  if (config === null || config === undefined) {\n    throw new TypeError('Client was passed a null or undefined query')\n  } else if (typeof config.submit === 'function') {\n    readTimeout = config.query_timeout || this.connectionParameters.query_timeout\n    result = query = config\n    // accept query(new Query(...), (err, res) => { }) style\n    if (typeof values === 'function') {\n      config.callback = values\n    }\n  } else {\n    readTimeout = config.query_timeout || this.connectionParameters.query_timeout\n    query = new NativeQuery(config, values, callback)\n    if (!query.callback) {\n      let resolveOut, rejectOut\n      result = new this._Promise((resolve, reject) => {\n        resolveOut = resolve\n        rejectOut = reject\n      }).catch((err) => {\n        Error.captureStackTrace(err)\n        throw err\n      })\n      query.callback = (err, res) => (err ? rejectOut(err) : resolveOut(res))\n    }\n  }\n\n  if (readTimeout) {\n    queryCallback = query.callback\n\n    readTimeoutTimer = setTimeout(() => {\n      const error = new Error('Query read timeout')\n\n      process.nextTick(() => {\n        query.handleError(error, this.connection)\n      })\n\n      queryCallback(error)\n\n      // we already returned an error,\n      // just do nothing if query completes\n      query.callback = () => {}\n\n      // Remove from queue\n      const index = this._queryQueue.indexOf(query)\n      if (index > -1) {\n        this._queryQueue.splice(index, 1)\n      }\n\n      this._pulseQueryQueue()\n    }, readTimeout)\n\n    query.callback = (err, res) => {\n      clearTimeout(readTimeoutTimer)\n      queryCallback(err, res)\n    }\n  }\n\n  if (!this._queryable) {\n    query.native = this.native\n    process.nextTick(() => {\n      query.handleError(new Error('Client has encountered a connection error and is not queryable'))\n    })\n    return result\n  }\n\n  if (this._ending) {\n    query.native = this.native\n    process.nextTick(() => {\n      query.handleError(new Error('Client was closed and is not queryable'))\n    })\n    return result\n  }\n\n  this._queryQueue.push(query)\n  this._pulseQueryQueue()\n  return result\n}\n\n// disconnect from the backend server\nClient.prototype.end = function (cb) {\n  const self = this\n\n  this._ending = true\n\n  if (!this._connected) {\n    this.once('connect', this.end.bind(this, cb))\n  }\n  let result\n  if (!cb) {\n    result = new this._Promise(function (resolve, reject) {\n      cb = (err) => (err ? reject(err) : resolve())\n    })\n  }\n  this.native.end(function () {\n    self._errorAllQueries(new Error('Connection terminated'))\n\n    process.nextTick(() => {\n      self.emit('end')\n      if (cb) cb()\n    })\n  })\n  return result\n}\n\nClient.prototype._hasActiveQuery = function () {\n  return this._activeQuery && this._activeQuery.state !== 'error' && this._activeQuery.state !== 'end'\n}\n\nClient.prototype._pulseQueryQueue = function (initialConnection) {\n  if (!this._connected) {\n    return\n  }\n  if (this._hasActiveQuery()) {\n    return\n  }\n  const query = this._queryQueue.shift()\n  if (!query) {\n    if (!initialConnection) {\n      this.emit('drain')\n    }\n    return\n  }\n  this._activeQuery = query\n  query.submit(this)\n  const self = this\n  query.once('_done', function () {\n    self._pulseQueryQueue()\n  })\n}\n\n// attempt to cancel an in-progress query\nClient.prototype.cancel = function (query) {\n  if (this._activeQuery === query) {\n    this.native.cancel(function () {})\n  } else if (this._queryQueue.indexOf(query) !== -1) {\n    this._queryQueue.splice(this._queryQueue.indexOf(query), 1)\n  }\n}\n\nClient.prototype.ref = function () {}\nClient.prototype.unref = function () {}\n\nClient.prototype.setTypeParser = function (oid, format, parseFn) {\n  return this._types.setTypeParser(oid, format, parseFn)\n}\n\nClient.prototype.getTypeParser = function (oid, format) {\n  return this._types.getTypeParser(oid, format)\n}\n", "'use strict'\nmodule.exports = require('./client')\n", "'use strict'\n\nconst Client = require('./client')\nconst defaults = require('./defaults')\nconst Connection = require('./connection')\nconst Result = require('./result')\nconst utils = require('./utils')\nconst Pool = require('pg-pool')\nconst TypeOverrides = require('./type-overrides')\nconst { DatabaseError } = require('pg-protocol')\nconst { escapeIdentifier, escapeLiteral } = require('./utils')\n\nconst poolFactory = (Client) => {\n  return class BoundPool extends Pool {\n    constructor(options) {\n      super(options, Client)\n    }\n  }\n}\n\nconst PG = function (clientConstructor) {\n  this.defaults = defaults\n  this.Client = clientConstructor\n  this.Query = this.Client.Query\n  this.Pool = poolFactory(this.Client)\n  this._pools = []\n  this.Connection = Connection\n  this.types = require('pg-types')\n  this.DatabaseError = DatabaseError\n  this.TypeOverrides = TypeOverrides\n  this.escapeIdentifier = escapeIdentifier\n  this.escapeLiteral = escapeLiteral\n  this.Result = Result\n  this.utils = utils\n}\n\nif (typeof process.env.NODE_PG_FORCE_NATIVE !== 'undefined') {\n  module.exports = new PG(require('./native'))\n} else {\n  module.exports = new PG(Client)\n\n  // lazy require native module...the native module may not have installed\n  Object.defineProperty(module.exports, 'native', {\n    configurable: true,\n    enumerable: false,\n    get() {\n      let native = null\n      try {\n        native = new PG(require('./native'))\n      } catch (err) {\n        if (err.code !== 'MODULE_NOT_FOUND') {\n          throw err\n        }\n      }\n\n      // overwrite module.exports.native so that getter is never called again\n      Object.defineProperty(module.exports, 'native', {\n        value: native,\n      })\n\n      return native\n    },\n  })\n}\n", "'use strict';\n\n// module to handle cookies\n\nconst urllib = require('url');\n\nconst SESSION_TIMEOUT = 1800; // 30 min\n\n/**\n * Creates a biskviit cookie jar for managing cookie values in memory\n *\n * @constructor\n * @param {Object} [options] Optional options object\n */\nclass Cookies {\n    constructor(options) {\n        this.options = options || {};\n        this.cookies = [];\n    }\n\n    /**\n     * Stores a cookie string to the cookie storage\n     *\n     * @param {String} cookieStr Value from the 'Set-Cookie:' header\n     * @param {String} url Current URL\n     */\n    set(cookieStr, url) {\n        let urlparts = urllib.parse(url || '');\n        let cookie = this.parse(cookieStr);\n        let domain;\n\n        if (cookie.domain) {\n            domain = cookie.domain.replace(/^\\./, '');\n\n            // do not allow cross origin cookies\n            if (\n                // can't be valid if the requested domain is shorter than current hostname\n                urlparts.hostname.length < domain.length ||\n                // prefix domains with dot to be sure that partial matches are not used\n                ('.' + urlparts.hostname).substr(-domain.length + 1) !== '.' + domain\n            ) {\n                cookie.domain = urlparts.hostname;\n            }\n        } else {\n            cookie.domain = urlparts.hostname;\n        }\n\n        if (!cookie.path) {\n            cookie.path = this.getPath(urlparts.pathname);\n        }\n\n        // if no expire date, then use sessionTimeout value\n        if (!cookie.expires) {\n            cookie.expires = new Date(Date.now() + (Number(this.options.sessionTimeout || SESSION_TIMEOUT) || SESSION_TIMEOUT) * 1000);\n        }\n\n        return this.add(cookie);\n    }\n\n    /**\n     * Returns cookie string for the 'Cookie:' header.\n     *\n     * @param {String} url URL to check for\n     * @returns {String} Cookie header or empty string if no matches were found\n     */\n    get(url) {\n        return this.list(url)\n            .map(cookie => cookie.name + '=' + cookie.value)\n            .join('; ');\n    }\n\n    /**\n     * Lists all valied cookie objects for the specified URL\n     *\n     * @param {String} url URL to check for\n     * @returns {Array} An array of cookie objects\n     */\n    list(url) {\n        let result = [];\n        let i;\n        let cookie;\n\n        for (i = this.cookies.length - 1; i >= 0; i--) {\n            cookie = this.cookies[i];\n\n            if (this.isExpired(cookie)) {\n                this.cookies.splice(i, i);\n                continue;\n            }\n\n            if (this.match(cookie, url)) {\n                result.unshift(cookie);\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Parses cookie string from the 'Set-Cookie:' header\n     *\n     * @param {String} cookieStr String from the 'Set-Cookie:' header\n     * @returns {Object} Cookie object\n     */\n    parse(cookieStr) {\n        let cookie = {};\n\n        (cookieStr || '')\n            .toString()\n            .split(';')\n            .forEach(cookiePart => {\n                let valueParts = cookiePart.split('=');\n                let key = valueParts.shift().trim().toLowerCase();\n                let value = valueParts.join('=').trim();\n                let domain;\n\n                if (!key) {\n                    // skip empty parts\n                    return;\n                }\n\n                switch (key) {\n                    case 'expires':\n                        value = new Date(value);\n                        // ignore date if can not parse it\n                        if (value.toString() !== 'Invalid Date') {\n                            cookie.expires = value;\n                        }\n                        break;\n\n                    case 'path':\n                        cookie.path = value;\n                        break;\n\n                    case 'domain':\n                        domain = value.toLowerCase();\n                        if (domain.length && domain.charAt(0) !== '.') {\n                            domain = '.' + domain; // ensure preceeding dot for user set domains\n                        }\n                        cookie.domain = domain;\n                        break;\n\n                    case 'max-age':\n                        cookie.expires = new Date(Date.now() + (Number(value) || 0) * 1000);\n                        break;\n\n                    case 'secure':\n                        cookie.secure = true;\n                        break;\n\n                    case 'httponly':\n                        cookie.httponly = true;\n                        break;\n\n                    default:\n                        if (!cookie.name) {\n                            cookie.name = key;\n                            cookie.value = value;\n                        }\n                }\n            });\n\n        return cookie;\n    }\n\n    /**\n     * Checks if a cookie object is valid for a specified URL\n     *\n     * @param {Object} cookie Cookie object\n     * @param {String} url URL to check for\n     * @returns {Boolean} true if cookie is valid for specifiec URL\n     */\n    match(cookie, url) {\n        let urlparts = urllib.parse(url || '');\n\n        // check if hostname matches\n        // .foo.com also matches subdomains, foo.com does not\n        if (\n            urlparts.hostname !== cookie.domain &&\n            (cookie.domain.charAt(0) !== '.' || ('.' + urlparts.hostname).substr(-cookie.domain.length) !== cookie.domain)\n        ) {\n            return false;\n        }\n\n        // check if path matches\n        let path = this.getPath(urlparts.pathname);\n        if (path.substr(0, cookie.path.length) !== cookie.path) {\n            return false;\n        }\n\n        // check secure argument\n        if (cookie.secure && urlparts.protocol !== 'https:') {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds (or updates/removes if needed) a cookie object to the cookie storage\n     *\n     * @param {Object} cookie Cookie value to be stored\n     */\n    add(cookie) {\n        let i;\n        let len;\n\n        // nothing to do here\n        if (!cookie || !cookie.name) {\n            return false;\n        }\n\n        // overwrite if has same params\n        for (i = 0, len = this.cookies.length; i < len; i++) {\n            if (this.compare(this.cookies[i], cookie)) {\n                // check if the cookie needs to be removed instead\n                if (this.isExpired(cookie)) {\n                    this.cookies.splice(i, 1); // remove expired/unset cookie\n                    return false;\n                }\n\n                this.cookies[i] = cookie;\n                return true;\n            }\n        }\n\n        // add as new if not already expired\n        if (!this.isExpired(cookie)) {\n            this.cookies.push(cookie);\n        }\n\n        return true;\n    }\n\n    /**\n     * Checks if two cookie objects are the same\n     *\n     * @param {Object} a Cookie to check against\n     * @param {Object} b Cookie to check against\n     * @returns {Boolean} True, if the cookies are the same\n     */\n    compare(a, b) {\n        return a.name === b.name && a.path === b.path && a.domain === b.domain && a.secure === b.secure && a.httponly === a.httponly;\n    }\n\n    /**\n     * Checks if a cookie is expired\n     *\n     * @param {Object} cookie Cookie object to check against\n     * @returns {Boolean} True, if the cookie is expired\n     */\n    isExpired(cookie) {\n        return (cookie.expires && cookie.expires < new Date()) || !cookie.value;\n    }\n\n    /**\n     * Returns normalized cookie path for an URL path argument\n     *\n     * @param {String} pathname\n     * @returns {String} Normalized path\n     */\n    getPath(pathname) {\n        let path = (pathname || '/').split('/');\n        path.pop(); // remove filename part\n        path = path.join('/').trim();\n\n        // ensure path prefix /\n        if (path.charAt(0) !== '/') {\n            path = '/' + path;\n        }\n\n        // ensure path suffix /\n        if (path.substr(-1) !== '/') {\n            path += '/';\n        }\n\n        return path;\n    }\n}\n\nmodule.exports = Cookies;\n", "{\n    \"name\": \"nodemailer\",\n    \"version\": \"6.10.1\",\n    \"description\": \"Easy as cake e-mail sending from your Node.js applications\",\n    \"main\": \"lib/nodemailer.js\",\n    \"scripts\": {\n        \"test\": \"node --test --test-concurrency=1 test/**/*.test.js test/**/*-test.js\",\n        \"test:coverage\": \"c8 node --test --test-concurrency=1 test/**/*.test.js test/**/*-test.js\",\n        \"lint\": \"eslint .\",\n        \"update\": \"rm -rf node_modules/ package-lock.json && ncu -u && npm install\"\n    },\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/nodemailer/nodemailer.git\"\n    },\n    \"keywords\": [\n        \"Nodemailer\"\n    ],\n    \"author\": \"Andris Reinman\",\n    \"license\": \"MIT-0\",\n    \"bugs\": {\n        \"url\": \"https://github.com/nodemailer/nodemailer/issues\"\n    },\n    \"homepage\": \"https://nodemailer.com/\",\n    \"devDependencies\": {\n        \"@aws-sdk/client-ses\": \"3.731.1\",\n        \"bunyan\": \"1.8.15\",\n        \"c8\": \"10.1.3\",\n        \"eslint\": \"8.57.0\",\n        \"eslint-config-nodemailer\": \"1.2.0\",\n        \"eslint-config-prettier\": \"9.1.0\",\n        \"libbase64\": \"1.3.0\",\n        \"libmime\": \"5.3.6\",\n        \"libqp\": \"2.1.1\",\n        \"nodemailer-ntlm-auth\": \"1.0.4\",\n        \"proxy\": \"1.0.2\",\n        \"proxy-test-server\": \"1.0.0\",\n        \"smtp-server\": \"3.13.6\"\n    },\n    \"engines\": {\n        \"node\": \">=6.0.0\"\n    }\n}\n", "'use strict';\n\nconst http = require('http');\nconst https = require('https');\nconst urllib = require('url');\nconst zlib = require('zlib');\nconst PassThrough = require('stream').PassThrough;\nconst Cookies = require('./cookies');\nconst packageData = require('../../package.json');\nconst net = require('net');\n\nconst MAX_REDIRECTS = 5;\n\nmodule.exports = function (url, options) {\n    return nmfetch(url, options);\n};\n\nmodule.exports.Cookies = Cookies;\n\nfunction nmfetch(url, options) {\n    options = options || {};\n\n    options.fetchRes = options.fetchRes || new PassThrough();\n    options.cookies = options.cookies || new Cookies();\n    options.redirects = options.redirects || 0;\n    options.maxRedirects = isNaN(options.maxRedirects) ? MAX_REDIRECTS : options.maxRedirects;\n\n    if (options.cookie) {\n        [].concat(options.cookie || []).forEach(cookie => {\n            options.cookies.set(cookie, url);\n        });\n        options.cookie = false;\n    }\n\n    let fetchRes = options.fetchRes;\n    let parsed = urllib.parse(url);\n    let method = (options.method || '').toString().trim().toUpperCase() || 'GET';\n    let finished = false;\n    let cookies;\n    let body;\n\n    let handler = parsed.protocol === 'https:' ? https : http;\n\n    let headers = {\n        'accept-encoding': 'gzip,deflate',\n        'user-agent': 'nodemailer/' + packageData.version\n    };\n\n    Object.keys(options.headers || {}).forEach(key => {\n        headers[key.toLowerCase().trim()] = options.headers[key];\n    });\n\n    if (options.userAgent) {\n        headers['user-agent'] = options.userAgent;\n    }\n\n    if (parsed.auth) {\n        headers.Authorization = 'Basic ' + Buffer.from(parsed.auth).toString('base64');\n    }\n\n    if ((cookies = options.cookies.get(url))) {\n        headers.cookie = cookies;\n    }\n\n    if (options.body) {\n        if (options.contentType !== false) {\n            headers['Content-Type'] = options.contentType || 'application/x-www-form-urlencoded';\n        }\n\n        if (typeof options.body.pipe === 'function') {\n            // it's a stream\n            headers['Transfer-Encoding'] = 'chunked';\n            body = options.body;\n            body.on('error', err => {\n                if (finished) {\n                    return;\n                }\n                finished = true;\n                err.type = 'FETCH';\n                err.sourceUrl = url;\n                fetchRes.emit('error', err);\n            });\n        } else {\n            if (options.body instanceof Buffer) {\n                body = options.body;\n            } else if (typeof options.body === 'object') {\n                try {\n                    // encodeURIComponent can fail on invalid input (partial emoji etc.)\n                    body = Buffer.from(\n                        Object.keys(options.body)\n                            .map(key => {\n                                let value = options.body[key].toString().trim();\n                                return encodeURIComponent(key) + '=' + encodeURIComponent(value);\n                            })\n                            .join('&')\n                    );\n                } catch (E) {\n                    if (finished) {\n                        return;\n                    }\n                    finished = true;\n                    E.type = 'FETCH';\n                    E.sourceUrl = url;\n                    fetchRes.emit('error', E);\n                    return;\n                }\n            } else {\n                body = Buffer.from(options.body.toString().trim());\n            }\n\n            headers['Content-Type'] = options.contentType || 'application/x-www-form-urlencoded';\n            headers['Content-Length'] = body.length;\n        }\n        // if method is not provided, use POST instead of GET\n        method = (options.method || '').toString().trim().toUpperCase() || 'POST';\n    }\n\n    let req;\n    let reqOptions = {\n        method,\n        host: parsed.hostname,\n        path: parsed.path,\n        port: parsed.port ? parsed.port : parsed.protocol === 'https:' ? 443 : 80,\n        headers,\n        rejectUnauthorized: false,\n        agent: false\n    };\n\n    if (options.tls) {\n        Object.keys(options.tls).forEach(key => {\n            reqOptions[key] = options.tls[key];\n        });\n    }\n\n    if (parsed.protocol === 'https:' && parsed.hostname && parsed.hostname !== reqOptions.host && !net.isIP(parsed.hostname) && !reqOptions.servername) {\n        reqOptions.servername = parsed.hostname;\n    }\n\n    try {\n        req = handler.request(reqOptions);\n    } catch (E) {\n        finished = true;\n        setImmediate(() => {\n            E.type = 'FETCH';\n            E.sourceUrl = url;\n            fetchRes.emit('error', E);\n        });\n        return fetchRes;\n    }\n\n    if (options.timeout) {\n        req.setTimeout(options.timeout, () => {\n            if (finished) {\n                return;\n            }\n            finished = true;\n            req.abort();\n            let err = new Error('Request Timeout');\n            err.type = 'FETCH';\n            err.sourceUrl = url;\n            fetchRes.emit('error', err);\n        });\n    }\n\n    req.on('error', err => {\n        if (finished) {\n            return;\n        }\n        finished = true;\n        err.type = 'FETCH';\n        err.sourceUrl = url;\n        fetchRes.emit('error', err);\n    });\n\n    req.on('response', res => {\n        let inflate;\n\n        if (finished) {\n            return;\n        }\n\n        switch (res.headers['content-encoding']) {\n            case 'gzip':\n            case 'deflate':\n                inflate = zlib.createUnzip();\n                break;\n        }\n\n        if (res.headers['set-cookie']) {\n            [].concat(res.headers['set-cookie'] || []).forEach(cookie => {\n                options.cookies.set(cookie, url);\n            });\n        }\n\n        if ([301, 302, 303, 307, 308].includes(res.statusCode) && res.headers.location) {\n            // redirect\n            options.redirects++;\n            if (options.redirects > options.maxRedirects) {\n                finished = true;\n                let err = new Error('Maximum redirect count exceeded');\n                err.type = 'FETCH';\n                err.sourceUrl = url;\n                fetchRes.emit('error', err);\n                req.abort();\n                return;\n            }\n            // redirect does not include POST body\n            options.method = 'GET';\n            options.body = false;\n            return nmfetch(urllib.resolve(url, res.headers.location), options);\n        }\n\n        fetchRes.statusCode = res.statusCode;\n        fetchRes.headers = res.headers;\n\n        if (res.statusCode >= 300 && !options.allowErrorResponse) {\n            finished = true;\n            let err = new Error('Invalid status code ' + res.statusCode);\n            err.type = 'FETCH';\n            err.sourceUrl = url;\n            fetchRes.emit('error', err);\n            req.abort();\n            return;\n        }\n\n        res.on('error', err => {\n            if (finished) {\n                return;\n            }\n            finished = true;\n            err.type = 'FETCH';\n            err.sourceUrl = url;\n            fetchRes.emit('error', err);\n            req.abort();\n        });\n\n        if (inflate) {\n            res.pipe(inflate).pipe(fetchRes);\n            inflate.on('error', err => {\n                if (finished) {\n                    return;\n                }\n                finished = true;\n                err.type = 'FETCH';\n                err.sourceUrl = url;\n                fetchRes.emit('error', err);\n                req.abort();\n            });\n        } else {\n            res.pipe(fetchRes);\n        }\n    });\n\n    setImmediate(() => {\n        if (body) {\n            try {\n                if (typeof body.pipe === 'function') {\n                    return body.pipe(req);\n                } else {\n                    req.write(body);\n                }\n            } catch (err) {\n                finished = true;\n                err.type = 'FETCH';\n                err.sourceUrl = url;\n                fetchRes.emit('error', err);\n                return;\n            }\n        }\n        req.end();\n    });\n\n    return fetchRes;\n}\n", "/* eslint no-console: 0 */\n\n'use strict';\n\nconst urllib = require('url');\nconst util = require('util');\nconst fs = require('fs');\nconst nmfetch = require('../fetch');\nconst dns = require('dns');\nconst net = require('net');\nconst os = require('os');\n\nconst DNS_TTL = 5 * 60 * 1000;\n\nlet networkInterfaces;\ntry {\n    networkInterfaces = os.networkInterfaces();\n} catch (err) {\n    // fails on some systems\n}\n\nmodule.exports.networkInterfaces = networkInterfaces;\n\nconst isFamilySupported = (family, allowInternal) => {\n    let networkInterfaces = module.exports.networkInterfaces;\n    if (!networkInterfaces) {\n        // hope for the best\n        return true;\n    }\n\n    const familySupported =\n        // crux that replaces Object.values(networkInterfaces) as Object.values is not supported in nodejs v6\n        Object.keys(networkInterfaces)\n            .map(key => networkInterfaces[key])\n            // crux that replaces .flat() as it is not supported in older Node versions (v10 and older)\n            .reduce((acc, val) => acc.concat(val), [])\n            .filter(i => !i.internal || allowInternal)\n            .filter(i => i.family === 'IPv' + family || i.family === family).length > 0;\n\n    return familySupported;\n};\n\nconst resolver = (family, hostname, options, callback) => {\n    options = options || {};\n    const familySupported = isFamilySupported(family, options.allowInternalNetworkInterfaces);\n\n    if (!familySupported) {\n        return callback(null, []);\n    }\n\n    const resolver = dns.Resolver ? new dns.Resolver(options) : dns;\n    resolver['resolve' + family](hostname, (err, addresses) => {\n        if (err) {\n            switch (err.code) {\n                case dns.NODATA:\n                case dns.NOTFOUND:\n                case dns.NOTIMP:\n                case dns.SERVFAIL:\n                case dns.CONNREFUSED:\n                case dns.REFUSED:\n                case 'EAI_AGAIN':\n                    return callback(null, []);\n            }\n            return callback(err);\n        }\n        return callback(null, Array.isArray(addresses) ? addresses : [].concat(addresses || []));\n    });\n};\n\nconst dnsCache = (module.exports.dnsCache = new Map());\n\nconst formatDNSValue = (value, extra) => {\n    if (!value) {\n        return Object.assign({}, extra || {});\n    }\n\n    return Object.assign(\n        {\n            servername: value.servername,\n            host:\n                !value.addresses || !value.addresses.length\n                    ? null\n                    : value.addresses.length === 1\n                    ? value.addresses[0]\n                    : value.addresses[Math.floor(Math.random() * value.addresses.length)]\n        },\n        extra || {}\n    );\n};\n\nmodule.exports.resolveHostname = (options, callback) => {\n    options = options || {};\n\n    if (!options.host && options.servername) {\n        options.host = options.servername;\n    }\n\n    if (!options.host || net.isIP(options.host)) {\n        // nothing to do here\n        let value = {\n            addresses: [options.host],\n            servername: options.servername || false\n        };\n        return callback(\n            null,\n            formatDNSValue(value, {\n                cached: false\n            })\n        );\n    }\n\n    let cached;\n    if (dnsCache.has(options.host)) {\n        cached = dnsCache.get(options.host);\n\n        if (!cached.expires || cached.expires >= Date.now()) {\n            return callback(\n                null,\n                formatDNSValue(cached.value, {\n                    cached: true\n                })\n            );\n        }\n    }\n\n    resolver(4, options.host, options, (err, addresses) => {\n        if (err) {\n            if (cached) {\n                // ignore error, use expired value\n                return callback(\n                    null,\n                    formatDNSValue(cached.value, {\n                        cached: true,\n                        error: err\n                    })\n                );\n            }\n            return callback(err);\n        }\n\n        if (addresses && addresses.length) {\n            let value = {\n                addresses,\n                servername: options.servername || options.host\n            };\n\n            dnsCache.set(options.host, {\n                value,\n                expires: Date.now() + (options.dnsTtl || DNS_TTL)\n            });\n\n            return callback(\n                null,\n                formatDNSValue(value, {\n                    cached: false\n                })\n            );\n        }\n\n        resolver(6, options.host, options, (err, addresses) => {\n            if (err) {\n                if (cached) {\n                    // ignore error, use expired value\n                    return callback(\n                        null,\n                        formatDNSValue(cached.value, {\n                            cached: true,\n                            error: err\n                        })\n                    );\n                }\n                return callback(err);\n            }\n\n            if (addresses && addresses.length) {\n                let value = {\n                    addresses,\n                    servername: options.servername || options.host\n                };\n\n                dnsCache.set(options.host, {\n                    value,\n                    expires: Date.now() + (options.dnsTtl || DNS_TTL)\n                });\n\n                return callback(\n                    null,\n                    formatDNSValue(value, {\n                        cached: false\n                    })\n                );\n            }\n\n            try {\n                dns.lookup(options.host, { all: true }, (err, addresses) => {\n                    if (err) {\n                        if (cached) {\n                            // ignore error, use expired value\n                            return callback(\n                                null,\n                                formatDNSValue(cached.value, {\n                                    cached: true,\n                                    error: err\n                                })\n                            );\n                        }\n                        return callback(err);\n                    }\n\n                    let address = addresses\n                        ? addresses\n                              .filter(addr => isFamilySupported(addr.family))\n                              .map(addr => addr.address)\n                              .shift()\n                        : false;\n\n                    if (addresses && addresses.length && !address) {\n                        // there are addresses but none can be used\n                        console.warn(`Failed to resolve IPv${addresses[0].family} addresses with current network`);\n                    }\n\n                    if (!address && cached) {\n                        // nothing was found, fallback to cached value\n                        return callback(\n                            null,\n                            formatDNSValue(cached.value, {\n                                cached: true\n                            })\n                        );\n                    }\n\n                    let value = {\n                        addresses: address ? [address] : [options.host],\n                        servername: options.servername || options.host\n                    };\n\n                    dnsCache.set(options.host, {\n                        value,\n                        expires: Date.now() + (options.dnsTtl || DNS_TTL)\n                    });\n\n                    return callback(\n                        null,\n                        formatDNSValue(value, {\n                            cached: false\n                        })\n                    );\n                });\n            } catch (err) {\n                if (cached) {\n                    // ignore error, use expired value\n                    return callback(\n                        null,\n                        formatDNSValue(cached.value, {\n                            cached: true,\n                            error: err\n                        })\n                    );\n                }\n                return callback(err);\n            }\n        });\n    });\n};\n/**\n * Parses connection url to a structured configuration object\n *\n * @param {String} str Connection url\n * @return {Object} Configuration object\n */\nmodule.exports.parseConnectionUrl = str => {\n    str = str || '';\n    let options = {};\n\n    [urllib.parse(str, true)].forEach(url => {\n        let auth;\n\n        switch (url.protocol) {\n            case 'smtp:':\n                options.secure = false;\n                break;\n            case 'smtps:':\n                options.secure = true;\n                break;\n            case 'direct:':\n                options.direct = true;\n                break;\n        }\n\n        if (!isNaN(url.port) && Number(url.port)) {\n            options.port = Number(url.port);\n        }\n\n        if (url.hostname) {\n            options.host = url.hostname;\n        }\n\n        if (url.auth) {\n            auth = url.auth.split(':');\n\n            if (!options.auth) {\n                options.auth = {};\n            }\n\n            options.auth.user = auth.shift();\n            options.auth.pass = auth.join(':');\n        }\n\n        Object.keys(url.query || {}).forEach(key => {\n            let obj = options;\n            let lKey = key;\n            let value = url.query[key];\n\n            if (!isNaN(value)) {\n                value = Number(value);\n            }\n\n            switch (value) {\n                case 'true':\n                    value = true;\n                    break;\n                case 'false':\n                    value = false;\n                    break;\n            }\n\n            // tls is nested object\n            if (key.indexOf('tls.') === 0) {\n                lKey = key.substr(4);\n                if (!options.tls) {\n                    options.tls = {};\n                }\n                obj = options.tls;\n            } else if (key.indexOf('.') >= 0) {\n                // ignore nested properties besides tls\n                return;\n            }\n\n            if (!(lKey in obj)) {\n                obj[lKey] = value;\n            }\n        });\n    });\n\n    return options;\n};\n\nmodule.exports._logFunc = (logger, level, defaults, data, message, ...args) => {\n    let entry = {};\n\n    Object.keys(defaults || {}).forEach(key => {\n        if (key !== 'level') {\n            entry[key] = defaults[key];\n        }\n    });\n\n    Object.keys(data || {}).forEach(key => {\n        if (key !== 'level') {\n            entry[key] = data[key];\n        }\n    });\n\n    logger[level](entry, message, ...args);\n};\n\n/**\n * Returns a bunyan-compatible logger interface. Uses either provided logger or\n * creates a default console logger\n *\n * @param {Object} [options] Options object that might include 'logger' value\n * @return {Object} bunyan compatible logger\n */\nmodule.exports.getLogger = (options, defaults) => {\n    options = options || {};\n\n    let response = {};\n    let levels = ['trace', 'debug', 'info', 'warn', 'error', 'fatal'];\n\n    if (!options.logger) {\n        // use vanity logger\n        levels.forEach(level => {\n            response[level] = () => false;\n        });\n        return response;\n    }\n\n    let logger = options.logger;\n\n    if (options.logger === true) {\n        // create console logger\n        logger = createDefaultLogger(levels);\n    }\n\n    levels.forEach(level => {\n        response[level] = (data, message, ...args) => {\n            module.exports._logFunc(logger, level, defaults, data, message, ...args);\n        };\n    });\n\n    return response;\n};\n\n/**\n * Wrapper for creating a callback that either resolves or rejects a promise\n * based on input\n *\n * @param {Function} resolve Function to run if callback is called\n * @param {Function} reject Function to run if callback ends with an error\n */\nmodule.exports.callbackPromise = (resolve, reject) =>\n    function () {\n        let args = Array.from(arguments);\n        let err = args.shift();\n        if (err) {\n            reject(err);\n        } else {\n            resolve(...args);\n        }\n    };\n\nmodule.exports.parseDataURI = uri => {\n    let input = uri;\n    let commaPos = input.indexOf(',');\n    if (!commaPos) {\n        return uri;\n    }\n\n    let data = input.substring(commaPos + 1);\n    let metaStr = input.substring('data:'.length, commaPos);\n\n    let encoding;\n\n    let metaEntries = metaStr.split(';');\n    let lastMetaEntry = metaEntries.length > 1 ? metaEntries[metaEntries.length - 1] : false;\n    if (lastMetaEntry && lastMetaEntry.indexOf('=') < 0) {\n        encoding = lastMetaEntry.toLowerCase();\n        metaEntries.pop();\n    }\n\n    let contentType = metaEntries.shift() || 'application/octet-stream';\n    let params = {};\n    for (let entry of metaEntries) {\n        let sep = entry.indexOf('=');\n        if (sep >= 0) {\n            let key = entry.substring(0, sep);\n            let value = entry.substring(sep + 1);\n            params[key] = value;\n        }\n    }\n\n    switch (encoding) {\n        case 'base64':\n            data = Buffer.from(data, 'base64');\n            break;\n        case 'utf8':\n            data = Buffer.from(data);\n            break;\n        default:\n            try {\n                data = Buffer.from(decodeURIComponent(data));\n            } catch (err) {\n                data = Buffer.from(data);\n            }\n            data = Buffer.from(data);\n    }\n\n    return { data, encoding, contentType, params };\n};\n\n/**\n * Resolves a String or a Buffer value for content value. Useful if the value\n * is a Stream or a file or an URL. If the value is a Stream, overwrites\n * the stream object with the resolved value (you can't stream a value twice).\n *\n * This is useful when you want to create a plugin that needs a content value,\n * for example the `html` or `text` value as a String or a Buffer but not as\n * a file path or an URL.\n *\n * @param {Object} data An object or an Array you want to resolve an element for\n * @param {String|Number} key Property name or an Array index\n * @param {Function} callback Callback function with (err, value)\n */\nmodule.exports.resolveContent = (data, key, callback) => {\n    let promise;\n\n    if (!callback) {\n        promise = new Promise((resolve, reject) => {\n            callback = module.exports.callbackPromise(resolve, reject);\n        });\n    }\n\n    let content = (data && data[key] && data[key].content) || data[key];\n    let contentStream;\n    let encoding = ((typeof data[key] === 'object' && data[key].encoding) || 'utf8')\n        .toString()\n        .toLowerCase()\n        .replace(/[-_\\s]/g, '');\n\n    if (!content) {\n        return callback(null, content);\n    }\n\n    if (typeof content === 'object') {\n        if (typeof content.pipe === 'function') {\n            return resolveStream(content, (err, value) => {\n                if (err) {\n                    return callback(err);\n                }\n                // we can't stream twice the same content, so we need\n                // to replace the stream object with the streaming result\n                if (data[key].content) {\n                    data[key].content = value;\n                } else {\n                    data[key] = value;\n                }\n                callback(null, value);\n            });\n        } else if (/^https?:\\/\\//i.test(content.path || content.href)) {\n            contentStream = nmfetch(content.path || content.href);\n            return resolveStream(contentStream, callback);\n        } else if (/^data:/i.test(content.path || content.href)) {\n            let parsedDataUri = module.exports.parseDataURI(content.path || content.href);\n\n            if (!parsedDataUri || !parsedDataUri.data) {\n                return callback(null, Buffer.from(0));\n            }\n            return callback(null, parsedDataUri.data);\n        } else if (content.path) {\n            return resolveStream(fs.createReadStream(content.path), callback);\n        }\n    }\n\n    if (typeof data[key].content === 'string' && !['utf8', 'usascii', 'ascii'].includes(encoding)) {\n        content = Buffer.from(data[key].content, encoding);\n    }\n\n    // default action, return as is\n    setImmediate(() => callback(null, content));\n\n    return promise;\n};\n\n/**\n * Copies properties from source objects to target objects\n */\nmodule.exports.assign = function (/* target, ... sources */) {\n    let args = Array.from(arguments);\n    let target = args.shift() || {};\n\n    args.forEach(source => {\n        Object.keys(source || {}).forEach(key => {\n            if (['tls', 'auth'].includes(key) && source[key] && typeof source[key] === 'object') {\n                // tls and auth are special keys that need to be enumerated separately\n                // other objects are passed as is\n                if (!target[key]) {\n                    // ensure that target has this key\n                    target[key] = {};\n                }\n                Object.keys(source[key]).forEach(subKey => {\n                    target[key][subKey] = source[key][subKey];\n                });\n            } else {\n                target[key] = source[key];\n            }\n        });\n    });\n    return target;\n};\n\nmodule.exports.encodeXText = str => {\n    // ! 0x21\n    // + 0x2B\n    // = 0x3D\n    // ~ 0x7E\n    if (!/[^\\x21-\\x2A\\x2C-\\x3C\\x3E-\\x7E]/.test(str)) {\n        return str;\n    }\n    let buf = Buffer.from(str);\n    let result = '';\n    for (let i = 0, len = buf.length; i < len; i++) {\n        let c = buf[i];\n        if (c < 0x21 || c > 0x7e || c === 0x2b || c === 0x3d) {\n            result += '+' + (c < 0x10 ? '0' : '') + c.toString(16).toUpperCase();\n        } else {\n            result += String.fromCharCode(c);\n        }\n    }\n    return result;\n};\n\n/**\n * Streams a stream value into a Buffer\n *\n * @param {Object} stream Readable stream\n * @param {Function} callback Callback function with (err, value)\n */\nfunction resolveStream(stream, callback) {\n    let responded = false;\n    let chunks = [];\n    let chunklen = 0;\n\n    stream.on('error', err => {\n        if (responded) {\n            return;\n        }\n\n        responded = true;\n        callback(err);\n    });\n\n    stream.on('readable', () => {\n        let chunk;\n        while ((chunk = stream.read()) !== null) {\n            chunks.push(chunk);\n            chunklen += chunk.length;\n        }\n    });\n\n    stream.on('end', () => {\n        if (responded) {\n            return;\n        }\n        responded = true;\n\n        let value;\n\n        try {\n            value = Buffer.concat(chunks, chunklen);\n        } catch (E) {\n            return callback(E);\n        }\n        callback(null, value);\n    });\n}\n\n/**\n * Generates a bunyan-like logger that prints to console\n *\n * @returns {Object} Bunyan logger instance\n */\nfunction createDefaultLogger(levels) {\n    let levelMaxLen = 0;\n    let levelNames = new Map();\n    levels.forEach(level => {\n        if (level.length > levelMaxLen) {\n            levelMaxLen = level.length;\n        }\n    });\n\n    levels.forEach(level => {\n        let levelName = level.toUpperCase();\n        if (levelName.length < levelMaxLen) {\n            levelName += ' '.repeat(levelMaxLen - levelName.length);\n        }\n        levelNames.set(level, levelName);\n    });\n\n    let print = (level, entry, message, ...args) => {\n        let prefix = '';\n        if (entry) {\n            if (entry.tnx === 'server') {\n                prefix = 'S: ';\n            } else if (entry.tnx === 'client') {\n                prefix = 'C: ';\n            }\n\n            if (entry.sid) {\n                prefix = '[' + entry.sid + '] ' + prefix;\n            }\n\n            if (entry.cid) {\n                prefix = '[#' + entry.cid + '] ' + prefix;\n            }\n        }\n\n        message = util.format(message, ...args);\n        message.split(/\\r?\\n/).forEach(line => {\n            console.log('[%s] %s %s', new Date().toISOString().substr(0, 19).replace(/T/, ' '), levelNames.get(level), prefix + line);\n        });\n    };\n\n    let logger = {};\n    levels.forEach(level => {\n        logger[level] = print.bind(null, level);\n    });\n\n    return logger;\n}\n", "/* eslint quote-props: 0 */\n\n'use strict';\n\nconst path = require('path');\n\nconst defaultMimeType = 'application/octet-stream';\nconst defaultExtension = 'bin';\n\nconst mimeTypes = new Map([\n    ['application/acad', 'dwg'],\n    ['application/applixware', 'aw'],\n    ['application/arj', 'arj'],\n    ['application/atom+xml', 'xml'],\n    ['application/atomcat+xml', 'atomcat'],\n    ['application/atomsvc+xml', 'atomsvc'],\n    ['application/base64', ['mm', 'mme']],\n    ['application/binhex', 'hqx'],\n    ['application/binhex4', 'hqx'],\n    ['application/book', ['book', 'boo']],\n    ['application/ccxml+xml,', 'ccxml'],\n    ['application/cdf', 'cdf'],\n    ['application/cdmi-capability', 'cdmia'],\n    ['application/cdmi-container', 'cdmic'],\n    ['application/cdmi-domain', 'cdmid'],\n    ['application/cdmi-object', 'cdmio'],\n    ['application/cdmi-queue', 'cdmiq'],\n    ['application/clariscad', 'ccad'],\n    ['application/commonground', 'dp'],\n    ['application/cu-seeme', 'cu'],\n    ['application/davmount+xml', 'davmount'],\n    ['application/drafting', 'drw'],\n    ['application/dsptype', 'tsp'],\n    ['application/dssc+der', 'dssc'],\n    ['application/dssc+xml', 'xdssc'],\n    ['application/dxf', 'dxf'],\n    ['application/ecmascript', ['js', 'es']],\n    ['application/emma+xml', 'emma'],\n    ['application/envoy', 'evy'],\n    ['application/epub+zip', 'epub'],\n    ['application/excel', ['xls', 'xl', 'xla', 'xlb', 'xlc', 'xld', 'xlk', 'xll', 'xlm', 'xlt', 'xlv', 'xlw']],\n    ['application/exi', 'exi'],\n    ['application/font-tdpfr', 'pfr'],\n    ['application/fractals', 'fif'],\n    ['application/freeloader', 'frl'],\n    ['application/futuresplash', 'spl'],\n    ['application/geo+json', 'geojson'],\n    ['application/gnutar', 'tgz'],\n    ['application/groupwise', 'vew'],\n    ['application/hlp', 'hlp'],\n    ['application/hta', 'hta'],\n    ['application/hyperstudio', 'stk'],\n    ['application/i-deas', 'unv'],\n    ['application/iges', ['iges', 'igs']],\n    ['application/inf', 'inf'],\n    ['application/internet-property-stream', 'acx'],\n    ['application/ipfix', 'ipfix'],\n    ['application/java', 'class'],\n    ['application/java-archive', 'jar'],\n    ['application/java-byte-code', 'class'],\n    ['application/java-serialized-object', 'ser'],\n    ['application/java-vm', 'class'],\n    ['application/javascript', 'js'],\n    ['application/json', 'json'],\n    ['application/lha', 'lha'],\n    ['application/lzx', 'lzx'],\n    ['application/mac-binary', 'bin'],\n    ['application/mac-binhex', 'hqx'],\n    ['application/mac-binhex40', 'hqx'],\n    ['application/mac-compactpro', 'cpt'],\n    ['application/macbinary', 'bin'],\n    ['application/mads+xml', 'mads'],\n    ['application/marc', 'mrc'],\n    ['application/marcxml+xml', 'mrcx'],\n    ['application/mathematica', 'ma'],\n    ['application/mathml+xml', 'mathml'],\n    ['application/mbedlet', 'mbd'],\n    ['application/mbox', 'mbox'],\n    ['application/mcad', 'mcd'],\n    ['application/mediaservercontrol+xml', 'mscml'],\n    ['application/metalink4+xml', 'meta4'],\n    ['application/mets+xml', 'mets'],\n    ['application/mime', 'aps'],\n    ['application/mods+xml', 'mods'],\n    ['application/mp21', 'm21'],\n    ['application/mp4', 'mp4'],\n    ['application/mspowerpoint', ['ppt', 'pot', 'pps', 'ppz']],\n    ['application/msword', ['doc', 'dot', 'w6w', 'wiz', 'word']],\n    ['application/mswrite', 'wri'],\n    ['application/mxf', 'mxf'],\n    ['application/netmc', 'mcp'],\n    ['application/octet-stream', ['*']],\n    ['application/oda', 'oda'],\n    ['application/oebps-package+xml', 'opf'],\n    ['application/ogg', 'ogx'],\n    ['application/olescript', 'axs'],\n    ['application/onenote', 'onetoc'],\n    ['application/patch-ops-error+xml', 'xer'],\n    ['application/pdf', 'pdf'],\n    ['application/pgp-encrypted', 'asc'],\n    ['application/pgp-signature', 'pgp'],\n    ['application/pics-rules', 'prf'],\n    ['application/pkcs-12', 'p12'],\n    ['application/pkcs-crl', 'crl'],\n    ['application/pkcs10', 'p10'],\n    ['application/pkcs7-mime', ['p7c', 'p7m']],\n    ['application/pkcs7-signature', 'p7s'],\n    ['application/pkcs8', 'p8'],\n    ['application/pkix-attr-cert', 'ac'],\n    ['application/pkix-cert', ['cer', 'crt']],\n    ['application/pkix-crl', 'crl'],\n    ['application/pkix-pkipath', 'pkipath'],\n    ['application/pkixcmp', 'pki'],\n    ['application/plain', 'text'],\n    ['application/pls+xml', 'pls'],\n    ['application/postscript', ['ps', 'ai', 'eps']],\n    ['application/powerpoint', 'ppt'],\n    ['application/pro_eng', ['part', 'prt']],\n    ['application/prs.cww', 'cww'],\n    ['application/pskc+xml', 'pskcxml'],\n    ['application/rdf+xml', 'rdf'],\n    ['application/reginfo+xml', 'rif'],\n    ['application/relax-ng-compact-syntax', 'rnc'],\n    ['application/resource-lists+xml', 'rl'],\n    ['application/resource-lists-diff+xml', 'rld'],\n    ['application/ringing-tones', 'rng'],\n    ['application/rls-services+xml', 'rs'],\n    ['application/rsd+xml', 'rsd'],\n    ['application/rss+xml', 'xml'],\n    ['application/rtf', ['rtf', 'rtx']],\n    ['application/sbml+xml', 'sbml'],\n    ['application/scvp-cv-request', 'scq'],\n    ['application/scvp-cv-response', 'scs'],\n    ['application/scvp-vp-request', 'spq'],\n    ['application/scvp-vp-response', 'spp'],\n    ['application/sdp', 'sdp'],\n    ['application/sea', 'sea'],\n    ['application/set', 'set'],\n    ['application/set-payment-initiation', 'setpay'],\n    ['application/set-registration-initiation', 'setreg'],\n    ['application/shf+xml', 'shf'],\n    ['application/sla', 'stl'],\n    ['application/smil', ['smi', 'smil']],\n    ['application/smil+xml', 'smi'],\n    ['application/solids', 'sol'],\n    ['application/sounder', 'sdr'],\n    ['application/sparql-query', 'rq'],\n    ['application/sparql-results+xml', 'srx'],\n    ['application/srgs', 'gram'],\n    ['application/srgs+xml', 'grxml'],\n    ['application/sru+xml', 'sru'],\n    ['application/ssml+xml', 'ssml'],\n    ['application/step', ['step', 'stp']],\n    ['application/streamingmedia', 'ssm'],\n    ['application/tei+xml', 'tei'],\n    ['application/thraud+xml', 'tfi'],\n    ['application/timestamped-data', 'tsd'],\n    ['application/toolbook', 'tbk'],\n    ['application/vda', 'vda'],\n    ['application/vnd.3gpp.pic-bw-large', 'plb'],\n    ['application/vnd.3gpp.pic-bw-small', 'psb'],\n    ['application/vnd.3gpp.pic-bw-var', 'pvb'],\n    ['application/vnd.3gpp2.tcap', 'tcap'],\n    ['application/vnd.3m.post-it-notes', 'pwn'],\n    ['application/vnd.accpac.simply.aso', 'aso'],\n    ['application/vnd.accpac.simply.imp', 'imp'],\n    ['application/vnd.acucobol', 'acu'],\n    ['application/vnd.acucorp', 'atc'],\n    ['application/vnd.adobe.air-application-installer-package+zip', 'air'],\n    ['application/vnd.adobe.fxp', 'fxp'],\n    ['application/vnd.adobe.xdp+xml', 'xdp'],\n    ['application/vnd.adobe.xfdf', 'xfdf'],\n    ['application/vnd.ahead.space', 'ahead'],\n    ['application/vnd.airzip.filesecure.azf', 'azf'],\n    ['application/vnd.airzip.filesecure.azs', 'azs'],\n    ['application/vnd.amazon.ebook', 'azw'],\n    ['application/vnd.americandynamics.acc', 'acc'],\n    ['application/vnd.amiga.ami', 'ami'],\n    ['application/vnd.android.package-archive', 'apk'],\n    ['application/vnd.anser-web-certificate-issue-initiation', 'cii'],\n    ['application/vnd.anser-web-funds-transfer-initiation', 'fti'],\n    ['application/vnd.antix.game-component', 'atx'],\n    ['application/vnd.apple.installer+xml', 'mpkg'],\n    ['application/vnd.apple.mpegurl', 'm3u8'],\n    ['application/vnd.aristanetworks.swi', 'swi'],\n    ['application/vnd.audiograph', 'aep'],\n    ['application/vnd.blueice.multipass', 'mpm'],\n    ['application/vnd.bmi', 'bmi'],\n    ['application/vnd.businessobjects', 'rep'],\n    ['application/vnd.chemdraw+xml', 'cdxml'],\n    ['application/vnd.chipnuts.karaoke-mmd', 'mmd'],\n    ['application/vnd.cinderella', 'cdy'],\n    ['application/vnd.claymore', 'cla'],\n    ['application/vnd.cloanto.rp9', 'rp9'],\n    ['application/vnd.clonk.c4group', 'c4g'],\n    ['application/vnd.cluetrust.cartomobile-config', 'c11amc'],\n    ['application/vnd.cluetrust.cartomobile-config-pkg', 'c11amz'],\n    ['application/vnd.commonspace', 'csp'],\n    ['application/vnd.contact.cmsg', 'cdbcmsg'],\n    ['application/vnd.cosmocaller', 'cmc'],\n    ['application/vnd.crick.clicker', 'clkx'],\n    ['application/vnd.crick.clicker.keyboard', 'clkk'],\n    ['application/vnd.crick.clicker.palette', 'clkp'],\n    ['application/vnd.crick.clicker.template', 'clkt'],\n    ['application/vnd.crick.clicker.wordbank', 'clkw'],\n    ['application/vnd.criticaltools.wbs+xml', 'wbs'],\n    ['application/vnd.ctc-posml', 'pml'],\n    ['application/vnd.cups-ppd', 'ppd'],\n    ['application/vnd.curl.car', 'car'],\n    ['application/vnd.curl.pcurl', 'pcurl'],\n    ['application/vnd.data-vision.rdz', 'rdz'],\n    ['application/vnd.denovo.fcselayout-link', 'fe_launch'],\n    ['application/vnd.dna', 'dna'],\n    ['application/vnd.dolby.mlp', 'mlp'],\n    ['application/vnd.dpgraph', 'dpg'],\n    ['application/vnd.dreamfactory', 'dfac'],\n    ['application/vnd.dvb.ait', 'ait'],\n    ['application/vnd.dvb.service', 'svc'],\n    ['application/vnd.dynageo', 'geo'],\n    ['application/vnd.ecowin.chart', 'mag'],\n    ['application/vnd.enliven', 'nml'],\n    ['application/vnd.epson.esf', 'esf'],\n    ['application/vnd.epson.msf', 'msf'],\n    ['application/vnd.epson.quickanime', 'qam'],\n    ['application/vnd.epson.salt', 'slt'],\n    ['application/vnd.epson.ssf', 'ssf'],\n    ['application/vnd.eszigno3+xml', 'es3'],\n    ['application/vnd.ezpix-album', 'ez2'],\n    ['application/vnd.ezpix-package', 'ez3'],\n    ['application/vnd.fdf', 'fdf'],\n    ['application/vnd.fdsn.seed', 'seed'],\n    ['application/vnd.flographit', 'gph'],\n    ['application/vnd.fluxtime.clip', 'ftc'],\n    ['application/vnd.framemaker', 'fm'],\n    ['application/vnd.frogans.fnc', 'fnc'],\n    ['application/vnd.frogans.ltf', 'ltf'],\n    ['application/vnd.fsc.weblaunch', 'fsc'],\n    ['application/vnd.fujitsu.oasys', 'oas'],\n    ['application/vnd.fujitsu.oasys2', 'oa2'],\n    ['application/vnd.fujitsu.oasys3', 'oa3'],\n    ['application/vnd.fujitsu.oasysgp', 'fg5'],\n    ['application/vnd.fujitsu.oasysprs', 'bh2'],\n    ['application/vnd.fujixerox.ddd', 'ddd'],\n    ['application/vnd.fujixerox.docuworks', 'xdw'],\n    ['application/vnd.fujixerox.docuworks.binder', 'xbd'],\n    ['application/vnd.fuzzysheet', 'fzs'],\n    ['application/vnd.genomatix.tuxedo', 'txd'],\n    ['application/vnd.geogebra.file', 'ggb'],\n    ['application/vnd.geogebra.tool', 'ggt'],\n    ['application/vnd.geometry-explorer', 'gex'],\n    ['application/vnd.geonext', 'gxt'],\n    ['application/vnd.geoplan', 'g2w'],\n    ['application/vnd.geospace', 'g3w'],\n    ['application/vnd.gmx', 'gmx'],\n    ['application/vnd.google-earth.kml+xml', 'kml'],\n    ['application/vnd.google-earth.kmz', 'kmz'],\n    ['application/vnd.grafeq', 'gqf'],\n    ['application/vnd.groove-account', 'gac'],\n    ['application/vnd.groove-help', 'ghf'],\n    ['application/vnd.groove-identity-message', 'gim'],\n    ['application/vnd.groove-injector', 'grv'],\n    ['application/vnd.groove-tool-message', 'gtm'],\n    ['application/vnd.groove-tool-template', 'tpl'],\n    ['application/vnd.groove-vcard', 'vcg'],\n    ['application/vnd.hal+xml', 'hal'],\n    ['application/vnd.handheld-entertainment+xml', 'zmm'],\n    ['application/vnd.hbci', 'hbci'],\n    ['application/vnd.hhe.lesson-player', 'les'],\n    ['application/vnd.hp-hpgl', ['hgl', 'hpg', 'hpgl']],\n    ['application/vnd.hp-hpid', 'hpid'],\n    ['application/vnd.hp-hps', 'hps'],\n    ['application/vnd.hp-jlyt', 'jlt'],\n    ['application/vnd.hp-pcl', 'pcl'],\n    ['application/vnd.hp-pclxl', 'pclxl'],\n    ['application/vnd.hydrostatix.sof-data', 'sfd-hdstx'],\n    ['application/vnd.hzn-3d-crossword', 'x3d'],\n    ['application/vnd.ibm.minipay', 'mpy'],\n    ['application/vnd.ibm.modcap', 'afp'],\n    ['application/vnd.ibm.rights-management', 'irm'],\n    ['application/vnd.ibm.secure-container', 'sc'],\n    ['application/vnd.iccprofile', 'icc'],\n    ['application/vnd.igloader', 'igl'],\n    ['application/vnd.immervision-ivp', 'ivp'],\n    ['application/vnd.immervision-ivu', 'ivu'],\n    ['application/vnd.insors.igm', 'igm'],\n    ['application/vnd.intercon.formnet', 'xpw'],\n    ['application/vnd.intergeo', 'i2g'],\n    ['application/vnd.intu.qbo', 'qbo'],\n    ['application/vnd.intu.qfx', 'qfx'],\n    ['application/vnd.ipunplugged.rcprofile', 'rcprofile'],\n    ['application/vnd.irepository.package+xml', 'irp'],\n    ['application/vnd.is-xpr', 'xpr'],\n    ['application/vnd.isac.fcs', 'fcs'],\n    ['application/vnd.jam', 'jam'],\n    ['application/vnd.jcp.javame.midlet-rms', 'rms'],\n    ['application/vnd.jisp', 'jisp'],\n    ['application/vnd.joost.joda-archive', 'joda'],\n    ['application/vnd.kahootz', 'ktz'],\n    ['application/vnd.kde.karbon', 'karbon'],\n    ['application/vnd.kde.kchart', 'chrt'],\n    ['application/vnd.kde.kformula', 'kfo'],\n    ['application/vnd.kde.kivio', 'flw'],\n    ['application/vnd.kde.kontour', 'kon'],\n    ['application/vnd.kde.kpresenter', 'kpr'],\n    ['application/vnd.kde.kspread', 'ksp'],\n    ['application/vnd.kde.kword', 'kwd'],\n    ['application/vnd.kenameaapp', 'htke'],\n    ['application/vnd.kidspiration', 'kia'],\n    ['application/vnd.kinar', 'kne'],\n    ['application/vnd.koan', 'skp'],\n    ['application/vnd.kodak-descriptor', 'sse'],\n    ['application/vnd.las.las+xml', 'lasxml'],\n    ['application/vnd.llamagraphics.life-balance.desktop', 'lbd'],\n    ['application/vnd.llamagraphics.life-balance.exchange+xml', 'lbe'],\n    ['application/vnd.lotus-1-2-3', '123'],\n    ['application/vnd.lotus-approach', 'apr'],\n    ['application/vnd.lotus-freelance', 'pre'],\n    ['application/vnd.lotus-notes', 'nsf'],\n    ['application/vnd.lotus-organizer', 'org'],\n    ['application/vnd.lotus-screencam', 'scm'],\n    ['application/vnd.lotus-wordpro', 'lwp'],\n    ['application/vnd.macports.portpkg', 'portpkg'],\n    ['application/vnd.mcd', 'mcd'],\n    ['application/vnd.medcalcdata', 'mc1'],\n    ['application/vnd.mediastation.cdkey', 'cdkey'],\n    ['application/vnd.mfer', 'mwf'],\n    ['application/vnd.mfmp', 'mfm'],\n    ['application/vnd.micrografx.flo', 'flo'],\n    ['application/vnd.micrografx.igx', 'igx'],\n    ['application/vnd.mif', 'mif'],\n    ['application/vnd.mobius.daf', 'daf'],\n    ['application/vnd.mobius.dis', 'dis'],\n    ['application/vnd.mobius.mbk', 'mbk'],\n    ['application/vnd.mobius.mqy', 'mqy'],\n    ['application/vnd.mobius.msl', 'msl'],\n    ['application/vnd.mobius.plc', 'plc'],\n    ['application/vnd.mobius.txf', 'txf'],\n    ['application/vnd.mophun.application', 'mpn'],\n    ['application/vnd.mophun.certificate', 'mpc'],\n    ['application/vnd.mozilla.xul+xml', 'xul'],\n    ['application/vnd.ms-artgalry', 'cil'],\n    ['application/vnd.ms-cab-compressed', 'cab'],\n    ['application/vnd.ms-excel', ['xls', 'xla', 'xlc', 'xlm', 'xlt', 'xlw', 'xlb', 'xll']],\n    ['application/vnd.ms-excel.addin.macroenabled.12', 'xlam'],\n    ['application/vnd.ms-excel.sheet.binary.macroenabled.12', 'xlsb'],\n    ['application/vnd.ms-excel.sheet.macroenabled.12', 'xlsm'],\n    ['application/vnd.ms-excel.template.macroenabled.12', 'xltm'],\n    ['application/vnd.ms-fontobject', 'eot'],\n    ['application/vnd.ms-htmlhelp', 'chm'],\n    ['application/vnd.ms-ims', 'ims'],\n    ['application/vnd.ms-lrm', 'lrm'],\n    ['application/vnd.ms-officetheme', 'thmx'],\n    ['application/vnd.ms-outlook', 'msg'],\n    ['application/vnd.ms-pki.certstore', 'sst'],\n    ['application/vnd.ms-pki.pko', 'pko'],\n    ['application/vnd.ms-pki.seccat', 'cat'],\n    ['application/vnd.ms-pki.stl', 'stl'],\n    ['application/vnd.ms-pkicertstore', 'sst'],\n    ['application/vnd.ms-pkiseccat', 'cat'],\n    ['application/vnd.ms-pkistl', 'stl'],\n    ['application/vnd.ms-powerpoint', ['ppt', 'pot', 'pps', 'ppa', 'pwz']],\n    ['application/vnd.ms-powerpoint.addin.macroenabled.12', 'ppam'],\n    ['application/vnd.ms-powerpoint.presentation.macroenabled.12', 'pptm'],\n    ['application/vnd.ms-powerpoint.slide.macroenabled.12', 'sldm'],\n    ['application/vnd.ms-powerpoint.slideshow.macroenabled.12', 'ppsm'],\n    ['application/vnd.ms-powerpoint.template.macroenabled.12', 'potm'],\n    ['application/vnd.ms-project', 'mpp'],\n    ['application/vnd.ms-word.document.macroenabled.12', 'docm'],\n    ['application/vnd.ms-word.template.macroenabled.12', 'dotm'],\n    ['application/vnd.ms-works', ['wks', 'wcm', 'wdb', 'wps']],\n    ['application/vnd.ms-wpl', 'wpl'],\n    ['application/vnd.ms-xpsdocument', 'xps'],\n    ['application/vnd.mseq', 'mseq'],\n    ['application/vnd.musician', 'mus'],\n    ['application/vnd.muvee.style', 'msty'],\n    ['application/vnd.neurolanguage.nlu', 'nlu'],\n    ['application/vnd.noblenet-directory', 'nnd'],\n    ['application/vnd.noblenet-sealer', 'nns'],\n    ['application/vnd.noblenet-web', 'nnw'],\n    ['application/vnd.nokia.configuration-message', 'ncm'],\n    ['application/vnd.nokia.n-gage.data', 'ngdat'],\n    ['application/vnd.nokia.n-gage.symbian.install', 'n-gage'],\n    ['application/vnd.nokia.radio-preset', 'rpst'],\n    ['application/vnd.nokia.radio-presets', 'rpss'],\n    ['application/vnd.nokia.ringing-tone', 'rng'],\n    ['application/vnd.novadigm.edm', 'edm'],\n    ['application/vnd.novadigm.edx', 'edx'],\n    ['application/vnd.novadigm.ext', 'ext'],\n    ['application/vnd.oasis.opendocument.chart', 'odc'],\n    ['application/vnd.oasis.opendocument.chart-template', 'otc'],\n    ['application/vnd.oasis.opendocument.database', 'odb'],\n    ['application/vnd.oasis.opendocument.formula', 'odf'],\n    ['application/vnd.oasis.opendocument.formula-template', 'odft'],\n    ['application/vnd.oasis.opendocument.graphics', 'odg'],\n    ['application/vnd.oasis.opendocument.graphics-template', 'otg'],\n    ['application/vnd.oasis.opendocument.image', 'odi'],\n    ['application/vnd.oasis.opendocument.image-template', 'oti'],\n    ['application/vnd.oasis.opendocument.presentation', 'odp'],\n    ['application/vnd.oasis.opendocument.presentation-template', 'otp'],\n    ['application/vnd.oasis.opendocument.spreadsheet', 'ods'],\n    ['application/vnd.oasis.opendocument.spreadsheet-template', 'ots'],\n    ['application/vnd.oasis.opendocument.text', 'odt'],\n    ['application/vnd.oasis.opendocument.text-master', 'odm'],\n    ['application/vnd.oasis.opendocument.text-template', 'ott'],\n    ['application/vnd.oasis.opendocument.text-web', 'oth'],\n    ['application/vnd.olpc-sugar', 'xo'],\n    ['application/vnd.oma.dd2+xml', 'dd2'],\n    ['application/vnd.openofficeorg.extension', 'oxt'],\n    ['application/vnd.openxmlformats-officedocument.presentationml.presentation', 'pptx'],\n    ['application/vnd.openxmlformats-officedocument.presentationml.slide', 'sldx'],\n    ['application/vnd.openxmlformats-officedocument.presentationml.slideshow', 'ppsx'],\n    ['application/vnd.openxmlformats-officedocument.presentationml.template', 'potx'],\n    ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'xlsx'],\n    ['application/vnd.openxmlformats-officedocument.spreadsheetml.template', 'xltx'],\n    ['application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'docx'],\n    ['application/vnd.openxmlformats-officedocument.wordprocessingml.template', 'dotx'],\n    ['application/vnd.osgeo.mapguide.package', 'mgp'],\n    ['application/vnd.osgi.dp', 'dp'],\n    ['application/vnd.palm', 'pdb'],\n    ['application/vnd.pawaafile', 'paw'],\n    ['application/vnd.pg.format', 'str'],\n    ['application/vnd.pg.osasli', 'ei6'],\n    ['application/vnd.picsel', 'efif'],\n    ['application/vnd.pmi.widget', 'wg'],\n    ['application/vnd.pocketlearn', 'plf'],\n    ['application/vnd.powerbuilder6', 'pbd'],\n    ['application/vnd.previewsystems.box', 'box'],\n    ['application/vnd.proteus.magazine', 'mgz'],\n    ['application/vnd.publishare-delta-tree', 'qps'],\n    ['application/vnd.pvi.ptid1', 'ptid'],\n    ['application/vnd.quark.quarkxpress', 'qxd'],\n    ['application/vnd.realvnc.bed', 'bed'],\n    ['application/vnd.recordare.musicxml', 'mxl'],\n    ['application/vnd.recordare.musicxml+xml', 'musicxml'],\n    ['application/vnd.rig.cryptonote', 'cryptonote'],\n    ['application/vnd.rim.cod', 'cod'],\n    ['application/vnd.rn-realmedia', 'rm'],\n    ['application/vnd.rn-realplayer', 'rnx'],\n    ['application/vnd.route66.link66+xml', 'link66'],\n    ['application/vnd.sailingtracker.track', 'st'],\n    ['application/vnd.seemail', 'see'],\n    ['application/vnd.sema', 'sema'],\n    ['application/vnd.semd', 'semd'],\n    ['application/vnd.semf', 'semf'],\n    ['application/vnd.shana.informed.formdata', 'ifm'],\n    ['application/vnd.shana.informed.formtemplate', 'itp'],\n    ['application/vnd.shana.informed.interchange', 'iif'],\n    ['application/vnd.shana.informed.package', 'ipk'],\n    ['application/vnd.simtech-mindmapper', 'twd'],\n    ['application/vnd.smaf', 'mmf'],\n    ['application/vnd.smart.teacher', 'teacher'],\n    ['application/vnd.solent.sdkm+xml', 'sdkm'],\n    ['application/vnd.spotfire.dxp', 'dxp'],\n    ['application/vnd.spotfire.sfs', 'sfs'],\n    ['application/vnd.stardivision.calc', 'sdc'],\n    ['application/vnd.stardivision.draw', 'sda'],\n    ['application/vnd.stardivision.impress', 'sdd'],\n    ['application/vnd.stardivision.math', 'smf'],\n    ['application/vnd.stardivision.writer', 'sdw'],\n    ['application/vnd.stardivision.writer-global', 'sgl'],\n    ['application/vnd.stepmania.stepchart', 'sm'],\n    ['application/vnd.sun.xml.calc', 'sxc'],\n    ['application/vnd.sun.xml.calc.template', 'stc'],\n    ['application/vnd.sun.xml.draw', 'sxd'],\n    ['application/vnd.sun.xml.draw.template', 'std'],\n    ['application/vnd.sun.xml.impress', 'sxi'],\n    ['application/vnd.sun.xml.impress.template', 'sti'],\n    ['application/vnd.sun.xml.math', 'sxm'],\n    ['application/vnd.sun.xml.writer', 'sxw'],\n    ['application/vnd.sun.xml.writer.global', 'sxg'],\n    ['application/vnd.sun.xml.writer.template', 'stw'],\n    ['application/vnd.sus-calendar', 'sus'],\n    ['application/vnd.svd', 'svd'],\n    ['application/vnd.symbian.install', 'sis'],\n    ['application/vnd.syncml+xml', 'xsm'],\n    ['application/vnd.syncml.dm+wbxml', 'bdm'],\n    ['application/vnd.syncml.dm+xml', 'xdm'],\n    ['application/vnd.tao.intent-module-archive', 'tao'],\n    ['application/vnd.tmobile-livetv', 'tmo'],\n    ['application/vnd.trid.tpt', 'tpt'],\n    ['application/vnd.triscape.mxs', 'mxs'],\n    ['application/vnd.trueapp', 'tra'],\n    ['application/vnd.ufdl', 'ufd'],\n    ['application/vnd.uiq.theme', 'utz'],\n    ['application/vnd.umajin', 'umj'],\n    ['application/vnd.unity', 'unityweb'],\n    ['application/vnd.uoml+xml', 'uoml'],\n    ['application/vnd.vcx', 'vcx'],\n    ['application/vnd.visio', 'vsd'],\n    ['application/vnd.visionary', 'vis'],\n    ['application/vnd.vsf', 'vsf'],\n    ['application/vnd.wap.wbxml', 'wbxml'],\n    ['application/vnd.wap.wmlc', 'wmlc'],\n    ['application/vnd.wap.wmlscriptc', 'wmlsc'],\n    ['application/vnd.webturbo', 'wtb'],\n    ['application/vnd.wolfram.player', 'nbp'],\n    ['application/vnd.wordperfect', 'wpd'],\n    ['application/vnd.wqd', 'wqd'],\n    ['application/vnd.wt.stf', 'stf'],\n    ['application/vnd.xara', ['web', 'xar']],\n    ['application/vnd.xfdl', 'xfdl'],\n    ['application/vnd.yamaha.hv-dic', 'hvd'],\n    ['application/vnd.yamaha.hv-script', 'hvs'],\n    ['application/vnd.yamaha.hv-voice', 'hvp'],\n    ['application/vnd.yamaha.openscoreformat', 'osf'],\n    ['application/vnd.yamaha.openscoreformat.osfpvg+xml', 'osfpvg'],\n    ['application/vnd.yamaha.smaf-audio', 'saf'],\n    ['application/vnd.yamaha.smaf-phrase', 'spf'],\n    ['application/vnd.yellowriver-custom-menu', 'cmp'],\n    ['application/vnd.zul', 'zir'],\n    ['application/vnd.zzazz.deck+xml', 'zaz'],\n    ['application/vocaltec-media-desc', 'vmd'],\n    ['application/vocaltec-media-file', 'vmf'],\n    ['application/voicexml+xml', 'vxml'],\n    ['application/widget', 'wgt'],\n    ['application/winhlp', 'hlp'],\n    ['application/wordperfect', ['wp', 'wp5', 'wp6', 'wpd']],\n    ['application/wordperfect6.0', ['w60', 'wp5']],\n    ['application/wordperfect6.1', 'w61'],\n    ['application/wsdl+xml', 'wsdl'],\n    ['application/wspolicy+xml', 'wspolicy'],\n    ['application/x-123', 'wk1'],\n    ['application/x-7z-compressed', '7z'],\n    ['application/x-abiword', 'abw'],\n    ['application/x-ace-compressed', 'ace'],\n    ['application/x-aim', 'aim'],\n    ['application/x-authorware-bin', 'aab'],\n    ['application/x-authorware-map', 'aam'],\n    ['application/x-authorware-seg', 'aas'],\n    ['application/x-bcpio', 'bcpio'],\n    ['application/x-binary', 'bin'],\n    ['application/x-binhex40', 'hqx'],\n    ['application/x-bittorrent', 'torrent'],\n    ['application/x-bsh', ['bsh', 'sh', 'shar']],\n    ['application/x-bytecode.elisp', 'elc'],\n    ['application/x-bytecode.python', 'pyc'],\n    ['application/x-bzip', 'bz'],\n    ['application/x-bzip2', ['boz', 'bz2']],\n    ['application/x-cdf', 'cdf'],\n    ['application/x-cdlink', 'vcd'],\n    ['application/x-chat', ['cha', 'chat']],\n    ['application/x-chess-pgn', 'pgn'],\n    ['application/x-cmu-raster', 'ras'],\n    ['application/x-cocoa', 'cco'],\n    ['application/x-compactpro', 'cpt'],\n    ['application/x-compress', 'z'],\n    ['application/x-compressed', ['tgz', 'gz', 'z', 'zip']],\n    ['application/x-conference', 'nsc'],\n    ['application/x-cpio', 'cpio'],\n    ['application/x-cpt', 'cpt'],\n    ['application/x-csh', 'csh'],\n    ['application/x-debian-package', 'deb'],\n    ['application/x-deepv', 'deepv'],\n    ['application/x-director', ['dir', 'dcr', 'dxr']],\n    ['application/x-doom', 'wad'],\n    ['application/x-dtbncx+xml', 'ncx'],\n    ['application/x-dtbook+xml', 'dtb'],\n    ['application/x-dtbresource+xml', 'res'],\n    ['application/x-dvi', 'dvi'],\n    ['application/x-elc', 'elc'],\n    ['application/x-envoy', ['env', 'evy']],\n    ['application/x-esrehber', 'es'],\n    ['application/x-excel', ['xls', 'xla', 'xlb', 'xlc', 'xld', 'xlk', 'xll', 'xlm', 'xlt', 'xlv', 'xlw']],\n    ['application/x-font-bdf', 'bdf'],\n    ['application/x-font-ghostscript', 'gsf'],\n    ['application/x-font-linux-psf', 'psf'],\n    ['application/x-font-otf', 'otf'],\n    ['application/x-font-pcf', 'pcf'],\n    ['application/x-font-snf', 'snf'],\n    ['application/x-font-ttf', 'ttf'],\n    ['application/x-font-type1', 'pfa'],\n    ['application/x-font-woff', 'woff'],\n    ['application/x-frame', 'mif'],\n    ['application/x-freelance', 'pre'],\n    ['application/x-futuresplash', 'spl'],\n    ['application/x-gnumeric', 'gnumeric'],\n    ['application/x-gsp', 'gsp'],\n    ['application/x-gss', 'gss'],\n    ['application/x-gtar', 'gtar'],\n    ['application/x-gzip', ['gz', 'gzip']],\n    ['application/x-hdf', 'hdf'],\n    ['application/x-helpfile', ['help', 'hlp']],\n    ['application/x-httpd-imap', 'imap'],\n    ['application/x-ima', 'ima'],\n    ['application/x-internet-signup', ['ins', 'isp']],\n    ['application/x-internett-signup', 'ins'],\n    ['application/x-inventor', 'iv'],\n    ['application/x-ip2', 'ip'],\n    ['application/x-iphone', 'iii'],\n    ['application/x-java-class', 'class'],\n    ['application/x-java-commerce', 'jcm'],\n    ['application/x-java-jnlp-file', 'jnlp'],\n    ['application/x-javascript', 'js'],\n    ['application/x-koan', ['skd', 'skm', 'skp', 'skt']],\n    ['application/x-ksh', 'ksh'],\n    ['application/x-latex', ['latex', 'ltx']],\n    ['application/x-lha', 'lha'],\n    ['application/x-lisp', 'lsp'],\n    ['application/x-livescreen', 'ivy'],\n    ['application/x-lotus', 'wq1'],\n    ['application/x-lotusscreencam', 'scm'],\n    ['application/x-lzh', 'lzh'],\n    ['application/x-lzx', 'lzx'],\n    ['application/x-mac-binhex40', 'hqx'],\n    ['application/x-macbinary', 'bin'],\n    ['application/x-magic-cap-package-1.0', 'mc$'],\n    ['application/x-mathcad', 'mcd'],\n    ['application/x-meme', 'mm'],\n    ['application/x-midi', ['mid', 'midi']],\n    ['application/x-mif', 'mif'],\n    ['application/x-mix-transfer', 'nix'],\n    ['application/x-mobipocket-ebook', 'prc'],\n    ['application/x-mplayer2', 'asx'],\n    ['application/x-ms-application', 'application'],\n    ['application/x-ms-wmd', 'wmd'],\n    ['application/x-ms-wmz', 'wmz'],\n    ['application/x-ms-xbap', 'xbap'],\n    ['application/x-msaccess', 'mdb'],\n    ['application/x-msbinder', 'obd'],\n    ['application/x-mscardfile', 'crd'],\n    ['application/x-msclip', 'clp'],\n    ['application/x-msdownload', ['exe', 'dll']],\n    ['application/x-msexcel', ['xls', 'xla', 'xlw']],\n    ['application/x-msmediaview', ['mvb', 'm13', 'm14']],\n    ['application/x-msmetafile', 'wmf'],\n    ['application/x-msmoney', 'mny'],\n    ['application/x-mspowerpoint', 'ppt'],\n    ['application/x-mspublisher', 'pub'],\n    ['application/x-msschedule', 'scd'],\n    ['application/x-msterminal', 'trm'],\n    ['application/x-mswrite', 'wri'],\n    ['application/x-navi-animation', 'ani'],\n    ['application/x-navidoc', 'nvd'],\n    ['application/x-navimap', 'map'],\n    ['application/x-navistyle', 'stl'],\n    ['application/x-netcdf', ['cdf', 'nc']],\n    ['application/x-newton-compatible-pkg', 'pkg'],\n    ['application/x-nokia-9000-communicator-add-on-software', 'aos'],\n    ['application/x-omc', 'omc'],\n    ['application/x-omcdatamaker', 'omcd'],\n    ['application/x-omcregerator', 'omcr'],\n    ['application/x-pagemaker', ['pm4', 'pm5']],\n    ['application/x-pcl', 'pcl'],\n    ['application/x-perfmon', ['pma', 'pmc', 'pml', 'pmr', 'pmw']],\n    ['application/x-pixclscript', 'plx'],\n    ['application/x-pkcs10', 'p10'],\n    ['application/x-pkcs12', ['p12', 'pfx']],\n    ['application/x-pkcs7-certificates', ['p7b', 'spc']],\n    ['application/x-pkcs7-certreqresp', 'p7r'],\n    ['application/x-pkcs7-mime', ['p7m', 'p7c']],\n    ['application/x-pkcs7-signature', ['p7s', 'p7a']],\n    ['application/x-pointplus', 'css'],\n    ['application/x-portable-anymap', 'pnm'],\n    ['application/x-project', ['mpc', 'mpt', 'mpv', 'mpx']],\n    ['application/x-qpro', 'wb1'],\n    ['application/x-rar-compressed', 'rar'],\n    ['application/x-rtf', 'rtf'],\n    ['application/x-sdp', 'sdp'],\n    ['application/x-sea', 'sea'],\n    ['application/x-seelogo', 'sl'],\n    ['application/x-sh', 'sh'],\n    ['application/x-shar', ['shar', 'sh']],\n    ['application/x-shockwave-flash', 'swf'],\n    ['application/x-silverlight-app', 'xap'],\n    ['application/x-sit', 'sit'],\n    ['application/x-sprite', ['spr', 'sprite']],\n    ['application/x-stuffit', 'sit'],\n    ['application/x-stuffitx', 'sitx'],\n    ['application/x-sv4cpio', 'sv4cpio'],\n    ['application/x-sv4crc', 'sv4crc'],\n    ['application/x-tar', 'tar'],\n    ['application/x-tbook', ['sbk', 'tbk']],\n    ['application/x-tcl', 'tcl'],\n    ['application/x-tex', 'tex'],\n    ['application/x-tex-tfm', 'tfm'],\n    ['application/x-texinfo', ['texi', 'texinfo']],\n    ['application/x-troff', ['roff', 't', 'tr']],\n    ['application/x-troff-man', 'man'],\n    ['application/x-troff-me', 'me'],\n    ['application/x-troff-ms', 'ms'],\n    ['application/x-troff-msvideo', 'avi'],\n    ['application/x-ustar', 'ustar'],\n    ['application/x-visio', ['vsd', 'vst', 'vsw']],\n    ['application/x-vnd.audioexplosion.mzz', 'mzz'],\n    ['application/x-vnd.ls-xpix', 'xpix'],\n    ['application/x-vrml', 'vrml'],\n    ['application/x-wais-source', ['src', 'wsrc']],\n    ['application/x-winhelp', 'hlp'],\n    ['application/x-wintalk', 'wtk'],\n    ['application/x-world', ['wrl', 'svr']],\n    ['application/x-wpwin', 'wpd'],\n    ['application/x-wri', 'wri'],\n    ['application/x-x509-ca-cert', ['cer', 'crt', 'der']],\n    ['application/x-x509-user-cert', 'crt'],\n    ['application/x-xfig', 'fig'],\n    ['application/x-xpinstall', 'xpi'],\n    ['application/x-zip-compressed', 'zip'],\n    ['application/xcap-diff+xml', 'xdf'],\n    ['application/xenc+xml', 'xenc'],\n    ['application/xhtml+xml', 'xhtml'],\n    ['application/xml', 'xml'],\n    ['application/xml-dtd', 'dtd'],\n    ['application/xop+xml', 'xop'],\n    ['application/xslt+xml', 'xslt'],\n    ['application/xspf+xml', 'xspf'],\n    ['application/xv+xml', 'mxml'],\n    ['application/yang', 'yang'],\n    ['application/yin+xml', 'yin'],\n    ['application/ynd.ms-pkipko', 'pko'],\n    ['application/zip', 'zip'],\n    ['audio/adpcm', 'adp'],\n    ['audio/aiff', ['aiff', 'aif', 'aifc']],\n    ['audio/basic', ['snd', 'au']],\n    ['audio/it', 'it'],\n    ['audio/make', ['funk', 'my', 'pfunk']],\n    ['audio/make.my.funk', 'pfunk'],\n    ['audio/mid', ['mid', 'rmi']],\n    ['audio/midi', ['midi', 'kar', 'mid']],\n    ['audio/mod', 'mod'],\n    ['audio/mp4', 'mp4a'],\n    ['audio/mpeg', ['mpga', 'mp3', 'm2a', 'mp2', 'mpa', 'mpg']],\n    ['audio/mpeg3', 'mp3'],\n    ['audio/nspaudio', ['la', 'lma']],\n    ['audio/ogg', 'oga'],\n    ['audio/s3m', 's3m'],\n    ['audio/tsp-audio', 'tsi'],\n    ['audio/tsplayer', 'tsp'],\n    ['audio/vnd.dece.audio', 'uva'],\n    ['audio/vnd.digital-winds', 'eol'],\n    ['audio/vnd.dra', 'dra'],\n    ['audio/vnd.dts', 'dts'],\n    ['audio/vnd.dts.hd', 'dtshd'],\n    ['audio/vnd.lucent.voice', 'lvp'],\n    ['audio/vnd.ms-playready.media.pya', 'pya'],\n    ['audio/vnd.nuera.ecelp4800', 'ecelp4800'],\n    ['audio/vnd.nuera.ecelp7470', 'ecelp7470'],\n    ['audio/vnd.nuera.ecelp9600', 'ecelp9600'],\n    ['audio/vnd.qcelp', 'qcp'],\n    ['audio/vnd.rip', 'rip'],\n    ['audio/voc', 'voc'],\n    ['audio/voxware', 'vox'],\n    ['audio/wav', 'wav'],\n    ['audio/webm', 'weba'],\n    ['audio/x-aac', 'aac'],\n    ['audio/x-adpcm', 'snd'],\n    ['audio/x-aiff', ['aiff', 'aif', 'aifc']],\n    ['audio/x-au', 'au'],\n    ['audio/x-gsm', ['gsd', 'gsm']],\n    ['audio/x-jam', 'jam'],\n    ['audio/x-liveaudio', 'lam'],\n    ['audio/x-mid', ['mid', 'midi']],\n    ['audio/x-midi', ['midi', 'mid']],\n    ['audio/x-mod', 'mod'],\n    ['audio/x-mpeg', 'mp2'],\n    ['audio/x-mpeg-3', 'mp3'],\n    ['audio/x-mpegurl', 'm3u'],\n    ['audio/x-mpequrl', 'm3u'],\n    ['audio/x-ms-wax', 'wax'],\n    ['audio/x-ms-wma', 'wma'],\n    ['audio/x-nspaudio', ['la', 'lma']],\n    ['audio/x-pn-realaudio', ['ra', 'ram', 'rm', 'rmm', 'rmp']],\n    ['audio/x-pn-realaudio-plugin', ['ra', 'rmp', 'rpm']],\n    ['audio/x-psid', 'sid'],\n    ['audio/x-realaudio', 'ra'],\n    ['audio/x-twinvq', 'vqf'],\n    ['audio/x-twinvq-plugin', ['vqe', 'vql']],\n    ['audio/x-vnd.audioexplosion.mjuicemediafile', 'mjf'],\n    ['audio/x-voc', 'voc'],\n    ['audio/x-wav', 'wav'],\n    ['audio/xm', 'xm'],\n    ['chemical/x-cdx', 'cdx'],\n    ['chemical/x-cif', 'cif'],\n    ['chemical/x-cmdf', 'cmdf'],\n    ['chemical/x-cml', 'cml'],\n    ['chemical/x-csml', 'csml'],\n    ['chemical/x-pdb', ['pdb', 'xyz']],\n    ['chemical/x-xyz', 'xyz'],\n    ['drawing/x-dwf', 'dwf'],\n    ['i-world/i-vrml', 'ivr'],\n    ['image/bmp', ['bmp', 'bm']],\n    ['image/cgm', 'cgm'],\n    ['image/cis-cod', 'cod'],\n    ['image/cmu-raster', ['ras', 'rast']],\n    ['image/fif', 'fif'],\n    ['image/florian', ['flo', 'turbot']],\n    ['image/g3fax', 'g3'],\n    ['image/gif', 'gif'],\n    ['image/ief', ['ief', 'iefs']],\n    ['image/jpeg', ['jpeg', 'jpe', 'jpg', 'jfif', 'jfif-tbnl']],\n    ['image/jutvision', 'jut'],\n    ['image/ktx', 'ktx'],\n    ['image/naplps', ['nap', 'naplps']],\n    ['image/pict', ['pic', 'pict']],\n    ['image/pipeg', 'jfif'],\n    ['image/pjpeg', ['jfif', 'jpe', 'jpeg', 'jpg']],\n    ['image/png', ['png', 'x-png']],\n    ['image/prs.btif', 'btif'],\n    ['image/svg+xml', 'svg'],\n    ['image/tiff', ['tif', 'tiff']],\n    ['image/vasa', 'mcf'],\n    ['image/vnd.adobe.photoshop', 'psd'],\n    ['image/vnd.dece.graphic', 'uvi'],\n    ['image/vnd.djvu', 'djvu'],\n    ['image/vnd.dvb.subtitle', 'sub'],\n    ['image/vnd.dwg', ['dwg', 'dxf', 'svf']],\n    ['image/vnd.dxf', 'dxf'],\n    ['image/vnd.fastbidsheet', 'fbs'],\n    ['image/vnd.fpx', 'fpx'],\n    ['image/vnd.fst', 'fst'],\n    ['image/vnd.fujixerox.edmics-mmr', 'mmr'],\n    ['image/vnd.fujixerox.edmics-rlc', 'rlc'],\n    ['image/vnd.ms-modi', 'mdi'],\n    ['image/vnd.net-fpx', ['fpx', 'npx']],\n    ['image/vnd.rn-realflash', 'rf'],\n    ['image/vnd.rn-realpix', 'rp'],\n    ['image/vnd.wap.wbmp', 'wbmp'],\n    ['image/vnd.xiff', 'xif'],\n    ['image/webp', 'webp'],\n    ['image/x-cmu-raster', 'ras'],\n    ['image/x-cmx', 'cmx'],\n    ['image/x-dwg', ['dwg', 'dxf', 'svf']],\n    ['image/x-freehand', 'fh'],\n    ['image/x-icon', 'ico'],\n    ['image/x-jg', 'art'],\n    ['image/x-jps', 'jps'],\n    ['image/x-niff', ['niff', 'nif']],\n    ['image/x-pcx', 'pcx'],\n    ['image/x-pict', ['pct', 'pic']],\n    ['image/x-portable-anymap', 'pnm'],\n    ['image/x-portable-bitmap', 'pbm'],\n    ['image/x-portable-graymap', 'pgm'],\n    ['image/x-portable-greymap', 'pgm'],\n    ['image/x-portable-pixmap', 'ppm'],\n    ['image/x-quicktime', ['qif', 'qti', 'qtif']],\n    ['image/x-rgb', 'rgb'],\n    ['image/x-tiff', ['tif', 'tiff']],\n    ['image/x-windows-bmp', 'bmp'],\n    ['image/x-xbitmap', 'xbm'],\n    ['image/x-xbm', 'xbm'],\n    ['image/x-xpixmap', ['xpm', 'pm']],\n    ['image/x-xwd', 'xwd'],\n    ['image/x-xwindowdump', 'xwd'],\n    ['image/xbm', 'xbm'],\n    ['image/xpm', 'xpm'],\n    ['message/rfc822', ['eml', 'mht', 'mhtml', 'nws', 'mime']],\n    ['model/iges', ['iges', 'igs']],\n    ['model/mesh', 'msh'],\n    ['model/vnd.collada+xml', 'dae'],\n    ['model/vnd.dwf', 'dwf'],\n    ['model/vnd.gdl', 'gdl'],\n    ['model/vnd.gtw', 'gtw'],\n    ['model/vnd.mts', 'mts'],\n    ['model/vnd.vtu', 'vtu'],\n    ['model/vrml', ['vrml', 'wrl', 'wrz']],\n    ['model/x-pov', 'pov'],\n    ['multipart/x-gzip', 'gzip'],\n    ['multipart/x-ustar', 'ustar'],\n    ['multipart/x-zip', 'zip'],\n    ['music/crescendo', ['mid', 'midi']],\n    ['music/x-karaoke', 'kar'],\n    ['paleovu/x-pv', 'pvu'],\n    ['text/asp', 'asp'],\n    ['text/calendar', 'ics'],\n    ['text/css', 'css'],\n    ['text/csv', 'csv'],\n    ['text/ecmascript', 'js'],\n    ['text/h323', '323'],\n    ['text/html', ['html', 'htm', 'stm', 'acgi', 'htmls', 'htx', 'shtml']],\n    ['text/iuls', 'uls'],\n    ['text/javascript', 'js'],\n    ['text/mcf', 'mcf'],\n    ['text/n3', 'n3'],\n    ['text/pascal', 'pas'],\n    [\n        'text/plain',\n        [\n            'txt',\n            'bas',\n            'c',\n            'h',\n            'c++',\n            'cc',\n            'com',\n            'conf',\n            'cxx',\n            'def',\n            'f',\n            'f90',\n            'for',\n            'g',\n            'hh',\n            'idc',\n            'jav',\n            'java',\n            'list',\n            'log',\n            'lst',\n            'm',\n            'mar',\n            'pl',\n            'sdml',\n            'text'\n        ]\n    ],\n    ['text/plain-bas', 'par'],\n    ['text/prs.lines.tag', 'dsc'],\n    ['text/richtext', ['rtx', 'rt', 'rtf']],\n    ['text/scriplet', 'wsc'],\n    ['text/scriptlet', 'sct'],\n    ['text/sgml', ['sgm', 'sgml']],\n    ['text/tab-separated-values', 'tsv'],\n    ['text/troff', 't'],\n    ['text/turtle', 'ttl'],\n    ['text/uri-list', ['uni', 'unis', 'uri', 'uris']],\n    ['text/vnd.abc', 'abc'],\n    ['text/vnd.curl', 'curl'],\n    ['text/vnd.curl.dcurl', 'dcurl'],\n    ['text/vnd.curl.mcurl', 'mcurl'],\n    ['text/vnd.curl.scurl', 'scurl'],\n    ['text/vnd.fly', 'fly'],\n    ['text/vnd.fmi.flexstor', 'flx'],\n    ['text/vnd.graphviz', 'gv'],\n    ['text/vnd.in3d.3dml', '3dml'],\n    ['text/vnd.in3d.spot', 'spot'],\n    ['text/vnd.rn-realtext', 'rt'],\n    ['text/vnd.sun.j2me.app-descriptor', 'jad'],\n    ['text/vnd.wap.wml', 'wml'],\n    ['text/vnd.wap.wmlscript', 'wmls'],\n    ['text/webviewhtml', 'htt'],\n    ['text/x-asm', ['asm', 's']],\n    ['text/x-audiosoft-intra', 'aip'],\n    ['text/x-c', ['c', 'cc', 'cpp']],\n    ['text/x-component', 'htc'],\n    ['text/x-fortran', ['for', 'f', 'f77', 'f90']],\n    ['text/x-h', ['h', 'hh']],\n    ['text/x-java-source', ['java', 'jav']],\n    ['text/x-java-source,java', 'java'],\n    ['text/x-la-asf', 'lsx'],\n    ['text/x-m', 'm'],\n    ['text/x-pascal', 'p'],\n    ['text/x-script', 'hlb'],\n    ['text/x-script.csh', 'csh'],\n    ['text/x-script.elisp', 'el'],\n    ['text/x-script.guile', 'scm'],\n    ['text/x-script.ksh', 'ksh'],\n    ['text/x-script.lisp', 'lsp'],\n    ['text/x-script.perl', 'pl'],\n    ['text/x-script.perl-module', 'pm'],\n    ['text/x-script.phyton', 'py'],\n    ['text/x-script.rexx', 'rexx'],\n    ['text/x-script.scheme', 'scm'],\n    ['text/x-script.sh', 'sh'],\n    ['text/x-script.tcl', 'tcl'],\n    ['text/x-script.tcsh', 'tcsh'],\n    ['text/x-script.zsh', 'zsh'],\n    ['text/x-server-parsed-html', ['shtml', 'ssi']],\n    ['text/x-setext', 'etx'],\n    ['text/x-sgml', ['sgm', 'sgml']],\n    ['text/x-speech', ['spc', 'talk']],\n    ['text/x-uil', 'uil'],\n    ['text/x-uuencode', ['uu', 'uue']],\n    ['text/x-vcalendar', 'vcs'],\n    ['text/x-vcard', 'vcf'],\n    ['text/xml', 'xml'],\n    ['video/3gpp', '3gp'],\n    ['video/3gpp2', '3g2'],\n    ['video/animaflex', 'afl'],\n    ['video/avi', 'avi'],\n    ['video/avs-video', 'avs'],\n    ['video/dl', 'dl'],\n    ['video/fli', 'fli'],\n    ['video/gl', 'gl'],\n    ['video/h261', 'h261'],\n    ['video/h263', 'h263'],\n    ['video/h264', 'h264'],\n    ['video/jpeg', 'jpgv'],\n    ['video/jpm', 'jpm'],\n    ['video/mj2', 'mj2'],\n    ['video/mp4', 'mp4'],\n    ['video/mpeg', ['mpeg', 'mp2', 'mpa', 'mpe', 'mpg', 'mpv2', 'm1v', 'm2v', 'mp3']],\n    ['video/msvideo', 'avi'],\n    ['video/ogg', 'ogv'],\n    ['video/quicktime', ['mov', 'qt', 'moov']],\n    ['video/vdo', 'vdo'],\n    ['video/vivo', ['viv', 'vivo']],\n    ['video/vnd.dece.hd', 'uvh'],\n    ['video/vnd.dece.mobile', 'uvm'],\n    ['video/vnd.dece.pd', 'uvp'],\n    ['video/vnd.dece.sd', 'uvs'],\n    ['video/vnd.dece.video', 'uvv'],\n    ['video/vnd.fvt', 'fvt'],\n    ['video/vnd.mpegurl', 'mxu'],\n    ['video/vnd.ms-playready.media.pyv', 'pyv'],\n    ['video/vnd.rn-realvideo', 'rv'],\n    ['video/vnd.uvvu.mp4', 'uvu'],\n    ['video/vnd.vivo', ['viv', 'vivo']],\n    ['video/vosaic', 'vos'],\n    ['video/webm', 'webm'],\n    ['video/x-amt-demorun', 'xdr'],\n    ['video/x-amt-showrun', 'xsr'],\n    ['video/x-atomic3d-feature', 'fmf'],\n    ['video/x-dl', 'dl'],\n    ['video/x-dv', ['dif', 'dv']],\n    ['video/x-f4v', 'f4v'],\n    ['video/x-fli', 'fli'],\n    ['video/x-flv', 'flv'],\n    ['video/x-gl', 'gl'],\n    ['video/x-isvideo', 'isu'],\n    ['video/x-la-asf', ['lsf', 'lsx']],\n    ['video/x-m4v', 'm4v'],\n    ['video/x-motion-jpeg', 'mjpg'],\n    ['video/x-mpeg', ['mp3', 'mp2']],\n    ['video/x-mpeq2a', 'mp2'],\n    ['video/x-ms-asf', ['asf', 'asr', 'asx']],\n    ['video/x-ms-asf-plugin', 'asx'],\n    ['video/x-ms-wm', 'wm'],\n    ['video/x-ms-wmv', 'wmv'],\n    ['video/x-ms-wmx', 'wmx'],\n    ['video/x-ms-wvx', 'wvx'],\n    ['video/x-msvideo', 'avi'],\n    ['video/x-qtc', 'qtc'],\n    ['video/x-scm', 'scm'],\n    ['video/x-sgi-movie', ['movie', 'mv']],\n    ['windows/metafile', 'wmf'],\n    ['www/mime', 'mime'],\n    ['x-conference/x-cooltalk', 'ice'],\n    ['x-music/x-midi', ['mid', 'midi']],\n    ['x-world/x-3dmf', ['3dm', '3dmf', 'qd3', 'qd3d']],\n    ['x-world/x-svr', 'svr'],\n    ['x-world/x-vrml', ['flr', 'vrml', 'wrl', 'wrz', 'xaf', 'xof']],\n    ['x-world/x-vrt', 'vrt'],\n    ['xgl/drawing', 'xgz'],\n    ['xgl/movie', 'xmz']\n]);\nconst extensions = new Map([\n    ['123', 'application/vnd.lotus-1-2-3'],\n    ['323', 'text/h323'],\n    ['*', 'application/octet-stream'],\n    ['3dm', 'x-world/x-3dmf'],\n    ['3dmf', 'x-world/x-3dmf'],\n    ['3dml', 'text/vnd.in3d.3dml'],\n    ['3g2', 'video/3gpp2'],\n    ['3gp', 'video/3gpp'],\n    ['7z', 'application/x-7z-compressed'],\n    ['a', 'application/octet-stream'],\n    ['aab', 'application/x-authorware-bin'],\n    ['aac', 'audio/x-aac'],\n    ['aam', 'application/x-authorware-map'],\n    ['aas', 'application/x-authorware-seg'],\n    ['abc', 'text/vnd.abc'],\n    ['abw', 'application/x-abiword'],\n    ['ac', 'application/pkix-attr-cert'],\n    ['acc', 'application/vnd.americandynamics.acc'],\n    ['ace', 'application/x-ace-compressed'],\n    ['acgi', 'text/html'],\n    ['acu', 'application/vnd.acucobol'],\n    ['acx', 'application/internet-property-stream'],\n    ['adp', 'audio/adpcm'],\n    ['aep', 'application/vnd.audiograph'],\n    ['afl', 'video/animaflex'],\n    ['afp', 'application/vnd.ibm.modcap'],\n    ['ahead', 'application/vnd.ahead.space'],\n    ['ai', 'application/postscript'],\n    ['aif', ['audio/aiff', 'audio/x-aiff']],\n    ['aifc', ['audio/aiff', 'audio/x-aiff']],\n    ['aiff', ['audio/aiff', 'audio/x-aiff']],\n    ['aim', 'application/x-aim'],\n    ['aip', 'text/x-audiosoft-intra'],\n    ['air', 'application/vnd.adobe.air-application-installer-package+zip'],\n    ['ait', 'application/vnd.dvb.ait'],\n    ['ami', 'application/vnd.amiga.ami'],\n    ['ani', 'application/x-navi-animation'],\n    ['aos', 'application/x-nokia-9000-communicator-add-on-software'],\n    ['apk', 'application/vnd.android.package-archive'],\n    ['application', 'application/x-ms-application'],\n    ['apr', 'application/vnd.lotus-approach'],\n    ['aps', 'application/mime'],\n    ['arc', 'application/octet-stream'],\n    ['arj', ['application/arj', 'application/octet-stream']],\n    ['art', 'image/x-jg'],\n    ['asf', 'video/x-ms-asf'],\n    ['asm', 'text/x-asm'],\n    ['aso', 'application/vnd.accpac.simply.aso'],\n    ['asp', 'text/asp'],\n    ['asr', 'video/x-ms-asf'],\n    ['asx', ['video/x-ms-asf', 'application/x-mplayer2', 'video/x-ms-asf-plugin']],\n    ['atc', 'application/vnd.acucorp'],\n    ['atomcat', 'application/atomcat+xml'],\n    ['atomsvc', 'application/atomsvc+xml'],\n    ['atx', 'application/vnd.antix.game-component'],\n    ['au', ['audio/basic', 'audio/x-au']],\n    ['avi', ['video/avi', 'video/msvideo', 'application/x-troff-msvideo', 'video/x-msvideo']],\n    ['avs', 'video/avs-video'],\n    ['aw', 'application/applixware'],\n    ['axs', 'application/olescript'],\n    ['azf', 'application/vnd.airzip.filesecure.azf'],\n    ['azs', 'application/vnd.airzip.filesecure.azs'],\n    ['azw', 'application/vnd.amazon.ebook'],\n    ['bas', 'text/plain'],\n    ['bcpio', 'application/x-bcpio'],\n    ['bdf', 'application/x-font-bdf'],\n    ['bdm', 'application/vnd.syncml.dm+wbxml'],\n    ['bed', 'application/vnd.realvnc.bed'],\n    ['bh2', 'application/vnd.fujitsu.oasysprs'],\n    ['bin', ['application/octet-stream', 'application/mac-binary', 'application/macbinary', 'application/x-macbinary', 'application/x-binary']],\n    ['bm', 'image/bmp'],\n    ['bmi', 'application/vnd.bmi'],\n    ['bmp', ['image/bmp', 'image/x-windows-bmp']],\n    ['boo', 'application/book'],\n    ['book', 'application/book'],\n    ['box', 'application/vnd.previewsystems.box'],\n    ['boz', 'application/x-bzip2'],\n    ['bsh', 'application/x-bsh'],\n    ['btif', 'image/prs.btif'],\n    ['bz', 'application/x-bzip'],\n    ['bz2', 'application/x-bzip2'],\n    ['c', ['text/plain', 'text/x-c']],\n    ['c++', 'text/plain'],\n    ['c11amc', 'application/vnd.cluetrust.cartomobile-config'],\n    ['c11amz', 'application/vnd.cluetrust.cartomobile-config-pkg'],\n    ['c4g', 'application/vnd.clonk.c4group'],\n    ['cab', 'application/vnd.ms-cab-compressed'],\n    ['car', 'application/vnd.curl.car'],\n    ['cat', ['application/vnd.ms-pkiseccat', 'application/vnd.ms-pki.seccat']],\n    ['cc', ['text/plain', 'text/x-c']],\n    ['ccad', 'application/clariscad'],\n    ['cco', 'application/x-cocoa'],\n    ['ccxml', 'application/ccxml+xml,'],\n    ['cdbcmsg', 'application/vnd.contact.cmsg'],\n    ['cdf', ['application/cdf', 'application/x-cdf', 'application/x-netcdf']],\n    ['cdkey', 'application/vnd.mediastation.cdkey'],\n    ['cdmia', 'application/cdmi-capability'],\n    ['cdmic', 'application/cdmi-container'],\n    ['cdmid', 'application/cdmi-domain'],\n    ['cdmio', 'application/cdmi-object'],\n    ['cdmiq', 'application/cdmi-queue'],\n    ['cdx', 'chemical/x-cdx'],\n    ['cdxml', 'application/vnd.chemdraw+xml'],\n    ['cdy', 'application/vnd.cinderella'],\n    ['cer', ['application/pkix-cert', 'application/x-x509-ca-cert']],\n    ['cgm', 'image/cgm'],\n    ['cha', 'application/x-chat'],\n    ['chat', 'application/x-chat'],\n    ['chm', 'application/vnd.ms-htmlhelp'],\n    ['chrt', 'application/vnd.kde.kchart'],\n    ['cif', 'chemical/x-cif'],\n    ['cii', 'application/vnd.anser-web-certificate-issue-initiation'],\n    ['cil', 'application/vnd.ms-artgalry'],\n    ['cla', 'application/vnd.claymore'],\n    ['class', ['application/octet-stream', 'application/java', 'application/java-byte-code', 'application/java-vm', 'application/x-java-class']],\n    ['clkk', 'application/vnd.crick.clicker.keyboard'],\n    ['clkp', 'application/vnd.crick.clicker.palette'],\n    ['clkt', 'application/vnd.crick.clicker.template'],\n    ['clkw', 'application/vnd.crick.clicker.wordbank'],\n    ['clkx', 'application/vnd.crick.clicker'],\n    ['clp', 'application/x-msclip'],\n    ['cmc', 'application/vnd.cosmocaller'],\n    ['cmdf', 'chemical/x-cmdf'],\n    ['cml', 'chemical/x-cml'],\n    ['cmp', 'application/vnd.yellowriver-custom-menu'],\n    ['cmx', 'image/x-cmx'],\n    ['cod', ['image/cis-cod', 'application/vnd.rim.cod']],\n    ['com', ['application/octet-stream', 'text/plain']],\n    ['conf', 'text/plain'],\n    ['cpio', 'application/x-cpio'],\n    ['cpp', 'text/x-c'],\n    ['cpt', ['application/mac-compactpro', 'application/x-compactpro', 'application/x-cpt']],\n    ['crd', 'application/x-mscardfile'],\n    ['crl', ['application/pkix-crl', 'application/pkcs-crl']],\n    ['crt', ['application/pkix-cert', 'application/x-x509-user-cert', 'application/x-x509-ca-cert']],\n    ['cryptonote', 'application/vnd.rig.cryptonote'],\n    ['csh', ['text/x-script.csh', 'application/x-csh']],\n    ['csml', 'chemical/x-csml'],\n    ['csp', 'application/vnd.commonspace'],\n    ['css', ['text/css', 'application/x-pointplus']],\n    ['csv', 'text/csv'],\n    ['cu', 'application/cu-seeme'],\n    ['curl', 'text/vnd.curl'],\n    ['cww', 'application/prs.cww'],\n    ['cxx', 'text/plain'],\n    ['dae', 'model/vnd.collada+xml'],\n    ['daf', 'application/vnd.mobius.daf'],\n    ['davmount', 'application/davmount+xml'],\n    ['dcr', 'application/x-director'],\n    ['dcurl', 'text/vnd.curl.dcurl'],\n    ['dd2', 'application/vnd.oma.dd2+xml'],\n    ['ddd', 'application/vnd.fujixerox.ddd'],\n    ['deb', 'application/x-debian-package'],\n    ['deepv', 'application/x-deepv'],\n    ['def', 'text/plain'],\n    ['der', 'application/x-x509-ca-cert'],\n    ['dfac', 'application/vnd.dreamfactory'],\n    ['dif', 'video/x-dv'],\n    ['dir', 'application/x-director'],\n    ['dis', 'application/vnd.mobius.dis'],\n    ['djvu', 'image/vnd.djvu'],\n    ['dl', ['video/dl', 'video/x-dl']],\n    ['dll', 'application/x-msdownload'],\n    ['dms', 'application/octet-stream'],\n    ['dna', 'application/vnd.dna'],\n    ['doc', 'application/msword'],\n    ['docm', 'application/vnd.ms-word.document.macroenabled.12'],\n    ['docx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'],\n    ['dot', 'application/msword'],\n    ['dotm', 'application/vnd.ms-word.template.macroenabled.12'],\n    ['dotx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.template'],\n    ['dp', ['application/commonground', 'application/vnd.osgi.dp']],\n    ['dpg', 'application/vnd.dpgraph'],\n    ['dra', 'audio/vnd.dra'],\n    ['drw', 'application/drafting'],\n    ['dsc', 'text/prs.lines.tag'],\n    ['dssc', 'application/dssc+der'],\n    ['dtb', 'application/x-dtbook+xml'],\n    ['dtd', 'application/xml-dtd'],\n    ['dts', 'audio/vnd.dts'],\n    ['dtshd', 'audio/vnd.dts.hd'],\n    ['dump', 'application/octet-stream'],\n    ['dv', 'video/x-dv'],\n    ['dvi', 'application/x-dvi'],\n    ['dwf', ['model/vnd.dwf', 'drawing/x-dwf']],\n    ['dwg', ['application/acad', 'image/vnd.dwg', 'image/x-dwg']],\n    ['dxf', ['application/dxf', 'image/vnd.dwg', 'image/vnd.dxf', 'image/x-dwg']],\n    ['dxp', 'application/vnd.spotfire.dxp'],\n    ['dxr', 'application/x-director'],\n    ['ecelp4800', 'audio/vnd.nuera.ecelp4800'],\n    ['ecelp7470', 'audio/vnd.nuera.ecelp7470'],\n    ['ecelp9600', 'audio/vnd.nuera.ecelp9600'],\n    ['edm', 'application/vnd.novadigm.edm'],\n    ['edx', 'application/vnd.novadigm.edx'],\n    ['efif', 'application/vnd.picsel'],\n    ['ei6', 'application/vnd.pg.osasli'],\n    ['el', 'text/x-script.elisp'],\n    ['elc', ['application/x-elc', 'application/x-bytecode.elisp']],\n    ['eml', 'message/rfc822'],\n    ['emma', 'application/emma+xml'],\n    ['env', 'application/x-envoy'],\n    ['eol', 'audio/vnd.digital-winds'],\n    ['eot', 'application/vnd.ms-fontobject'],\n    ['eps', 'application/postscript'],\n    ['epub', 'application/epub+zip'],\n    ['es', ['application/ecmascript', 'application/x-esrehber']],\n    ['es3', 'application/vnd.eszigno3+xml'],\n    ['esf', 'application/vnd.epson.esf'],\n    ['etx', 'text/x-setext'],\n    ['evy', ['application/envoy', 'application/x-envoy']],\n    ['exe', ['application/octet-stream', 'application/x-msdownload']],\n    ['exi', 'application/exi'],\n    ['ext', 'application/vnd.novadigm.ext'],\n    ['ez2', 'application/vnd.ezpix-album'],\n    ['ez3', 'application/vnd.ezpix-package'],\n    ['f', ['text/plain', 'text/x-fortran']],\n    ['f4v', 'video/x-f4v'],\n    ['f77', 'text/x-fortran'],\n    ['f90', ['text/plain', 'text/x-fortran']],\n    ['fbs', 'image/vnd.fastbidsheet'],\n    ['fcs', 'application/vnd.isac.fcs'],\n    ['fdf', 'application/vnd.fdf'],\n    ['fe_launch', 'application/vnd.denovo.fcselayout-link'],\n    ['fg5', 'application/vnd.fujitsu.oasysgp'],\n    ['fh', 'image/x-freehand'],\n    ['fif', ['application/fractals', 'image/fif']],\n    ['fig', 'application/x-xfig'],\n    ['fli', ['video/fli', 'video/x-fli']],\n    ['flo', ['image/florian', 'application/vnd.micrografx.flo']],\n    ['flr', 'x-world/x-vrml'],\n    ['flv', 'video/x-flv'],\n    ['flw', 'application/vnd.kde.kivio'],\n    ['flx', 'text/vnd.fmi.flexstor'],\n    ['fly', 'text/vnd.fly'],\n    ['fm', 'application/vnd.framemaker'],\n    ['fmf', 'video/x-atomic3d-feature'],\n    ['fnc', 'application/vnd.frogans.fnc'],\n    ['for', ['text/plain', 'text/x-fortran']],\n    ['fpx', ['image/vnd.fpx', 'image/vnd.net-fpx']],\n    ['frl', 'application/freeloader'],\n    ['fsc', 'application/vnd.fsc.weblaunch'],\n    ['fst', 'image/vnd.fst'],\n    ['ftc', 'application/vnd.fluxtime.clip'],\n    ['fti', 'application/vnd.anser-web-funds-transfer-initiation'],\n    ['funk', 'audio/make'],\n    ['fvt', 'video/vnd.fvt'],\n    ['fxp', 'application/vnd.adobe.fxp'],\n    ['fzs', 'application/vnd.fuzzysheet'],\n    ['g', 'text/plain'],\n    ['g2w', 'application/vnd.geoplan'],\n    ['g3', 'image/g3fax'],\n    ['g3w', 'application/vnd.geospace'],\n    ['gac', 'application/vnd.groove-account'],\n    ['gdl', 'model/vnd.gdl'],\n    ['geo', 'application/vnd.dynageo'],\n    ['geojson', 'application/geo+json'],\n    ['gex', 'application/vnd.geometry-explorer'],\n    ['ggb', 'application/vnd.geogebra.file'],\n    ['ggt', 'application/vnd.geogebra.tool'],\n    ['ghf', 'application/vnd.groove-help'],\n    ['gif', 'image/gif'],\n    ['gim', 'application/vnd.groove-identity-message'],\n    ['gl', ['video/gl', 'video/x-gl']],\n    ['gmx', 'application/vnd.gmx'],\n    ['gnumeric', 'application/x-gnumeric'],\n    ['gph', 'application/vnd.flographit'],\n    ['gqf', 'application/vnd.grafeq'],\n    ['gram', 'application/srgs'],\n    ['grv', 'application/vnd.groove-injector'],\n    ['grxml', 'application/srgs+xml'],\n    ['gsd', 'audio/x-gsm'],\n    ['gsf', 'application/x-font-ghostscript'],\n    ['gsm', 'audio/x-gsm'],\n    ['gsp', 'application/x-gsp'],\n    ['gss', 'application/x-gss'],\n    ['gtar', 'application/x-gtar'],\n    ['gtm', 'application/vnd.groove-tool-message'],\n    ['gtw', 'model/vnd.gtw'],\n    ['gv', 'text/vnd.graphviz'],\n    ['gxt', 'application/vnd.geonext'],\n    ['gz', ['application/x-gzip', 'application/x-compressed']],\n    ['gzip', ['multipart/x-gzip', 'application/x-gzip']],\n    ['h', ['text/plain', 'text/x-h']],\n    ['h261', 'video/h261'],\n    ['h263', 'video/h263'],\n    ['h264', 'video/h264'],\n    ['hal', 'application/vnd.hal+xml'],\n    ['hbci', 'application/vnd.hbci'],\n    ['hdf', 'application/x-hdf'],\n    ['help', 'application/x-helpfile'],\n    ['hgl', 'application/vnd.hp-hpgl'],\n    ['hh', ['text/plain', 'text/x-h']],\n    ['hlb', 'text/x-script'],\n    ['hlp', ['application/winhlp', 'application/hlp', 'application/x-helpfile', 'application/x-winhelp']],\n    ['hpg', 'application/vnd.hp-hpgl'],\n    ['hpgl', 'application/vnd.hp-hpgl'],\n    ['hpid', 'application/vnd.hp-hpid'],\n    ['hps', 'application/vnd.hp-hps'],\n    [\n        'hqx',\n        [\n            'application/mac-binhex40',\n            'application/binhex',\n            'application/binhex4',\n            'application/mac-binhex',\n            'application/x-binhex40',\n            'application/x-mac-binhex40'\n        ]\n    ],\n    ['hta', 'application/hta'],\n    ['htc', 'text/x-component'],\n    ['htke', 'application/vnd.kenameaapp'],\n    ['htm', 'text/html'],\n    ['html', 'text/html'],\n    ['htmls', 'text/html'],\n    ['htt', 'text/webviewhtml'],\n    ['htx', 'text/html'],\n    ['hvd', 'application/vnd.yamaha.hv-dic'],\n    ['hvp', 'application/vnd.yamaha.hv-voice'],\n    ['hvs', 'application/vnd.yamaha.hv-script'],\n    ['i2g', 'application/vnd.intergeo'],\n    ['icc', 'application/vnd.iccprofile'],\n    ['ice', 'x-conference/x-cooltalk'],\n    ['ico', 'image/x-icon'],\n    ['ics', 'text/calendar'],\n    ['idc', 'text/plain'],\n    ['ief', 'image/ief'],\n    ['iefs', 'image/ief'],\n    ['ifm', 'application/vnd.shana.informed.formdata'],\n    ['iges', ['application/iges', 'model/iges']],\n    ['igl', 'application/vnd.igloader'],\n    ['igm', 'application/vnd.insors.igm'],\n    ['igs', ['application/iges', 'model/iges']],\n    ['igx', 'application/vnd.micrografx.igx'],\n    ['iif', 'application/vnd.shana.informed.interchange'],\n    ['iii', 'application/x-iphone'],\n    ['ima', 'application/x-ima'],\n    ['imap', 'application/x-httpd-imap'],\n    ['imp', 'application/vnd.accpac.simply.imp'],\n    ['ims', 'application/vnd.ms-ims'],\n    ['inf', 'application/inf'],\n    ['ins', ['application/x-internet-signup', 'application/x-internett-signup']],\n    ['ip', 'application/x-ip2'],\n    ['ipfix', 'application/ipfix'],\n    ['ipk', 'application/vnd.shana.informed.package'],\n    ['irm', 'application/vnd.ibm.rights-management'],\n    ['irp', 'application/vnd.irepository.package+xml'],\n    ['isp', 'application/x-internet-signup'],\n    ['isu', 'video/x-isvideo'],\n    ['it', 'audio/it'],\n    ['itp', 'application/vnd.shana.informed.formtemplate'],\n    ['iv', 'application/x-inventor'],\n    ['ivp', 'application/vnd.immervision-ivp'],\n    ['ivr', 'i-world/i-vrml'],\n    ['ivu', 'application/vnd.immervision-ivu'],\n    ['ivy', 'application/x-livescreen'],\n    ['jad', 'text/vnd.sun.j2me.app-descriptor'],\n    ['jam', ['application/vnd.jam', 'audio/x-jam']],\n    ['jar', 'application/java-archive'],\n    ['jav', ['text/plain', 'text/x-java-source']],\n    ['java', ['text/plain', 'text/x-java-source,java', 'text/x-java-source']],\n    ['jcm', 'application/x-java-commerce'],\n    ['jfif', ['image/pipeg', 'image/jpeg', 'image/pjpeg']],\n    ['jfif-tbnl', 'image/jpeg'],\n    ['jisp', 'application/vnd.jisp'],\n    ['jlt', 'application/vnd.hp-jlyt'],\n    ['jnlp', 'application/x-java-jnlp-file'],\n    ['joda', 'application/vnd.joost.joda-archive'],\n    ['jpe', ['image/jpeg', 'image/pjpeg']],\n    ['jpeg', ['image/jpeg', 'image/pjpeg']],\n    ['jpg', ['image/jpeg', 'image/pjpeg']],\n    ['jpgv', 'video/jpeg'],\n    ['jpm', 'video/jpm'],\n    ['jps', 'image/x-jps'],\n    ['js', ['application/javascript', 'application/ecmascript', 'text/javascript', 'text/ecmascript', 'application/x-javascript']],\n    ['json', 'application/json'],\n    ['jut', 'image/jutvision'],\n    ['kar', ['audio/midi', 'music/x-karaoke']],\n    ['karbon', 'application/vnd.kde.karbon'],\n    ['kfo', 'application/vnd.kde.kformula'],\n    ['kia', 'application/vnd.kidspiration'],\n    ['kml', 'application/vnd.google-earth.kml+xml'],\n    ['kmz', 'application/vnd.google-earth.kmz'],\n    ['kne', 'application/vnd.kinar'],\n    ['kon', 'application/vnd.kde.kontour'],\n    ['kpr', 'application/vnd.kde.kpresenter'],\n    ['ksh', ['application/x-ksh', 'text/x-script.ksh']],\n    ['ksp', 'application/vnd.kde.kspread'],\n    ['ktx', 'image/ktx'],\n    ['ktz', 'application/vnd.kahootz'],\n    ['kwd', 'application/vnd.kde.kword'],\n    ['la', ['audio/nspaudio', 'audio/x-nspaudio']],\n    ['lam', 'audio/x-liveaudio'],\n    ['lasxml', 'application/vnd.las.las+xml'],\n    ['latex', 'application/x-latex'],\n    ['lbd', 'application/vnd.llamagraphics.life-balance.desktop'],\n    ['lbe', 'application/vnd.llamagraphics.life-balance.exchange+xml'],\n    ['les', 'application/vnd.hhe.lesson-player'],\n    ['lha', ['application/octet-stream', 'application/lha', 'application/x-lha']],\n    ['lhx', 'application/octet-stream'],\n    ['link66', 'application/vnd.route66.link66+xml'],\n    ['list', 'text/plain'],\n    ['lma', ['audio/nspaudio', 'audio/x-nspaudio']],\n    ['log', 'text/plain'],\n    ['lrm', 'application/vnd.ms-lrm'],\n    ['lsf', 'video/x-la-asf'],\n    ['lsp', ['application/x-lisp', 'text/x-script.lisp']],\n    ['lst', 'text/plain'],\n    ['lsx', ['video/x-la-asf', 'text/x-la-asf']],\n    ['ltf', 'application/vnd.frogans.ltf'],\n    ['ltx', 'application/x-latex'],\n    ['lvp', 'audio/vnd.lucent.voice'],\n    ['lwp', 'application/vnd.lotus-wordpro'],\n    ['lzh', ['application/octet-stream', 'application/x-lzh']],\n    ['lzx', ['application/lzx', 'application/octet-stream', 'application/x-lzx']],\n    ['m', ['text/plain', 'text/x-m']],\n    ['m13', 'application/x-msmediaview'],\n    ['m14', 'application/x-msmediaview'],\n    ['m1v', 'video/mpeg'],\n    ['m21', 'application/mp21'],\n    ['m2a', 'audio/mpeg'],\n    ['m2v', 'video/mpeg'],\n    ['m3u', ['audio/x-mpegurl', 'audio/x-mpequrl']],\n    ['m3u8', 'application/vnd.apple.mpegurl'],\n    ['m4v', 'video/x-m4v'],\n    ['ma', 'application/mathematica'],\n    ['mads', 'application/mads+xml'],\n    ['mag', 'application/vnd.ecowin.chart'],\n    ['man', 'application/x-troff-man'],\n    ['map', 'application/x-navimap'],\n    ['mar', 'text/plain'],\n    ['mathml', 'application/mathml+xml'],\n    ['mbd', 'application/mbedlet'],\n    ['mbk', 'application/vnd.mobius.mbk'],\n    ['mbox', 'application/mbox'],\n    ['mc$', 'application/x-magic-cap-package-1.0'],\n    ['mc1', 'application/vnd.medcalcdata'],\n    ['mcd', ['application/mcad', 'application/vnd.mcd', 'application/x-mathcad']],\n    ['mcf', ['image/vasa', 'text/mcf']],\n    ['mcp', 'application/netmc'],\n    ['mcurl', 'text/vnd.curl.mcurl'],\n    ['mdb', 'application/x-msaccess'],\n    ['mdi', 'image/vnd.ms-modi'],\n    ['me', 'application/x-troff-me'],\n    ['meta4', 'application/metalink4+xml'],\n    ['mets', 'application/mets+xml'],\n    ['mfm', 'application/vnd.mfmp'],\n    ['mgp', 'application/vnd.osgeo.mapguide.package'],\n    ['mgz', 'application/vnd.proteus.magazine'],\n    ['mht', 'message/rfc822'],\n    ['mhtml', 'message/rfc822'],\n    ['mid', ['audio/mid', 'audio/midi', 'music/crescendo', 'x-music/x-midi', 'audio/x-midi', 'application/x-midi', 'audio/x-mid']],\n    ['midi', ['audio/midi', 'music/crescendo', 'x-music/x-midi', 'audio/x-midi', 'application/x-midi', 'audio/x-mid']],\n    ['mif', ['application/vnd.mif', 'application/x-mif', 'application/x-frame']],\n    ['mime', ['message/rfc822', 'www/mime']],\n    ['mj2', 'video/mj2'],\n    ['mjf', 'audio/x-vnd.audioexplosion.mjuicemediafile'],\n    ['mjpg', 'video/x-motion-jpeg'],\n    ['mlp', 'application/vnd.dolby.mlp'],\n    ['mm', ['application/base64', 'application/x-meme']],\n    ['mmd', 'application/vnd.chipnuts.karaoke-mmd'],\n    ['mme', 'application/base64'],\n    ['mmf', 'application/vnd.smaf'],\n    ['mmr', 'image/vnd.fujixerox.edmics-mmr'],\n    ['mny', 'application/x-msmoney'],\n    ['mod', ['audio/mod', 'audio/x-mod']],\n    ['mods', 'application/mods+xml'],\n    ['moov', 'video/quicktime'],\n    ['mov', 'video/quicktime'],\n    ['movie', 'video/x-sgi-movie'],\n    ['mp2', ['video/mpeg', 'audio/mpeg', 'video/x-mpeg', 'audio/x-mpeg', 'video/x-mpeq2a']],\n    ['mp3', ['audio/mpeg', 'audio/mpeg3', 'video/mpeg', 'audio/x-mpeg-3', 'video/x-mpeg']],\n    ['mp4', ['video/mp4', 'application/mp4']],\n    ['mp4a', 'audio/mp4'],\n    ['mpa', ['video/mpeg', 'audio/mpeg']],\n    ['mpc', ['application/vnd.mophun.certificate', 'application/x-project']],\n    ['mpe', 'video/mpeg'],\n    ['mpeg', 'video/mpeg'],\n    ['mpg', ['video/mpeg', 'audio/mpeg']],\n    ['mpga', 'audio/mpeg'],\n    ['mpkg', 'application/vnd.apple.installer+xml'],\n    ['mpm', 'application/vnd.blueice.multipass'],\n    ['mpn', 'application/vnd.mophun.application'],\n    ['mpp', 'application/vnd.ms-project'],\n    ['mpt', 'application/x-project'],\n    ['mpv', 'application/x-project'],\n    ['mpv2', 'video/mpeg'],\n    ['mpx', 'application/x-project'],\n    ['mpy', 'application/vnd.ibm.minipay'],\n    ['mqy', 'application/vnd.mobius.mqy'],\n    ['mrc', 'application/marc'],\n    ['mrcx', 'application/marcxml+xml'],\n    ['ms', 'application/x-troff-ms'],\n    ['mscml', 'application/mediaservercontrol+xml'],\n    ['mseq', 'application/vnd.mseq'],\n    ['msf', 'application/vnd.epson.msf'],\n    ['msg', 'application/vnd.ms-outlook'],\n    ['msh', 'model/mesh'],\n    ['msl', 'application/vnd.mobius.msl'],\n    ['msty', 'application/vnd.muvee.style'],\n    ['mts', 'model/vnd.mts'],\n    ['mus', 'application/vnd.musician'],\n    ['musicxml', 'application/vnd.recordare.musicxml+xml'],\n    ['mv', 'video/x-sgi-movie'],\n    ['mvb', 'application/x-msmediaview'],\n    ['mwf', 'application/vnd.mfer'],\n    ['mxf', 'application/mxf'],\n    ['mxl', 'application/vnd.recordare.musicxml'],\n    ['mxml', 'application/xv+xml'],\n    ['mxs', 'application/vnd.triscape.mxs'],\n    ['mxu', 'video/vnd.mpegurl'],\n    ['my', 'audio/make'],\n    ['mzz', 'application/x-vnd.audioexplosion.mzz'],\n    ['n-gage', 'application/vnd.nokia.n-gage.symbian.install'],\n    ['n3', 'text/n3'],\n    ['nap', 'image/naplps'],\n    ['naplps', 'image/naplps'],\n    ['nbp', 'application/vnd.wolfram.player'],\n    ['nc', 'application/x-netcdf'],\n    ['ncm', 'application/vnd.nokia.configuration-message'],\n    ['ncx', 'application/x-dtbncx+xml'],\n    ['ngdat', 'application/vnd.nokia.n-gage.data'],\n    ['nif', 'image/x-niff'],\n    ['niff', 'image/x-niff'],\n    ['nix', 'application/x-mix-transfer'],\n    ['nlu', 'application/vnd.neurolanguage.nlu'],\n    ['nml', 'application/vnd.enliven'],\n    ['nnd', 'application/vnd.noblenet-directory'],\n    ['nns', 'application/vnd.noblenet-sealer'],\n    ['nnw', 'application/vnd.noblenet-web'],\n    ['npx', 'image/vnd.net-fpx'],\n    ['nsc', 'application/x-conference'],\n    ['nsf', 'application/vnd.lotus-notes'],\n    ['nvd', 'application/x-navidoc'],\n    ['nws', 'message/rfc822'],\n    ['o', 'application/octet-stream'],\n    ['oa2', 'application/vnd.fujitsu.oasys2'],\n    ['oa3', 'application/vnd.fujitsu.oasys3'],\n    ['oas', 'application/vnd.fujitsu.oasys'],\n    ['obd', 'application/x-msbinder'],\n    ['oda', 'application/oda'],\n    ['odb', 'application/vnd.oasis.opendocument.database'],\n    ['odc', 'application/vnd.oasis.opendocument.chart'],\n    ['odf', 'application/vnd.oasis.opendocument.formula'],\n    ['odft', 'application/vnd.oasis.opendocument.formula-template'],\n    ['odg', 'application/vnd.oasis.opendocument.graphics'],\n    ['odi', 'application/vnd.oasis.opendocument.image'],\n    ['odm', 'application/vnd.oasis.opendocument.text-master'],\n    ['odp', 'application/vnd.oasis.opendocument.presentation'],\n    ['ods', 'application/vnd.oasis.opendocument.spreadsheet'],\n    ['odt', 'application/vnd.oasis.opendocument.text'],\n    ['oga', 'audio/ogg'],\n    ['ogv', 'video/ogg'],\n    ['ogx', 'application/ogg'],\n    ['omc', 'application/x-omc'],\n    ['omcd', 'application/x-omcdatamaker'],\n    ['omcr', 'application/x-omcregerator'],\n    ['onetoc', 'application/onenote'],\n    ['opf', 'application/oebps-package+xml'],\n    ['org', 'application/vnd.lotus-organizer'],\n    ['osf', 'application/vnd.yamaha.openscoreformat'],\n    ['osfpvg', 'application/vnd.yamaha.openscoreformat.osfpvg+xml'],\n    ['otc', 'application/vnd.oasis.opendocument.chart-template'],\n    ['otf', 'application/x-font-otf'],\n    ['otg', 'application/vnd.oasis.opendocument.graphics-template'],\n    ['oth', 'application/vnd.oasis.opendocument.text-web'],\n    ['oti', 'application/vnd.oasis.opendocument.image-template'],\n    ['otp', 'application/vnd.oasis.opendocument.presentation-template'],\n    ['ots', 'application/vnd.oasis.opendocument.spreadsheet-template'],\n    ['ott', 'application/vnd.oasis.opendocument.text-template'],\n    ['oxt', 'application/vnd.openofficeorg.extension'],\n    ['p', 'text/x-pascal'],\n    ['p10', ['application/pkcs10', 'application/x-pkcs10']],\n    ['p12', ['application/pkcs-12', 'application/x-pkcs12']],\n    ['p7a', 'application/x-pkcs7-signature'],\n    ['p7b', 'application/x-pkcs7-certificates'],\n    ['p7c', ['application/pkcs7-mime', 'application/x-pkcs7-mime']],\n    ['p7m', ['application/pkcs7-mime', 'application/x-pkcs7-mime']],\n    ['p7r', 'application/x-pkcs7-certreqresp'],\n    ['p7s', ['application/pkcs7-signature', 'application/x-pkcs7-signature']],\n    ['p8', 'application/pkcs8'],\n    ['par', 'text/plain-bas'],\n    ['part', 'application/pro_eng'],\n    ['pas', 'text/pascal'],\n    ['paw', 'application/vnd.pawaafile'],\n    ['pbd', 'application/vnd.powerbuilder6'],\n    ['pbm', 'image/x-portable-bitmap'],\n    ['pcf', 'application/x-font-pcf'],\n    ['pcl', ['application/vnd.hp-pcl', 'application/x-pcl']],\n    ['pclxl', 'application/vnd.hp-pclxl'],\n    ['pct', 'image/x-pict'],\n    ['pcurl', 'application/vnd.curl.pcurl'],\n    ['pcx', 'image/x-pcx'],\n    ['pdb', ['application/vnd.palm', 'chemical/x-pdb']],\n    ['pdf', 'application/pdf'],\n    ['pfa', 'application/x-font-type1'],\n    ['pfr', 'application/font-tdpfr'],\n    ['pfunk', ['audio/make', 'audio/make.my.funk']],\n    ['pfx', 'application/x-pkcs12'],\n    ['pgm', ['image/x-portable-graymap', 'image/x-portable-greymap']],\n    ['pgn', 'application/x-chess-pgn'],\n    ['pgp', 'application/pgp-signature'],\n    ['pic', ['image/pict', 'image/x-pict']],\n    ['pict', 'image/pict'],\n    ['pkg', 'application/x-newton-compatible-pkg'],\n    ['pki', 'application/pkixcmp'],\n    ['pkipath', 'application/pkix-pkipath'],\n    ['pko', ['application/ynd.ms-pkipko', 'application/vnd.ms-pki.pko']],\n    ['pl', ['text/plain', 'text/x-script.perl']],\n    ['plb', 'application/vnd.3gpp.pic-bw-large'],\n    ['plc', 'application/vnd.mobius.plc'],\n    ['plf', 'application/vnd.pocketlearn'],\n    ['pls', 'application/pls+xml'],\n    ['plx', 'application/x-pixclscript'],\n    ['pm', ['text/x-script.perl-module', 'image/x-xpixmap']],\n    ['pm4', 'application/x-pagemaker'],\n    ['pm5', 'application/x-pagemaker'],\n    ['pma', 'application/x-perfmon'],\n    ['pmc', 'application/x-perfmon'],\n    ['pml', ['application/vnd.ctc-posml', 'application/x-perfmon']],\n    ['pmr', 'application/x-perfmon'],\n    ['pmw', 'application/x-perfmon'],\n    ['png', 'image/png'],\n    ['pnm', ['application/x-portable-anymap', 'image/x-portable-anymap']],\n    ['portpkg', 'application/vnd.macports.portpkg'],\n    ['pot', ['application/vnd.ms-powerpoint', 'application/mspowerpoint']],\n    ['potm', 'application/vnd.ms-powerpoint.template.macroenabled.12'],\n    ['potx', 'application/vnd.openxmlformats-officedocument.presentationml.template'],\n    ['pov', 'model/x-pov'],\n    ['ppa', 'application/vnd.ms-powerpoint'],\n    ['ppam', 'application/vnd.ms-powerpoint.addin.macroenabled.12'],\n    ['ppd', 'application/vnd.cups-ppd'],\n    ['ppm', 'image/x-portable-pixmap'],\n    ['pps', ['application/vnd.ms-powerpoint', 'application/mspowerpoint']],\n    ['ppsm', 'application/vnd.ms-powerpoint.slideshow.macroenabled.12'],\n    ['ppsx', 'application/vnd.openxmlformats-officedocument.presentationml.slideshow'],\n    ['ppt', ['application/vnd.ms-powerpoint', 'application/mspowerpoint', 'application/powerpoint', 'application/x-mspowerpoint']],\n    ['pptm', 'application/vnd.ms-powerpoint.presentation.macroenabled.12'],\n    ['pptx', 'application/vnd.openxmlformats-officedocument.presentationml.presentation'],\n    ['ppz', 'application/mspowerpoint'],\n    ['prc', 'application/x-mobipocket-ebook'],\n    ['pre', ['application/vnd.lotus-freelance', 'application/x-freelance']],\n    ['prf', 'application/pics-rules'],\n    ['prt', 'application/pro_eng'],\n    ['ps', 'application/postscript'],\n    ['psb', 'application/vnd.3gpp.pic-bw-small'],\n    ['psd', ['application/octet-stream', 'image/vnd.adobe.photoshop']],\n    ['psf', 'application/x-font-linux-psf'],\n    ['pskcxml', 'application/pskc+xml'],\n    ['ptid', 'application/vnd.pvi.ptid1'],\n    ['pub', 'application/x-mspublisher'],\n    ['pvb', 'application/vnd.3gpp.pic-bw-var'],\n    ['pvu', 'paleovu/x-pv'],\n    ['pwn', 'application/vnd.3m.post-it-notes'],\n    ['pwz', 'application/vnd.ms-powerpoint'],\n    ['py', 'text/x-script.phyton'],\n    ['pya', 'audio/vnd.ms-playready.media.pya'],\n    ['pyc', 'application/x-bytecode.python'],\n    ['pyv', 'video/vnd.ms-playready.media.pyv'],\n    ['qam', 'application/vnd.epson.quickanime'],\n    ['qbo', 'application/vnd.intu.qbo'],\n    ['qcp', 'audio/vnd.qcelp'],\n    ['qd3', 'x-world/x-3dmf'],\n    ['qd3d', 'x-world/x-3dmf'],\n    ['qfx', 'application/vnd.intu.qfx'],\n    ['qif', 'image/x-quicktime'],\n    ['qps', 'application/vnd.publishare-delta-tree'],\n    ['qt', 'video/quicktime'],\n    ['qtc', 'video/x-qtc'],\n    ['qti', 'image/x-quicktime'],\n    ['qtif', 'image/x-quicktime'],\n    ['qxd', 'application/vnd.quark.quarkxpress'],\n    ['ra', ['audio/x-realaudio', 'audio/x-pn-realaudio', 'audio/x-pn-realaudio-plugin']],\n    ['ram', 'audio/x-pn-realaudio'],\n    ['rar', 'application/x-rar-compressed'],\n    ['ras', ['image/cmu-raster', 'application/x-cmu-raster', 'image/x-cmu-raster']],\n    ['rast', 'image/cmu-raster'],\n    ['rcprofile', 'application/vnd.ipunplugged.rcprofile'],\n    ['rdf', 'application/rdf+xml'],\n    ['rdz', 'application/vnd.data-vision.rdz'],\n    ['rep', 'application/vnd.businessobjects'],\n    ['res', 'application/x-dtbresource+xml'],\n    ['rexx', 'text/x-script.rexx'],\n    ['rf', 'image/vnd.rn-realflash'],\n    ['rgb', 'image/x-rgb'],\n    ['rif', 'application/reginfo+xml'],\n    ['rip', 'audio/vnd.rip'],\n    ['rl', 'application/resource-lists+xml'],\n    ['rlc', 'image/vnd.fujixerox.edmics-rlc'],\n    ['rld', 'application/resource-lists-diff+xml'],\n    ['rm', ['application/vnd.rn-realmedia', 'audio/x-pn-realaudio']],\n    ['rmi', 'audio/mid'],\n    ['rmm', 'audio/x-pn-realaudio'],\n    ['rmp', ['audio/x-pn-realaudio-plugin', 'audio/x-pn-realaudio']],\n    ['rms', 'application/vnd.jcp.javame.midlet-rms'],\n    ['rnc', 'application/relax-ng-compact-syntax'],\n    ['rng', ['application/ringing-tones', 'application/vnd.nokia.ringing-tone']],\n    ['rnx', 'application/vnd.rn-realplayer'],\n    ['roff', 'application/x-troff'],\n    ['rp', 'image/vnd.rn-realpix'],\n    ['rp9', 'application/vnd.cloanto.rp9'],\n    ['rpm', 'audio/x-pn-realaudio-plugin'],\n    ['rpss', 'application/vnd.nokia.radio-presets'],\n    ['rpst', 'application/vnd.nokia.radio-preset'],\n    ['rq', 'application/sparql-query'],\n    ['rs', 'application/rls-services+xml'],\n    ['rsd', 'application/rsd+xml'],\n    ['rt', ['text/richtext', 'text/vnd.rn-realtext']],\n    ['rtf', ['application/rtf', 'text/richtext', 'application/x-rtf']],\n    ['rtx', ['text/richtext', 'application/rtf']],\n    ['rv', 'video/vnd.rn-realvideo'],\n    ['s', 'text/x-asm'],\n    ['s3m', 'audio/s3m'],\n    ['saf', 'application/vnd.yamaha.smaf-audio'],\n    ['saveme', 'application/octet-stream'],\n    ['sbk', 'application/x-tbook'],\n    ['sbml', 'application/sbml+xml'],\n    ['sc', 'application/vnd.ibm.secure-container'],\n    ['scd', 'application/x-msschedule'],\n    ['scm', ['application/vnd.lotus-screencam', 'video/x-scm', 'text/x-script.guile', 'application/x-lotusscreencam', 'text/x-script.scheme']],\n    ['scq', 'application/scvp-cv-request'],\n    ['scs', 'application/scvp-cv-response'],\n    ['sct', 'text/scriptlet'],\n    ['scurl', 'text/vnd.curl.scurl'],\n    ['sda', 'application/vnd.stardivision.draw'],\n    ['sdc', 'application/vnd.stardivision.calc'],\n    ['sdd', 'application/vnd.stardivision.impress'],\n    ['sdkm', 'application/vnd.solent.sdkm+xml'],\n    ['sdml', 'text/plain'],\n    ['sdp', ['application/sdp', 'application/x-sdp']],\n    ['sdr', 'application/sounder'],\n    ['sdw', 'application/vnd.stardivision.writer'],\n    ['sea', ['application/sea', 'application/x-sea']],\n    ['see', 'application/vnd.seemail'],\n    ['seed', 'application/vnd.fdsn.seed'],\n    ['sema', 'application/vnd.sema'],\n    ['semd', 'application/vnd.semd'],\n    ['semf', 'application/vnd.semf'],\n    ['ser', 'application/java-serialized-object'],\n    ['set', 'application/set'],\n    ['setpay', 'application/set-payment-initiation'],\n    ['setreg', 'application/set-registration-initiation'],\n    ['sfd-hdstx', 'application/vnd.hydrostatix.sof-data'],\n    ['sfs', 'application/vnd.spotfire.sfs'],\n    ['sgl', 'application/vnd.stardivision.writer-global'],\n    ['sgm', ['text/sgml', 'text/x-sgml']],\n    ['sgml', ['text/sgml', 'text/x-sgml']],\n    ['sh', ['application/x-shar', 'application/x-bsh', 'application/x-sh', 'text/x-script.sh']],\n    ['shar', ['application/x-bsh', 'application/x-shar']],\n    ['shf', 'application/shf+xml'],\n    ['shtml', ['text/html', 'text/x-server-parsed-html']],\n    ['sid', 'audio/x-psid'],\n    ['sis', 'application/vnd.symbian.install'],\n    ['sit', ['application/x-stuffit', 'application/x-sit']],\n    ['sitx', 'application/x-stuffitx'],\n    ['skd', 'application/x-koan'],\n    ['skm', 'application/x-koan'],\n    ['skp', ['application/vnd.koan', 'application/x-koan']],\n    ['skt', 'application/x-koan'],\n    ['sl', 'application/x-seelogo'],\n    ['sldm', 'application/vnd.ms-powerpoint.slide.macroenabled.12'],\n    ['sldx', 'application/vnd.openxmlformats-officedocument.presentationml.slide'],\n    ['slt', 'application/vnd.epson.salt'],\n    ['sm', 'application/vnd.stepmania.stepchart'],\n    ['smf', 'application/vnd.stardivision.math'],\n    ['smi', ['application/smil', 'application/smil+xml']],\n    ['smil', 'application/smil'],\n    ['snd', ['audio/basic', 'audio/x-adpcm']],\n    ['snf', 'application/x-font-snf'],\n    ['sol', 'application/solids'],\n    ['spc', ['text/x-speech', 'application/x-pkcs7-certificates']],\n    ['spf', 'application/vnd.yamaha.smaf-phrase'],\n    ['spl', ['application/futuresplash', 'application/x-futuresplash']],\n    ['spot', 'text/vnd.in3d.spot'],\n    ['spp', 'application/scvp-vp-response'],\n    ['spq', 'application/scvp-vp-request'],\n    ['spr', 'application/x-sprite'],\n    ['sprite', 'application/x-sprite'],\n    ['src', 'application/x-wais-source'],\n    ['sru', 'application/sru+xml'],\n    ['srx', 'application/sparql-results+xml'],\n    ['sse', 'application/vnd.kodak-descriptor'],\n    ['ssf', 'application/vnd.epson.ssf'],\n    ['ssi', 'text/x-server-parsed-html'],\n    ['ssm', 'application/streamingmedia'],\n    ['ssml', 'application/ssml+xml'],\n    ['sst', ['application/vnd.ms-pkicertstore', 'application/vnd.ms-pki.certstore']],\n    ['st', 'application/vnd.sailingtracker.track'],\n    ['stc', 'application/vnd.sun.xml.calc.template'],\n    ['std', 'application/vnd.sun.xml.draw.template'],\n    ['step', 'application/step'],\n    ['stf', 'application/vnd.wt.stf'],\n    ['sti', 'application/vnd.sun.xml.impress.template'],\n    ['stk', 'application/hyperstudio'],\n    ['stl', ['application/vnd.ms-pkistl', 'application/sla', 'application/vnd.ms-pki.stl', 'application/x-navistyle']],\n    ['stm', 'text/html'],\n    ['stp', 'application/step'],\n    ['str', 'application/vnd.pg.format'],\n    ['stw', 'application/vnd.sun.xml.writer.template'],\n    ['sub', 'image/vnd.dvb.subtitle'],\n    ['sus', 'application/vnd.sus-calendar'],\n    ['sv4cpio', 'application/x-sv4cpio'],\n    ['sv4crc', 'application/x-sv4crc'],\n    ['svc', 'application/vnd.dvb.service'],\n    ['svd', 'application/vnd.svd'],\n    ['svf', ['image/vnd.dwg', 'image/x-dwg']],\n    ['svg', 'image/svg+xml'],\n    ['svr', ['x-world/x-svr', 'application/x-world']],\n    ['swf', 'application/x-shockwave-flash'],\n    ['swi', 'application/vnd.aristanetworks.swi'],\n    ['sxc', 'application/vnd.sun.xml.calc'],\n    ['sxd', 'application/vnd.sun.xml.draw'],\n    ['sxg', 'application/vnd.sun.xml.writer.global'],\n    ['sxi', 'application/vnd.sun.xml.impress'],\n    ['sxm', 'application/vnd.sun.xml.math'],\n    ['sxw', 'application/vnd.sun.xml.writer'],\n    ['t', ['text/troff', 'application/x-troff']],\n    ['talk', 'text/x-speech'],\n    ['tao', 'application/vnd.tao.intent-module-archive'],\n    ['tar', 'application/x-tar'],\n    ['tbk', ['application/toolbook', 'application/x-tbook']],\n    ['tcap', 'application/vnd.3gpp2.tcap'],\n    ['tcl', ['text/x-script.tcl', 'application/x-tcl']],\n    ['tcsh', 'text/x-script.tcsh'],\n    ['teacher', 'application/vnd.smart.teacher'],\n    ['tei', 'application/tei+xml'],\n    ['tex', 'application/x-tex'],\n    ['texi', 'application/x-texinfo'],\n    ['texinfo', 'application/x-texinfo'],\n    ['text', ['application/plain', 'text/plain']],\n    ['tfi', 'application/thraud+xml'],\n    ['tfm', 'application/x-tex-tfm'],\n    ['tgz', ['application/gnutar', 'application/x-compressed']],\n    ['thmx', 'application/vnd.ms-officetheme'],\n    ['tif', ['image/tiff', 'image/x-tiff']],\n    ['tiff', ['image/tiff', 'image/x-tiff']],\n    ['tmo', 'application/vnd.tmobile-livetv'],\n    ['torrent', 'application/x-bittorrent'],\n    ['tpl', 'application/vnd.groove-tool-template'],\n    ['tpt', 'application/vnd.trid.tpt'],\n    ['tr', 'application/x-troff'],\n    ['tra', 'application/vnd.trueapp'],\n    ['trm', 'application/x-msterminal'],\n    ['tsd', 'application/timestamped-data'],\n    ['tsi', 'audio/tsp-audio'],\n    ['tsp', ['application/dsptype', 'audio/tsplayer']],\n    ['tsv', 'text/tab-separated-values'],\n    ['ttf', 'application/x-font-ttf'],\n    ['ttl', 'text/turtle'],\n    ['turbot', 'image/florian'],\n    ['twd', 'application/vnd.simtech-mindmapper'],\n    ['txd', 'application/vnd.genomatix.tuxedo'],\n    ['txf', 'application/vnd.mobius.txf'],\n    ['txt', 'text/plain'],\n    ['ufd', 'application/vnd.ufdl'],\n    ['uil', 'text/x-uil'],\n    ['uls', 'text/iuls'],\n    ['umj', 'application/vnd.umajin'],\n    ['uni', 'text/uri-list'],\n    ['unis', 'text/uri-list'],\n    ['unityweb', 'application/vnd.unity'],\n    ['unv', 'application/i-deas'],\n    ['uoml', 'application/vnd.uoml+xml'],\n    ['uri', 'text/uri-list'],\n    ['uris', 'text/uri-list'],\n    ['ustar', ['application/x-ustar', 'multipart/x-ustar']],\n    ['utz', 'application/vnd.uiq.theme'],\n    ['uu', ['application/octet-stream', 'text/x-uuencode']],\n    ['uue', 'text/x-uuencode'],\n    ['uva', 'audio/vnd.dece.audio'],\n    ['uvh', 'video/vnd.dece.hd'],\n    ['uvi', 'image/vnd.dece.graphic'],\n    ['uvm', 'video/vnd.dece.mobile'],\n    ['uvp', 'video/vnd.dece.pd'],\n    ['uvs', 'video/vnd.dece.sd'],\n    ['uvu', 'video/vnd.uvvu.mp4'],\n    ['uvv', 'video/vnd.dece.video'],\n    ['vcd', 'application/x-cdlink'],\n    ['vcf', 'text/x-vcard'],\n    ['vcg', 'application/vnd.groove-vcard'],\n    ['vcs', 'text/x-vcalendar'],\n    ['vcx', 'application/vnd.vcx'],\n    ['vda', 'application/vda'],\n    ['vdo', 'video/vdo'],\n    ['vew', 'application/groupwise'],\n    ['vis', 'application/vnd.visionary'],\n    ['viv', ['video/vivo', 'video/vnd.vivo']],\n    ['vivo', ['video/vivo', 'video/vnd.vivo']],\n    ['vmd', 'application/vocaltec-media-desc'],\n    ['vmf', 'application/vocaltec-media-file'],\n    ['voc', ['audio/voc', 'audio/x-voc']],\n    ['vos', 'video/vosaic'],\n    ['vox', 'audio/voxware'],\n    ['vqe', 'audio/x-twinvq-plugin'],\n    ['vqf', 'audio/x-twinvq'],\n    ['vql', 'audio/x-twinvq-plugin'],\n    ['vrml', ['model/vrml', 'x-world/x-vrml', 'application/x-vrml']],\n    ['vrt', 'x-world/x-vrt'],\n    ['vsd', ['application/vnd.visio', 'application/x-visio']],\n    ['vsf', 'application/vnd.vsf'],\n    ['vst', 'application/x-visio'],\n    ['vsw', 'application/x-visio'],\n    ['vtu', 'model/vnd.vtu'],\n    ['vxml', 'application/voicexml+xml'],\n    ['w60', 'application/wordperfect6.0'],\n    ['w61', 'application/wordperfect6.1'],\n    ['w6w', 'application/msword'],\n    ['wad', 'application/x-doom'],\n    ['wav', ['audio/wav', 'audio/x-wav']],\n    ['wax', 'audio/x-ms-wax'],\n    ['wb1', 'application/x-qpro'],\n    ['wbmp', 'image/vnd.wap.wbmp'],\n    ['wbs', 'application/vnd.criticaltools.wbs+xml'],\n    ['wbxml', 'application/vnd.wap.wbxml'],\n    ['wcm', 'application/vnd.ms-works'],\n    ['wdb', 'application/vnd.ms-works'],\n    ['web', 'application/vnd.xara'],\n    ['weba', 'audio/webm'],\n    ['webm', 'video/webm'],\n    ['webp', 'image/webp'],\n    ['wg', 'application/vnd.pmi.widget'],\n    ['wgt', 'application/widget'],\n    ['wiz', 'application/msword'],\n    ['wk1', 'application/x-123'],\n    ['wks', 'application/vnd.ms-works'],\n    ['wm', 'video/x-ms-wm'],\n    ['wma', 'audio/x-ms-wma'],\n    ['wmd', 'application/x-ms-wmd'],\n    ['wmf', ['windows/metafile', 'application/x-msmetafile']],\n    ['wml', 'text/vnd.wap.wml'],\n    ['wmlc', 'application/vnd.wap.wmlc'],\n    ['wmls', 'text/vnd.wap.wmlscript'],\n    ['wmlsc', 'application/vnd.wap.wmlscriptc'],\n    ['wmv', 'video/x-ms-wmv'],\n    ['wmx', 'video/x-ms-wmx'],\n    ['wmz', 'application/x-ms-wmz'],\n    ['woff', 'application/x-font-woff'],\n    ['word', 'application/msword'],\n    ['wp', 'application/wordperfect'],\n    ['wp5', ['application/wordperfect', 'application/wordperfect6.0']],\n    ['wp6', 'application/wordperfect'],\n    ['wpd', ['application/wordperfect', 'application/vnd.wordperfect', 'application/x-wpwin']],\n    ['wpl', 'application/vnd.ms-wpl'],\n    ['wps', 'application/vnd.ms-works'],\n    ['wq1', 'application/x-lotus'],\n    ['wqd', 'application/vnd.wqd'],\n    ['wri', ['application/mswrite', 'application/x-wri', 'application/x-mswrite']],\n    ['wrl', ['model/vrml', 'x-world/x-vrml', 'application/x-world']],\n    ['wrz', ['model/vrml', 'x-world/x-vrml']],\n    ['wsc', 'text/scriplet'],\n    ['wsdl', 'application/wsdl+xml'],\n    ['wspolicy', 'application/wspolicy+xml'],\n    ['wsrc', 'application/x-wais-source'],\n    ['wtb', 'application/vnd.webturbo'],\n    ['wtk', 'application/x-wintalk'],\n    ['wvx', 'video/x-ms-wvx'],\n    ['x-png', 'image/png'],\n    ['x3d', 'application/vnd.hzn-3d-crossword'],\n    ['xaf', 'x-world/x-vrml'],\n    ['xap', 'application/x-silverlight-app'],\n    ['xar', 'application/vnd.xara'],\n    ['xbap', 'application/x-ms-xbap'],\n    ['xbd', 'application/vnd.fujixerox.docuworks.binder'],\n    ['xbm', ['image/xbm', 'image/x-xbm', 'image/x-xbitmap']],\n    ['xdf', 'application/xcap-diff+xml'],\n    ['xdm', 'application/vnd.syncml.dm+xml'],\n    ['xdp', 'application/vnd.adobe.xdp+xml'],\n    ['xdr', 'video/x-amt-demorun'],\n    ['xdssc', 'application/dssc+xml'],\n    ['xdw', 'application/vnd.fujixerox.docuworks'],\n    ['xenc', 'application/xenc+xml'],\n    ['xer', 'application/patch-ops-error+xml'],\n    ['xfdf', 'application/vnd.adobe.xfdf'],\n    ['xfdl', 'application/vnd.xfdl'],\n    ['xgz', 'xgl/drawing'],\n    ['xhtml', 'application/xhtml+xml'],\n    ['xif', 'image/vnd.xiff'],\n    ['xl', 'application/excel'],\n    ['xla', ['application/vnd.ms-excel', 'application/excel', 'application/x-msexcel', 'application/x-excel']],\n    ['xlam', 'application/vnd.ms-excel.addin.macroenabled.12'],\n    ['xlb', ['application/excel', 'application/vnd.ms-excel', 'application/x-excel']],\n    ['xlc', ['application/vnd.ms-excel', 'application/excel', 'application/x-excel']],\n    ['xld', ['application/excel', 'application/x-excel']],\n    ['xlk', ['application/excel', 'application/x-excel']],\n    ['xll', ['application/excel', 'application/vnd.ms-excel', 'application/x-excel']],\n    ['xlm', ['application/vnd.ms-excel', 'application/excel', 'application/x-excel']],\n    ['xls', ['application/vnd.ms-excel', 'application/excel', 'application/x-msexcel', 'application/x-excel']],\n    ['xlsb', 'application/vnd.ms-excel.sheet.binary.macroenabled.12'],\n    ['xlsm', 'application/vnd.ms-excel.sheet.macroenabled.12'],\n    ['xlsx', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'],\n    ['xlt', ['application/vnd.ms-excel', 'application/excel', 'application/x-excel']],\n    ['xltm', 'application/vnd.ms-excel.template.macroenabled.12'],\n    ['xltx', 'application/vnd.openxmlformats-officedocument.spreadsheetml.template'],\n    ['xlv', ['application/excel', 'application/x-excel']],\n    ['xlw', ['application/vnd.ms-excel', 'application/excel', 'application/x-msexcel', 'application/x-excel']],\n    ['xm', 'audio/xm'],\n    ['xml', ['application/xml', 'text/xml', 'application/atom+xml', 'application/rss+xml']],\n    ['xmz', 'xgl/movie'],\n    ['xo', 'application/vnd.olpc-sugar'],\n    ['xof', 'x-world/x-vrml'],\n    ['xop', 'application/xop+xml'],\n    ['xpi', 'application/x-xpinstall'],\n    ['xpix', 'application/x-vnd.ls-xpix'],\n    ['xpm', ['image/xpm', 'image/x-xpixmap']],\n    ['xpr', 'application/vnd.is-xpr'],\n    ['xps', 'application/vnd.ms-xpsdocument'],\n    ['xpw', 'application/vnd.intercon.formnet'],\n    ['xslt', 'application/xslt+xml'],\n    ['xsm', 'application/vnd.syncml+xml'],\n    ['xspf', 'application/xspf+xml'],\n    ['xsr', 'video/x-amt-showrun'],\n    ['xul', 'application/vnd.mozilla.xul+xml'],\n    ['xwd', ['image/x-xwd', 'image/x-xwindowdump']],\n    ['xyz', ['chemical/x-xyz', 'chemical/x-pdb']],\n    ['yang', 'application/yang'],\n    ['yin', 'application/yin+xml'],\n    ['z', ['application/x-compressed', 'application/x-compress']],\n    ['zaz', 'application/vnd.zzazz.deck+xml'],\n    ['zip', ['application/zip', 'multipart/x-zip', 'application/x-zip-compressed', 'application/x-compressed']],\n    ['zir', 'application/vnd.zul'],\n    ['zmm', 'application/vnd.handheld-entertainment+xml'],\n    ['zoo', 'application/octet-stream'],\n    ['zsh', 'text/x-script.zsh']\n]);\n\nmodule.exports = {\n    detectMimeType(filename) {\n        if (!filename) {\n            return defaultMimeType;\n        }\n\n        let parsed = path.parse(filename);\n        let extension = (parsed.ext.substr(1) || parsed.name || '').split('?').shift().trim().toLowerCase();\n        let value = defaultMimeType;\n\n        if (extensions.has(extension)) {\n            value = extensions.get(extension);\n        }\n\n        if (Array.isArray(value)) {\n            return value[0];\n        }\n        return value;\n    },\n\n    detectExtension(mimeType) {\n        if (!mimeType) {\n            return defaultExtension;\n        }\n        let parts = (mimeType || '').toLowerCase().trim().split('/');\n        let rootType = parts.shift().trim();\n        let subType = parts.join('/').trim();\n\n        if (mimeTypes.has(rootType + '/' + subType)) {\n            let value = mimeTypes.get(rootType + '/' + subType);\n            if (Array.isArray(value)) {\n                return value[0];\n            }\n            return value;\n        }\n\n        switch (rootType) {\n            case 'text':\n                return 'txt';\n            default:\n                return 'bin';\n        }\n    }\n};\n", "/*\n\nCopied from https://github.com/mathiasbynens/punycode.js/blob/ef3505c8abb5143a00d53ce59077c9f7f4b2ac47/punycode.js\n\nCopyright Mathias Bynens <https://mathiasbynens.be/>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n/* eslint callback-return: 0, no-bitwise: 0, eqeqeq: 0, prefer-arrow-callback: 0, object-shorthand: 0 */\n\n'use strict';\n\n/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7F]/; // Note: U+007F DEL is excluded too.\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n    overflow: 'Overflow: input needs wider integers to process',\n    'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n    'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n    throw new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, callback) {\n    const result = [];\n    let length = array.length;\n    while (length--) {\n        result[length] = callback(array[length]);\n    }\n    return result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {String} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(domain, callback) {\n    const parts = domain.split('@');\n    let result = '';\n    if (parts.length > 1) {\n        // In email addresses, only the domain name should be punycoded. Leave\n        // the local part (i.e. everything up to `@`) intact.\n        result = parts[0] + '@';\n        domain = parts[1];\n    }\n    // Avoid `split(regex)` for IE8 compatibility. See #17.\n    domain = domain.replace(regexSeparators, '\\x2E');\n    const labels = domain.split('.');\n    const encoded = map(labels, callback).join('.');\n    return result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n    const output = [];\n    let counter = 0;\n    const length = string.length;\n    while (counter < length) {\n        const value = string.charCodeAt(counter++);\n        if (value >= 0xd800 && value <= 0xdbff && counter < length) {\n            // It's a high surrogate, and there is a next character.\n            const extra = string.charCodeAt(counter++);\n            if ((extra & 0xfc00) == 0xdc00) {\n                // Low surrogate.\n                output.push(((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000);\n            } else {\n                // It's an unmatched surrogate; only append this code unit, in case the\n                // next code unit is the high surrogate of a surrogate pair.\n                output.push(value);\n                counter--;\n            }\n        } else {\n            output.push(value);\n        }\n    }\n    return output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = codePoints => String.fromCodePoint(...codePoints);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = function (codePoint) {\n    if (codePoint >= 0x30 && codePoint < 0x3a) {\n        return 26 + (codePoint - 0x30);\n    }\n    if (codePoint >= 0x41 && codePoint < 0x5b) {\n        return codePoint - 0x41;\n    }\n    if (codePoint >= 0x61 && codePoint < 0x7b) {\n        return codePoint - 0x61;\n    }\n    return base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = function (digit, flag) {\n    //  0..25 map to ASCII a..z or A..Z\n    // 26..35 map to ASCII 0..9\n    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = function (delta, numPoints, firstTime) {\n    let k = 0;\n    delta = firstTime ? floor(delta / damp) : delta >> 1;\n    delta += floor(delta / numPoints);\n    for (; /* no initialization */ delta > (baseMinusTMin * tMax) >> 1; k += base) {\n        delta = floor(delta / baseMinusTMin);\n    }\n    return floor(k + ((baseMinusTMin + 1) * delta) / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = function (input) {\n    // Don't use UCS-2.\n    const output = [];\n    const inputLength = input.length;\n    let i = 0;\n    let n = initialN;\n    let bias = initialBias;\n\n    // Handle the basic code points: let `basic` be the number of input code\n    // points before the last delimiter, or `0` if there is none, then copy\n    // the first basic code points to the output.\n\n    let basic = input.lastIndexOf(delimiter);\n    if (basic < 0) {\n        basic = 0;\n    }\n\n    for (let j = 0; j < basic; ++j) {\n        // if it's not a basic code point\n        if (input.charCodeAt(j) >= 0x80) {\n            error('not-basic');\n        }\n        output.push(input.charCodeAt(j));\n    }\n\n    // Main decoding loop: start just after the last delimiter if any basic code\n    // points were copied; start at the beginning otherwise.\n\n    for (let index = basic > 0 ? basic + 1 : 0; index < inputLength /* no final expression */; ) {\n        // `index` is the index of the next character to be consumed.\n        // Decode a generalized variable-length integer into `delta`,\n        // which gets added to `i`. The overflow checking is easier\n        // if we increase `i` as we go, then subtract off its starting\n        // value at the end to obtain `delta`.\n        const oldi = i;\n        for (let w = 1, k = base /* no condition */; ; k += base) {\n            if (index >= inputLength) {\n                error('invalid-input');\n            }\n\n            const digit = basicToDigit(input.charCodeAt(index++));\n\n            if (digit >= base) {\n                error('invalid-input');\n            }\n            if (digit > floor((maxInt - i) / w)) {\n                error('overflow');\n            }\n\n            i += digit * w;\n            const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n\n            if (digit < t) {\n                break;\n            }\n\n            const baseMinusT = base - t;\n            if (w > floor(maxInt / baseMinusT)) {\n                error('overflow');\n            }\n\n            w *= baseMinusT;\n        }\n\n        const out = output.length + 1;\n        bias = adapt(i - oldi, out, oldi == 0);\n\n        // `i` was supposed to wrap around from `out` to `0`,\n        // incrementing `n` each time, so we'll fix that now:\n        if (floor(i / out) > maxInt - n) {\n            error('overflow');\n        }\n\n        n += floor(i / out);\n        i %= out;\n\n        // Insert `n` at position `i` of the output.\n        output.splice(i++, 0, n);\n    }\n\n    return String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = function (input) {\n    const output = [];\n\n    // Convert the input in UCS-2 to an array of Unicode code points.\n    input = ucs2decode(input);\n\n    // Cache the length.\n    const inputLength = input.length;\n\n    // Initialize the state.\n    let n = initialN;\n    let delta = 0;\n    let bias = initialBias;\n\n    // Handle the basic code points.\n    for (const currentValue of input) {\n        if (currentValue < 0x80) {\n            output.push(stringFromCharCode(currentValue));\n        }\n    }\n\n    const basicLength = output.length;\n    let handledCPCount = basicLength;\n\n    // `handledCPCount` is the number of code points that have been handled;\n    // `basicLength` is the number of basic code points.\n\n    // Finish the basic string with a delimiter unless it's empty.\n    if (basicLength) {\n        output.push(delimiter);\n    }\n\n    // Main encoding loop:\n    while (handledCPCount < inputLength) {\n        // All non-basic code points < n have been handled already. Find the next\n        // larger one:\n        let m = maxInt;\n        for (const currentValue of input) {\n            if (currentValue >= n && currentValue < m) {\n                m = currentValue;\n            }\n        }\n\n        // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n        // but guard against overflow.\n        const handledCPCountPlusOne = handledCPCount + 1;\n        if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n            error('overflow');\n        }\n\n        delta += (m - n) * handledCPCountPlusOne;\n        n = m;\n\n        for (const currentValue of input) {\n            if (currentValue < n && ++delta > maxInt) {\n                error('overflow');\n            }\n            if (currentValue === n) {\n                // Represent delta as a generalized variable-length integer.\n                let q = delta;\n                for (let k = base /* no condition */; ; k += base) {\n                    const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n                    if (q < t) {\n                        break;\n                    }\n                    const qMinusT = q - t;\n                    const baseMinusT = base - t;\n                    output.push(stringFromCharCode(digitToBasic(t + (qMinusT % baseMinusT), 0)));\n                    q = floor(qMinusT / baseMinusT);\n                }\n\n                output.push(stringFromCharCode(digitToBasic(q, 0)));\n                bias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);\n                delta = 0;\n                ++handledCPCount;\n            }\n        }\n\n        ++delta;\n        ++n;\n    }\n    return output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = function (input) {\n    return mapDomain(input, function (string) {\n        return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;\n    });\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = function (input) {\n    return mapDomain(input, function (string) {\n        return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;\n    });\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nconst punycode = {\n    /**\n     * A string representing the current Punycode.js version number.\n     * @memberOf punycode\n     * @type String\n     */\n    version: '2.3.1',\n    /**\n     * An object of methods to convert from JavaScript's internal character\n     * representation (UCS-2) to Unicode code points, and back.\n     * @see <https://mathiasbynens.be/notes/javascript-encoding>\n     * @memberOf punycode\n     * @type Object\n     */\n    ucs2: {\n        decode: ucs2decode,\n        encode: ucs2encode\n    },\n    decode: decode,\n    encode: encode,\n    toASCII: toASCII,\n    toUnicode: toUnicode\n};\n\nmodule.exports = punycode;\n", "'use strict';\n\nconst Transform = require('stream').Transform;\n\n/**\n * Encodes a Buffer into a base64 encoded string\n *\n * @param {Buffer} buffer Buffer to convert\n * @returns {String} base64 encoded string\n */\nfunction encode(buffer) {\n    if (typeof buffer === 'string') {\n        buffer = Buffer.from(buffer, 'utf-8');\n    }\n\n    return buffer.toString('base64');\n}\n\n/**\n * Adds soft line breaks to a base64 string\n *\n * @param {String} str base64 encoded string that might need line wrapping\n * @param {Number} [lineLength=76] Maximum allowed length for a line\n * @returns {String} Soft-wrapped base64 encoded string\n */\nfunction wrap(str, lineLength) {\n    str = (str || '').toString();\n    lineLength = lineLength || 76;\n\n    if (str.length <= lineLength) {\n        return str;\n    }\n\n    let result = [];\n    let pos = 0;\n    let chunkLength = lineLength * 1024;\n    while (pos < str.length) {\n        let wrappedLines = str\n            .substr(pos, chunkLength)\n            .replace(new RegExp('.{' + lineLength + '}', 'g'), '$&\\r\\n')\n            .trim();\n        result.push(wrappedLines);\n        pos += chunkLength;\n    }\n\n    return result.join('\\r\\n').trim();\n}\n\n/**\n * Creates a transform stream for encoding data to base64 encoding\n *\n * @constructor\n * @param {Object} options Stream options\n * @param {Number} [options.lineLength=76] Maximum length for lines, set to false to disable wrapping\n */\nclass Encoder extends Transform {\n    constructor(options) {\n        super();\n        // init Transform\n        this.options = options || {};\n\n        if (this.options.lineLength !== false) {\n            this.options.lineLength = this.options.lineLength || 76;\n        }\n\n        this._curLine = '';\n        this._remainingBytes = false;\n\n        this.inputBytes = 0;\n        this.outputBytes = 0;\n    }\n\n    _transform(chunk, encoding, done) {\n        if (encoding !== 'buffer') {\n            chunk = Buffer.from(chunk, encoding);\n        }\n\n        if (!chunk || !chunk.length) {\n            return setImmediate(done);\n        }\n\n        this.inputBytes += chunk.length;\n\n        if (this._remainingBytes && this._remainingBytes.length) {\n            chunk = Buffer.concat([this._remainingBytes, chunk], this._remainingBytes.length + chunk.length);\n            this._remainingBytes = false;\n        }\n\n        if (chunk.length % 3) {\n            this._remainingBytes = chunk.slice(chunk.length - (chunk.length % 3));\n            chunk = chunk.slice(0, chunk.length - (chunk.length % 3));\n        } else {\n            this._remainingBytes = false;\n        }\n\n        let b64 = this._curLine + encode(chunk);\n\n        if (this.options.lineLength) {\n            b64 = wrap(b64, this.options.lineLength);\n\n            // remove last line as it is still most probably incomplete\n            let lastLF = b64.lastIndexOf('\\n');\n            if (lastLF < 0) {\n                this._curLine = b64;\n                b64 = '';\n            } else if (lastLF === b64.length - 1) {\n                this._curLine = '';\n            } else {\n                this._curLine = b64.substr(lastLF + 1);\n                b64 = b64.substr(0, lastLF + 1);\n            }\n        }\n\n        if (b64) {\n            this.outputBytes += b64.length;\n            this.push(Buffer.from(b64, 'ascii'));\n        }\n\n        setImmediate(done);\n    }\n\n    _flush(done) {\n        if (this._remainingBytes && this._remainingBytes.length) {\n            this._curLine += encode(this._remainingBytes);\n        }\n\n        if (this._curLine) {\n            this._curLine = wrap(this._curLine, this.options.lineLength);\n            this.outputBytes += this._curLine.length;\n            this.push(this._curLine, 'ascii');\n            this._curLine = '';\n        }\n        done();\n    }\n}\n\n// expose to the world\nmodule.exports = {\n    encode,\n    wrap,\n    Encoder\n};\n", "'use strict';\n\nconst Transform = require('stream').Transform;\n\n/**\n * Encodes a Buffer into a Quoted-Printable encoded string\n *\n * @param {Buffer} buffer Buffer to convert\n * @returns {String} Quoted-Printable encoded string\n */\nfunction encode(buffer) {\n    if (typeof buffer === 'string') {\n        buffer = Buffer.from(buffer, 'utf-8');\n    }\n\n    // usable characters that do not need encoding\n    let ranges = [\n        // https://tools.ietf.org/html/rfc2045#section-6.7\n        [0x09], // <TAB>\n        [0x0a], // <LF>\n        [0x0d], // <CR>\n        [0x20, 0x3c], // <SP>!\"#$%&'()*+,-./0123456789:;\n        [0x3e, 0x7e] // >?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}\n    ];\n    let result = '';\n    let ord;\n\n    for (let i = 0, len = buffer.length; i < len; i++) {\n        ord = buffer[i];\n        // if the char is in allowed range, then keep as is, unless it is a WS in the end of a line\n        if (checkRanges(ord, ranges) && !((ord === 0x20 || ord === 0x09) && (i === len - 1 || buffer[i + 1] === 0x0a || buffer[i + 1] === 0x0d))) {\n            result += String.fromCharCode(ord);\n            continue;\n        }\n        result += '=' + (ord < 0x10 ? '0' : '') + ord.toString(16).toUpperCase();\n    }\n\n    return result;\n}\n\n/**\n * Adds soft line breaks to a Quoted-Printable string\n *\n * @param {String} str Quoted-Printable encoded string that might need line wrapping\n * @param {Number} [lineLength=76] Maximum allowed length for a line\n * @returns {String} Soft-wrapped Quoted-Printable encoded string\n */\nfunction wrap(str, lineLength) {\n    str = (str || '').toString();\n    lineLength = lineLength || 76;\n\n    if (str.length <= lineLength) {\n        return str;\n    }\n\n    let pos = 0;\n    let len = str.length;\n    let match, code, line;\n    let lineMargin = Math.floor(lineLength / 3);\n    let result = '';\n\n    // insert soft linebreaks where needed\n    while (pos < len) {\n        line = str.substr(pos, lineLength);\n        if ((match = line.match(/\\r\\n/))) {\n            line = line.substr(0, match.index + match[0].length);\n            result += line;\n            pos += line.length;\n            continue;\n        }\n\n        if (line.substr(-1) === '\\n') {\n            // nothing to change here\n            result += line;\n            pos += line.length;\n            continue;\n        } else if ((match = line.substr(-lineMargin).match(/\\n.*?$/))) {\n            // truncate to nearest line break\n            line = line.substr(0, line.length - (match[0].length - 1));\n            result += line;\n            pos += line.length;\n            continue;\n        } else if (line.length > lineLength - lineMargin && (match = line.substr(-lineMargin).match(/[ \\t.,!?][^ \\t.,!?]*$/))) {\n            // truncate to nearest space\n            line = line.substr(0, line.length - (match[0].length - 1));\n        } else if (line.match(/[=][\\da-f]{0,2}$/i)) {\n            // push incomplete encoding sequences to the next line\n            if ((match = line.match(/[=][\\da-f]{0,1}$/i))) {\n                line = line.substr(0, line.length - match[0].length);\n            }\n\n            // ensure that utf-8 sequences are not split\n            while (line.length > 3 && line.length < len - pos && !line.match(/^(?:=[\\da-f]{2}){1,4}$/i) && (match = line.match(/[=][\\da-f]{2}$/gi))) {\n                code = parseInt(match[0].substr(1, 2), 16);\n                if (code < 128) {\n                    break;\n                }\n\n                line = line.substr(0, line.length - 3);\n\n                if (code >= 0xc0) {\n                    break;\n                }\n            }\n        }\n\n        if (pos + line.length < len && line.substr(-1) !== '\\n') {\n            if (line.length === lineLength && line.match(/[=][\\da-f]{2}$/i)) {\n                line = line.substr(0, line.length - 3);\n            } else if (line.length === lineLength) {\n                line = line.substr(0, line.length - 1);\n            }\n            pos += line.length;\n            line += '=\\r\\n';\n        } else {\n            pos += line.length;\n        }\n\n        result += line;\n    }\n\n    return result;\n}\n\n/**\n * Helper function to check if a number is inside provided ranges\n *\n * @param {Number} nr Number to check for\n * @param {Array} ranges An Array of allowed values\n * @returns {Boolean} True if the value was found inside allowed ranges, false otherwise\n */\nfunction checkRanges(nr, ranges) {\n    for (let i = ranges.length - 1; i >= 0; i--) {\n        if (!ranges[i].length) {\n            continue;\n        }\n        if (ranges[i].length === 1 && nr === ranges[i][0]) {\n            return true;\n        }\n        if (ranges[i].length === 2 && nr >= ranges[i][0] && nr <= ranges[i][1]) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * Creates a transform stream for encoding data to Quoted-Printable encoding\n *\n * @constructor\n * @param {Object} options Stream options\n * @param {Number} [options.lineLength=76] Maximum length for lines, set to false to disable wrapping\n */\nclass Encoder extends Transform {\n    constructor(options) {\n        super();\n\n        // init Transform\n        this.options = options || {};\n\n        if (this.options.lineLength !== false) {\n            this.options.lineLength = this.options.lineLength || 76;\n        }\n\n        this._curLine = '';\n\n        this.inputBytes = 0;\n        this.outputBytes = 0;\n    }\n\n    _transform(chunk, encoding, done) {\n        let qp;\n\n        if (encoding !== 'buffer') {\n            chunk = Buffer.from(chunk, encoding);\n        }\n\n        if (!chunk || !chunk.length) {\n            return done();\n        }\n\n        this.inputBytes += chunk.length;\n\n        if (this.options.lineLength) {\n            qp = this._curLine + encode(chunk);\n            qp = wrap(qp, this.options.lineLength);\n            qp = qp.replace(/(^|\\n)([^\\n]*)$/, (match, lineBreak, lastLine) => {\n                this._curLine = lastLine;\n                return lineBreak;\n            });\n\n            if (qp) {\n                this.outputBytes += qp.length;\n                this.push(qp);\n            }\n        } else {\n            qp = encode(chunk);\n            this.outputBytes += qp.length;\n            this.push(qp, 'ascii');\n        }\n\n        done();\n    }\n\n    _flush(done) {\n        if (this._curLine) {\n            this.outputBytes += this._curLine.length;\n            this.push(this._curLine, 'ascii');\n        }\n        done();\n    }\n}\n\n// expose to the world\nmodule.exports = {\n    encode,\n    wrap,\n    Encoder\n};\n", "/* eslint no-control-regex:0 */\n\n'use strict';\n\nconst base64 = require('../base64');\nconst qp = require('../qp');\nconst mimeTypes = require('./mime-types');\n\nmodule.exports = {\n    /**\n     * Checks if a value is plaintext string (uses only printable 7bit chars)\n     *\n     * @param {String} value String to be tested\n     * @returns {Boolean} true if it is a plaintext string\n     */\n    isPlainText(value, isParam) {\n        const re = isParam ? /[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f\"\\u0080-\\uFFFF]/ : /[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f\\u0080-\\uFFFF]/;\n        if (typeof value !== 'string' || re.test(value)) {\n            return false;\n        } else {\n            return true;\n        }\n    },\n\n    /**\n     * Checks if a multi line string containes lines longer than the selected value.\n     *\n     * Useful when detecting if a mail message needs any processing at all \u2013\n     * if only plaintext characters are used and lines are short, then there is\n     * no need to encode the values in any way. If the value is plaintext but has\n     * longer lines then allowed, then use format=flowed\n     *\n     * @param {Number} lineLength Max line length to check for\n     * @returns {Boolean} Returns true if there is at least one line longer than lineLength chars\n     */\n    hasLongerLines(str, lineLength) {\n        if (str.length > 128 * 1024) {\n            // do not test strings longer than 128kB\n            return true;\n        }\n        return new RegExp('^.{' + (lineLength + 1) + ',}', 'm').test(str);\n    },\n\n    /**\n     * Encodes a string or an Buffer to an UTF-8 MIME Word (rfc2047)\n     *\n     * @param {String|Buffer} data String to be encoded\n     * @param {String} mimeWordEncoding='Q' Encoding for the mime word, either Q or B\n     * @param {Number} [maxLength=0] If set, split mime words into several chunks if needed\n     * @return {String} Single or several mime words joined together\n     */\n    encodeWord(data, mimeWordEncoding, maxLength) {\n        mimeWordEncoding = (mimeWordEncoding || 'Q').toString().toUpperCase().trim().charAt(0);\n        maxLength = maxLength || 0;\n\n        let encodedStr;\n        let toCharset = 'UTF-8';\n\n        if (maxLength && maxLength > 7 + toCharset.length) {\n            maxLength -= 7 + toCharset.length;\n        }\n\n        if (mimeWordEncoding === 'Q') {\n            // https://tools.ietf.org/html/rfc2047#section-5 rule (3)\n            encodedStr = qp.encode(data).replace(/[^a-z0-9!*+\\-/=]/gi, chr => {\n                let ord = chr.charCodeAt(0).toString(16).toUpperCase();\n                if (chr === ' ') {\n                    return '_';\n                } else {\n                    return '=' + (ord.length === 1 ? '0' + ord : ord);\n                }\n            });\n        } else if (mimeWordEncoding === 'B') {\n            encodedStr = typeof data === 'string' ? data : base64.encode(data);\n            maxLength = maxLength ? Math.max(3, ((maxLength - (maxLength % 4)) / 4) * 3) : 0;\n        }\n\n        if (maxLength && (mimeWordEncoding !== 'B' ? encodedStr : base64.encode(data)).length > maxLength) {\n            if (mimeWordEncoding === 'Q') {\n                encodedStr = this.splitMimeEncodedString(encodedStr, maxLength).join('?= =?' + toCharset + '?' + mimeWordEncoding + '?');\n            } else {\n                // RFC2047 6.3 (2) states that encoded-word must include an integral number of characters, so no chopping unicode sequences\n                let parts = [];\n                let lpart = '';\n                for (let i = 0, len = encodedStr.length; i < len; i++) {\n                    let chr = encodedStr.charAt(i);\n\n                    if (/[\\ud83c\\ud83d\\ud83e]/.test(chr) && i < len - 1) {\n                        // composite emoji byte, so add the next byte as well\n                        chr += encodedStr.charAt(++i);\n                    }\n\n                    // check if we can add this character to the existing string\n                    // without breaking byte length limit\n                    if (Buffer.byteLength(lpart + chr) <= maxLength || i === 0) {\n                        lpart += chr;\n                    } else {\n                        // we hit the length limit, so push the existing string and start over\n                        parts.push(base64.encode(lpart));\n                        lpart = chr;\n                    }\n                }\n                if (lpart) {\n                    parts.push(base64.encode(lpart));\n                }\n\n                if (parts.length > 1) {\n                    encodedStr = parts.join('?= =?' + toCharset + '?' + mimeWordEncoding + '?');\n                } else {\n                    encodedStr = parts.join('');\n                }\n            }\n        } else if (mimeWordEncoding === 'B') {\n            encodedStr = base64.encode(data);\n        }\n\n        return '=?' + toCharset + '?' + mimeWordEncoding + '?' + encodedStr + (encodedStr.substr(-2) === '?=' ? '' : '?=');\n    },\n\n    /**\n     * Finds word sequences with non ascii text and converts these to mime words\n     *\n     * @param {String} value String to be encoded\n     * @param {String} mimeWordEncoding='Q' Encoding for the mime word, either Q or B\n     * @param {Number} [maxLength=0] If set, split mime words into several chunks if needed\n     * @param {Boolean} [encodeAll=false] If true and the value needs encoding then encodes entire string, not just the smallest match\n     * @return {String} String with possible mime words\n     */\n    encodeWords(value, mimeWordEncoding, maxLength, encodeAll) {\n        maxLength = maxLength || 0;\n\n        let encodedValue;\n\n        // find first word with a non-printable ascii or special symbol in it\n        let firstMatch = value.match(/(?:^|\\s)([^\\s]*[\"\\u0080-\\uFFFF])/);\n        if (!firstMatch) {\n            return value;\n        }\n\n        if (encodeAll) {\n            // if it is requested to encode everything or the string contains something that resebles encoded word, then encode everything\n\n            return this.encodeWord(value, mimeWordEncoding, maxLength);\n        }\n\n        // find the last word with a non-printable ascii in it\n        let lastMatch = value.match(/([\"\\u0080-\\uFFFF][^\\s]*)[^\"\\u0080-\\uFFFF]*$/);\n        if (!lastMatch) {\n            // should not happen\n            return value;\n        }\n\n        let startIndex =\n            firstMatch.index +\n            (\n                firstMatch[0].match(/[^\\s]/) || {\n                    index: 0\n                }\n            ).index;\n        let endIndex = lastMatch.index + (lastMatch[1] || '').length;\n\n        encodedValue =\n            (startIndex ? value.substr(0, startIndex) : '') +\n            this.encodeWord(value.substring(startIndex, endIndex), mimeWordEncoding || 'Q', maxLength) +\n            (endIndex < value.length ? value.substr(endIndex) : '');\n\n        return encodedValue;\n    },\n\n    /**\n     * Joins parsed header value together as 'value; param1=value1; param2=value2'\n     * PS: We are following RFC 822 for the list of special characters that we need to keep in quotes.\n     *      Refer: https://www.w3.org/Protocols/rfc1341/4_Content-Type.html\n     * @param {Object} structured Parsed header value\n     * @return {String} joined header value\n     */\n    buildHeaderValue(structured) {\n        let paramsArray = [];\n\n        Object.keys(structured.params || {}).forEach(param => {\n            // filename might include unicode characters so it is a special case\n            // other values probably do not\n            let value = structured.params[param];\n            if (!this.isPlainText(value, true) || value.length >= 75) {\n                this.buildHeaderParam(param, value, 50).forEach(encodedParam => {\n                    if (!/[\\s\"\\\\;:/=(),<>@[\\]?]|^[-']|'$/.test(encodedParam.value) || encodedParam.key.substr(-1) === '*') {\n                        paramsArray.push(encodedParam.key + '=' + encodedParam.value);\n                    } else {\n                        paramsArray.push(encodedParam.key + '=' + JSON.stringify(encodedParam.value));\n                    }\n                });\n            } else if (/[\\s'\"\\\\;:/=(),<>@[\\]?]|^-/.test(value)) {\n                paramsArray.push(param + '=' + JSON.stringify(value));\n            } else {\n                paramsArray.push(param + '=' + value);\n            }\n        });\n\n        return structured.value + (paramsArray.length ? '; ' + paramsArray.join('; ') : '');\n    },\n\n    /**\n     * Encodes a string or an Buffer to an UTF-8 Parameter Value Continuation encoding (rfc2231)\n     * Useful for splitting long parameter values.\n     *\n     * For example\n     *      title=\"unicode string\"\n     * becomes\n     *     title*0*=utf-8''unicode\n     *     title*1*=%20string\n     *\n     * @param {String|Buffer} data String to be encoded\n     * @param {Number} [maxLength=50] Max length for generated chunks\n     * @param {String} [fromCharset='UTF-8'] Source sharacter set\n     * @return {Array} A list of encoded keys and headers\n     */\n    buildHeaderParam(key, data, maxLength) {\n        let list = [];\n        let encodedStr = typeof data === 'string' ? data : (data || '').toString();\n        let encodedStrArr;\n        let chr, ord;\n        let line;\n        let startPos = 0;\n        let i, len;\n\n        maxLength = maxLength || 50;\n\n        // process ascii only text\n        if (this.isPlainText(data, true)) {\n            // check if conversion is even needed\n            if (encodedStr.length <= maxLength) {\n                return [\n                    {\n                        key,\n                        value: encodedStr\n                    }\n                ];\n            }\n\n            encodedStr = encodedStr.replace(new RegExp('.{' + maxLength + '}', 'g'), str => {\n                list.push({\n                    line: str\n                });\n                return '';\n            });\n\n            if (encodedStr) {\n                list.push({\n                    line: encodedStr\n                });\n            }\n        } else {\n            if (/[\\uD800-\\uDBFF]/.test(encodedStr)) {\n                // string containts surrogate pairs, so normalize it to an array of bytes\n                encodedStrArr = [];\n                for (i = 0, len = encodedStr.length; i < len; i++) {\n                    chr = encodedStr.charAt(i);\n                    ord = chr.charCodeAt(0);\n                    if (ord >= 0xd800 && ord <= 0xdbff && i < len - 1) {\n                        chr += encodedStr.charAt(i + 1);\n                        encodedStrArr.push(chr);\n                        i++;\n                    } else {\n                        encodedStrArr.push(chr);\n                    }\n                }\n                encodedStr = encodedStrArr;\n            }\n\n            // first line includes the charset and language info and needs to be encoded\n            // even if it does not contain any unicode characters\n            line = 'utf-8\\x27\\x27';\n            let encoded = true;\n            startPos = 0;\n\n            // process text with unicode or special chars\n            for (i = 0, len = encodedStr.length; i < len; i++) {\n                chr = encodedStr[i];\n\n                if (encoded) {\n                    chr = this.safeEncodeURIComponent(chr);\n                } else {\n                    // try to urlencode current char\n                    chr = chr === ' ' ? chr : this.safeEncodeURIComponent(chr);\n                    // By default it is not required to encode a line, the need\n                    // only appears when the string contains unicode or special chars\n                    // in this case we start processing the line over and encode all chars\n                    if (chr !== encodedStr[i]) {\n                        // Check if it is even possible to add the encoded char to the line\n                        // If not, there is no reason to use this line, just push it to the list\n                        // and start a new line with the char that needs encoding\n                        if ((this.safeEncodeURIComponent(line) + chr).length >= maxLength) {\n                            list.push({\n                                line,\n                                encoded\n                            });\n                            line = '';\n                            startPos = i - 1;\n                        } else {\n                            encoded = true;\n                            i = startPos;\n                            line = '';\n                            continue;\n                        }\n                    }\n                }\n\n                // if the line is already too long, push it to the list and start a new one\n                if ((line + chr).length >= maxLength) {\n                    list.push({\n                        line,\n                        encoded\n                    });\n                    line = chr = encodedStr[i] === ' ' ? ' ' : this.safeEncodeURIComponent(encodedStr[i]);\n                    if (chr === encodedStr[i]) {\n                        encoded = false;\n                        startPos = i - 1;\n                    } else {\n                        encoded = true;\n                    }\n                } else {\n                    line += chr;\n                }\n            }\n\n            if (line) {\n                list.push({\n                    line,\n                    encoded\n                });\n            }\n        }\n\n        return list.map((item, i) => ({\n            // encoded lines: {name}*{part}*\n            // unencoded lines: {name}*{part}\n            // if any line needs to be encoded then the first line (part==0) is always encoded\n            key: key + '*' + i + (item.encoded ? '*' : ''),\n            value: item.line\n        }));\n    },\n\n    /**\n     * Parses a header value with key=value arguments into a structured\n     * object.\n     *\n     *   parseHeaderValue('content-type: text/plain; CHARSET='UTF-8'') ->\n     *   {\n     *     'value': 'text/plain',\n     *     'params': {\n     *       'charset': 'UTF-8'\n     *     }\n     *   }\n     *\n     * @param {String} str Header value\n     * @return {Object} Header value as a parsed structure\n     */\n    parseHeaderValue(str) {\n        let response = {\n            value: false,\n            params: {}\n        };\n        let key = false;\n        let value = '';\n        let type = 'value';\n        let quote = false;\n        let escaped = false;\n        let chr;\n\n        for (let i = 0, len = str.length; i < len; i++) {\n            chr = str.charAt(i);\n            if (type === 'key') {\n                if (chr === '=') {\n                    key = value.trim().toLowerCase();\n                    type = 'value';\n                    value = '';\n                    continue;\n                }\n                value += chr;\n            } else {\n                if (escaped) {\n                    value += chr;\n                } else if (chr === '\\\\') {\n                    escaped = true;\n                    continue;\n                } else if (quote && chr === quote) {\n                    quote = false;\n                } else if (!quote && chr === '\"') {\n                    quote = chr;\n                } else if (!quote && chr === ';') {\n                    if (key === false) {\n                        response.value = value.trim();\n                    } else {\n                        response.params[key] = value.trim();\n                    }\n                    type = 'key';\n                    value = '';\n                } else {\n                    value += chr;\n                }\n                escaped = false;\n            }\n        }\n\n        if (type === 'value') {\n            if (key === false) {\n                response.value = value.trim();\n            } else {\n                response.params[key] = value.trim();\n            }\n        } else if (value.trim()) {\n            response.params[value.trim().toLowerCase()] = '';\n        }\n\n        // handle parameter value continuations\n        // https://tools.ietf.org/html/rfc2231#section-3\n\n        // preprocess values\n        Object.keys(response.params).forEach(key => {\n            let actualKey, nr, match, value;\n            if ((match = key.match(/(\\*(\\d+)|\\*(\\d+)\\*|\\*)$/))) {\n                actualKey = key.substr(0, match.index);\n                nr = Number(match[2] || match[3]) || 0;\n\n                if (!response.params[actualKey] || typeof response.params[actualKey] !== 'object') {\n                    response.params[actualKey] = {\n                        charset: false,\n                        values: []\n                    };\n                }\n\n                value = response.params[key];\n\n                if (nr === 0 && match[0].substr(-1) === '*' && (match = value.match(/^([^']*)'[^']*'(.*)$/))) {\n                    response.params[actualKey].charset = match[1] || 'iso-8859-1';\n                    value = match[2];\n                }\n\n                response.params[actualKey].values[nr] = value;\n\n                // remove the old reference\n                delete response.params[key];\n            }\n        });\n\n        // concatenate split rfc2231 strings and convert encoded strings to mime encoded words\n        Object.keys(response.params).forEach(key => {\n            let value;\n            if (response.params[key] && Array.isArray(response.params[key].values)) {\n                value = response.params[key].values.map(val => val || '').join('');\n\n                if (response.params[key].charset) {\n                    // convert \"%AB\" to \"=?charset?Q?=AB?=\"\n                    response.params[key] =\n                        '=?' +\n                        response.params[key].charset +\n                        '?Q?' +\n                        value\n                            // fix invalidly encoded chars\n                            .replace(/[=?_\\s]/g, s => {\n                                let c = s.charCodeAt(0).toString(16);\n                                if (s === ' ') {\n                                    return '_';\n                                } else {\n                                    return '%' + (c.length < 2 ? '0' : '') + c;\n                                }\n                            })\n                            // change from urlencoding to percent encoding\n                            .replace(/%/g, '=') +\n                        '?=';\n                } else {\n                    response.params[key] = value;\n                }\n            }\n        });\n\n        return response;\n    },\n\n    /**\n     * Returns file extension for a content type string. If no suitable extensions\n     * are found, 'bin' is used as the default extension\n     *\n     * @param {String} mimeType Content type to be checked for\n     * @return {String} File extension\n     */\n    detectExtension: mimeType => mimeTypes.detectExtension(mimeType),\n\n    /**\n     * Returns content type for a file extension. If no suitable content types\n     * are found, 'application/octet-stream' is used as the default content type\n     *\n     * @param {String} extension Extension to be checked for\n     * @return {String} File extension\n     */\n    detectMimeType: extension => mimeTypes.detectMimeType(extension),\n\n    /**\n     * Folds long lines, useful for folding header lines (afterSpace=false) and\n     * flowed text (afterSpace=true)\n     *\n     * @param {String} str String to be folded\n     * @param {Number} [lineLength=76] Maximum length of a line\n     * @param {Boolean} afterSpace If true, leave a space in th end of a line\n     * @return {String} String with folded lines\n     */\n    foldLines(str, lineLength, afterSpace) {\n        str = (str || '').toString();\n        lineLength = lineLength || 76;\n\n        let pos = 0,\n            len = str.length,\n            result = '',\n            line,\n            match;\n\n        while (pos < len) {\n            line = str.substr(pos, lineLength);\n            if (line.length < lineLength) {\n                result += line;\n                break;\n            }\n            if ((match = line.match(/^[^\\n\\r]*(\\r?\\n|\\r)/))) {\n                line = match[0];\n                result += line;\n                pos += line.length;\n                continue;\n            } else if ((match = line.match(/(\\s+)[^\\s]*$/)) && match[0].length - (afterSpace ? (match[1] || '').length : 0) < line.length) {\n                line = line.substr(0, line.length - (match[0].length - (afterSpace ? (match[1] || '').length : 0)));\n            } else if ((match = str.substr(pos + line.length).match(/^[^\\s]+(\\s*)/))) {\n                line = line + match[0].substr(0, match[0].length - (!afterSpace ? (match[1] || '').length : 0));\n            }\n\n            result += line;\n            pos += line.length;\n            if (pos < len) {\n                result += '\\r\\n';\n            }\n        }\n\n        return result;\n    },\n\n    /**\n     * Splits a mime encoded string. Needed for dividing mime words into smaller chunks\n     *\n     * @param {String} str Mime encoded string to be split up\n     * @param {Number} maxlen Maximum length of characters for one part (minimum 12)\n     * @return {Array} Split string\n     */\n    splitMimeEncodedString: (str, maxlen) => {\n        let curLine,\n            match,\n            chr,\n            done,\n            lines = [];\n\n        // require at least 12 symbols to fit possible 4 octet UTF-8 sequences\n        maxlen = Math.max(maxlen || 0, 12);\n\n        while (str.length) {\n            curLine = str.substr(0, maxlen);\n\n            // move incomplete escaped char back to main\n            if ((match = curLine.match(/[=][0-9A-F]?$/i))) {\n                curLine = curLine.substr(0, match.index);\n            }\n\n            done = false;\n            while (!done) {\n                done = true;\n                // check if not middle of a unicode char sequence\n                if ((match = str.substr(curLine.length).match(/^[=]([0-9A-F]{2})/i))) {\n                    chr = parseInt(match[1], 16);\n                    // invalid sequence, move one char back anc recheck\n                    if (chr < 0xc2 && chr > 0x7f) {\n                        curLine = curLine.substr(0, curLine.length - 3);\n                        done = false;\n                    }\n                }\n            }\n\n            if (curLine.length) {\n                lines.push(curLine);\n            }\n            str = str.substr(curLine.length);\n        }\n\n        return lines;\n    },\n\n    encodeURICharComponent: chr => {\n        let res = '';\n        let ord = chr.charCodeAt(0).toString(16).toUpperCase();\n\n        if (ord.length % 2) {\n            ord = '0' + ord;\n        }\n\n        if (ord.length > 2) {\n            for (let i = 0, len = ord.length / 2; i < len; i++) {\n                res += '%' + ord.substr(i, 2);\n            }\n        } else {\n            res += '%' + ord;\n        }\n\n        return res;\n    },\n\n    safeEncodeURIComponent(str) {\n        str = (str || '').toString();\n\n        try {\n            // might throw if we try to encode invalid sequences, eg. partial emoji\n            str = encodeURIComponent(str);\n        } catch (E) {\n            // should never run\n            return str.replace(/[^\\x00-\\x1F *'()<>@,;:\\\\\"[\\]?=\\u007F-\\uFFFF]+/g, '');\n        }\n\n        // ensure chars that are not handled by encodeURICompent are converted as well\n        return str.replace(/[\\x00-\\x1F *'()<>@,;:\\\\\"[\\]?=\\u007F-\\uFFFF]/g, chr => this.encodeURICharComponent(chr));\n    }\n};\n", "'use strict';\n\n/**\n * Converts tokens for a single address into an address object\n *\n * @param {Array} tokens Tokens object\n * @return {Object} Address object\n */\nfunction _handleAddress(tokens) {\n    let isGroup = false;\n    let state = 'text';\n    let address;\n    let addresses = [];\n    let data = {\n        address: [],\n        comment: [],\n        group: [],\n        text: []\n    };\n    let i;\n    let len;\n\n    // Filter out <addresses>, (comments) and regular text\n    for (i = 0, len = tokens.length; i < len; i++) {\n        let token = tokens[i];\n        let prevToken = i ? tokens[i - 1] : null;\n        if (token.type === 'operator') {\n            switch (token.value) {\n                case '<':\n                    state = 'address';\n                    break;\n                case '(':\n                    state = 'comment';\n                    break;\n                case ':':\n                    state = 'group';\n                    isGroup = true;\n                    break;\n                default:\n                    state = 'text';\n                    break;\n            }\n        } else if (token.value) {\n            if (state === 'address') {\n                // handle use case where unquoted name includes a \"<\"\n                // Apple Mail truncates everything between an unexpected < and an address\n                // and so will we\n                token.value = token.value.replace(/^[^<]*<\\s*/, '');\n            }\n\n            if (prevToken && prevToken.noBreak && data[state].length) {\n                // join values\n                data[state][data[state].length - 1] += token.value;\n            } else {\n                data[state].push(token.value);\n            }\n        }\n    }\n\n    // If there is no text but a comment, replace the two\n    if (!data.text.length && data.comment.length) {\n        data.text = data.comment;\n        data.comment = [];\n    }\n\n    if (isGroup) {\n        // http://tools.ietf.org/html/rfc2822#appendix-A.1.3\n        data.text = data.text.join(' ');\n        addresses.push({\n            name: data.text || (address && address.name),\n            group: data.group.length ? addressparser(data.group.join(',')) : []\n        });\n    } else {\n        // If no address was found, try to detect one from regular text\n        if (!data.address.length && data.text.length) {\n            for (i = data.text.length - 1; i >= 0; i--) {\n                if (data.text[i].match(/^[^@\\s]+@[^@\\s]+$/)) {\n                    data.address = data.text.splice(i, 1);\n                    break;\n                }\n            }\n\n            let _regexHandler = function (address) {\n                if (!data.address.length) {\n                    data.address = [address.trim()];\n                    return ' ';\n                } else {\n                    return address;\n                }\n            };\n\n            // still no address\n            if (!data.address.length) {\n                for (i = data.text.length - 1; i >= 0; i--) {\n                    // fixed the regex to parse email address correctly when email address has more than one @\n                    data.text[i] = data.text[i].replace(/\\s*\\b[^@\\s]+@[^\\s]+\\b\\s*/, _regexHandler).trim();\n                    if (data.address.length) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        // If there's still is no text but a comment exixts, replace the two\n        if (!data.text.length && data.comment.length) {\n            data.text = data.comment;\n            data.comment = [];\n        }\n\n        // Keep only the first address occurence, push others to regular text\n        if (data.address.length > 1) {\n            data.text = data.text.concat(data.address.splice(1));\n        }\n\n        // Join values with spaces\n        data.text = data.text.join(' ');\n        data.address = data.address.join(' ');\n\n        if (!data.address && isGroup) {\n            return [];\n        } else {\n            address = {\n                address: data.address || data.text || '',\n                name: data.text || data.address || ''\n            };\n\n            if (address.address === address.name) {\n                if ((address.address || '').match(/@/)) {\n                    address.name = '';\n                } else {\n                    address.address = '';\n                }\n            }\n\n            addresses.push(address);\n        }\n    }\n\n    return addresses;\n}\n\n/**\n * Creates a Tokenizer object for tokenizing address field strings\n *\n * @constructor\n * @param {String} str Address field string\n */\nclass Tokenizer {\n    constructor(str) {\n        this.str = (str || '').toString();\n        this.operatorCurrent = '';\n        this.operatorExpecting = '';\n        this.node = null;\n        this.escaped = false;\n\n        this.list = [];\n        /**\n         * Operator tokens and which tokens are expected to end the sequence\n         */\n        this.operators = {\n            '\"': '\"',\n            '(': ')',\n            '<': '>',\n            ',': '',\n            ':': ';',\n            // Semicolons are not a legal delimiter per the RFC2822 grammar other\n            // than for terminating a group, but they are also not valid for any\n            // other use in this context.  Given that some mail clients have\n            // historically allowed the semicolon as a delimiter equivalent to the\n            // comma in their UI, it makes sense to treat them the same as a comma\n            // when used outside of a group.\n            ';': ''\n        };\n    }\n\n    /**\n     * Tokenizes the original input string\n     *\n     * @return {Array} An array of operator|text tokens\n     */\n    tokenize() {\n        let list = [];\n\n        for (let i = 0, len = this.str.length; i < len; i++) {\n            let chr = this.str.charAt(i);\n            let nextChr = i < len - 1 ? this.str.charAt(i + 1) : null;\n            this.checkChar(chr, nextChr);\n        }\n\n        this.list.forEach(node => {\n            node.value = (node.value || '').toString().trim();\n            if (node.value) {\n                list.push(node);\n            }\n        });\n\n        return list;\n    }\n\n    /**\n     * Checks if a character is an operator or text and acts accordingly\n     *\n     * @param {String} chr Character from the address field\n     */\n    checkChar(chr, nextChr) {\n        if (this.escaped) {\n            // ignore next condition blocks\n        } else if (chr === this.operatorExpecting) {\n            this.node = {\n                type: 'operator',\n                value: chr\n            };\n\n            if (nextChr && ![' ', '\\t', '\\r', '\\n', ',', ';'].includes(nextChr)) {\n                this.node.noBreak = true;\n            }\n\n            this.list.push(this.node);\n            this.node = null;\n            this.operatorExpecting = '';\n            this.escaped = false;\n\n            return;\n        } else if (!this.operatorExpecting && chr in this.operators) {\n            this.node = {\n                type: 'operator',\n                value: chr\n            };\n            this.list.push(this.node);\n            this.node = null;\n            this.operatorExpecting = this.operators[chr];\n            this.escaped = false;\n            return;\n        } else if (['\"', \"'\"].includes(this.operatorExpecting) && chr === '\\\\') {\n            this.escaped = true;\n            return;\n        }\n\n        if (!this.node) {\n            this.node = {\n                type: 'text',\n                value: ''\n            };\n            this.list.push(this.node);\n        }\n\n        if (chr === '\\n') {\n            // Convert newlines to spaces. Carriage return is ignored as \\r and \\n usually\n            // go together anyway and there already is a WS for \\n. Lone \\r means something is fishy.\n            chr = ' ';\n        }\n\n        if (chr.charCodeAt(0) >= 0x21 || [' ', '\\t'].includes(chr)) {\n            // skip command bytes\n            this.node.value += chr;\n        }\n\n        this.escaped = false;\n    }\n}\n\n/**\n * Parses structured e-mail addresses from an address field\n *\n * Example:\n *\n *    'Name <address@domain>'\n *\n * will be converted to\n *\n *     [{name: 'Name', address: 'address@domain'}]\n *\n * @param {String} str Address field\n * @return {Array} An array of address objects\n */\nfunction addressparser(str, options) {\n    options = options || {};\n\n    let tokenizer = new Tokenizer(str);\n    let tokens = tokenizer.tokenize();\n\n    let addresses = [];\n    let address = [];\n    let parsedAddresses = [];\n\n    tokens.forEach(token => {\n        if (token.type === 'operator' && (token.value === ',' || token.value === ';')) {\n            if (address.length) {\n                addresses.push(address);\n            }\n            address = [];\n        } else {\n            address.push(token);\n        }\n    });\n\n    if (address.length) {\n        addresses.push(address);\n    }\n\n    addresses.forEach(address => {\n        address = _handleAddress(address);\n        if (address.length) {\n            parsedAddresses = parsedAddresses.concat(address);\n        }\n    });\n\n    if (options.flatten) {\n        let addresses = [];\n        let walkAddressList = list => {\n            list.forEach(address => {\n                if (address.group) {\n                    return walkAddressList(address.group);\n                } else {\n                    addresses.push(address);\n                }\n            });\n        };\n        walkAddressList(parsedAddresses);\n        return addresses;\n    }\n\n    return parsedAddresses;\n}\n\n// expose to the world\nmodule.exports = addressparser;\n", "'use strict';\n\nconst Transform = require('stream').Transform;\n\nclass LastNewline extends Transform {\n    constructor() {\n        super();\n        this.lastByte = false;\n    }\n\n    _transform(chunk, encoding, done) {\n        if (chunk.length) {\n            this.lastByte = chunk[chunk.length - 1];\n        }\n\n        this.push(chunk);\n        done();\n    }\n\n    _flush(done) {\n        if (this.lastByte === 0x0a) {\n            return done();\n        }\n        if (this.lastByte === 0x0d) {\n            this.push(Buffer.from('\\n'));\n            return done();\n        }\n        this.push(Buffer.from('\\r\\n'));\n        return done();\n    }\n}\n\nmodule.exports = LastNewline;\n", "'use strict';\n\nconst stream = require('stream');\nconst Transform = stream.Transform;\n\n/**\n * Ensures that only <CR><LF> sequences are used for linebreaks\n *\n * @param {Object} options Stream options\n */\nclass LeWindows extends Transform {\n    constructor(options) {\n        super(options);\n        // init Transform\n        this.options = options || {};\n        this.lastByte = false;\n    }\n\n    /**\n     * Escapes dots\n     */\n    _transform(chunk, encoding, done) {\n        let buf;\n        let lastPos = 0;\n\n        for (let i = 0, len = chunk.length; i < len; i++) {\n            if (chunk[i] === 0x0a) {\n                // \\n\n                if ((i && chunk[i - 1] !== 0x0d) || (!i && this.lastByte !== 0x0d)) {\n                    if (i > lastPos) {\n                        buf = chunk.slice(lastPos, i);\n                        this.push(buf);\n                    }\n                    this.push(Buffer.from('\\r\\n'));\n                    lastPos = i + 1;\n                }\n            }\n        }\n\n        if (lastPos && lastPos < chunk.length) {\n            buf = chunk.slice(lastPos);\n            this.push(buf);\n        } else if (!lastPos) {\n            this.push(chunk);\n        }\n\n        this.lastByte = chunk[chunk.length - 1];\n        done();\n    }\n}\n\nmodule.exports = LeWindows;\n", "'use strict';\n\nconst stream = require('stream');\nconst Transform = stream.Transform;\n\n/**\n * Ensures that only <LF> is used for linebreaks\n *\n * @param {Object} options Stream options\n */\nclass LeWindows extends Transform {\n    constructor(options) {\n        super(options);\n        // init Transform\n        this.options = options || {};\n    }\n\n    /**\n     * Escapes dots\n     */\n    _transform(chunk, encoding, done) {\n        let buf;\n        let lastPos = 0;\n\n        for (let i = 0, len = chunk.length; i < len; i++) {\n            if (chunk[i] === 0x0d) {\n                // \\n\n                buf = chunk.slice(lastPos, i);\n                lastPos = i + 1;\n                this.push(buf);\n            }\n        }\n        if (lastPos && lastPos < chunk.length) {\n            buf = chunk.slice(lastPos);\n            this.push(buf);\n        } else if (!lastPos) {\n            this.push(chunk);\n        }\n        done();\n    }\n}\n\nmodule.exports = LeWindows;\n", "/* eslint no-undefined: 0, prefer-spread: 0, no-control-regex: 0 */\n\n'use strict';\n\nconst crypto = require('crypto');\nconst fs = require('fs');\nconst punycode = require('../punycode');\nconst PassThrough = require('stream').PassThrough;\nconst shared = require('../shared');\n\nconst mimeFuncs = require('../mime-funcs');\nconst qp = require('../qp');\nconst base64 = require('../base64');\nconst addressparser = require('../addressparser');\nconst nmfetch = require('../fetch');\nconst LastNewline = require('./last-newline');\n\nconst LeWindows = require('./le-windows');\nconst LeUnix = require('./le-unix');\n\n/**\n * Creates a new mime tree node. Assumes 'multipart/*' as the content type\n * if it is a branch, anything else counts as leaf. If rootNode is missing from\n * the options, assumes this is the root.\n *\n * @param {String} contentType Define the content type for the node. Can be left blank for attachments (derived from filename)\n * @param {Object} [options] optional options\n * @param {Object} [options.rootNode] root node for this tree\n * @param {Object} [options.parentNode] immediate parent for this node\n * @param {Object} [options.filename] filename for an attachment node\n * @param {String} [options.baseBoundary] shared part of the unique multipart boundary\n * @param {Boolean} [options.keepBcc] If true, do not exclude Bcc from the generated headers\n * @param {Function} [options.normalizeHeaderKey] method to normalize header keys for custom caseing\n * @param {String} [options.textEncoding] either 'Q' (the default) or 'B'\n */\nclass MimeNode {\n    constructor(contentType, options) {\n        this.nodeCounter = 0;\n\n        options = options || {};\n\n        /**\n         * shared part of the unique multipart boundary\n         */\n        this.baseBoundary = options.baseBoundary || crypto.randomBytes(8).toString('hex');\n        this.boundaryPrefix = options.boundaryPrefix || '--_NmP';\n\n        this.disableFileAccess = !!options.disableFileAccess;\n        this.disableUrlAccess = !!options.disableUrlAccess;\n\n        this.normalizeHeaderKey = options.normalizeHeaderKey;\n\n        /**\n         * If date headers is missing and current node is the root, this value is used instead\n         */\n        this.date = new Date();\n\n        /**\n         * Root node for current mime tree\n         */\n        this.rootNode = options.rootNode || this;\n\n        /**\n         * If true include Bcc in generated headers (if available)\n         */\n        this.keepBcc = !!options.keepBcc;\n\n        /**\n         * If filename is specified but contentType is not (probably an attachment)\n         * detect the content type from filename extension\n         */\n        if (options.filename) {\n            /**\n             * Filename for this node. Useful with attachments\n             */\n            this.filename = options.filename;\n            if (!contentType) {\n                contentType = mimeFuncs.detectMimeType(this.filename.split('.').pop());\n            }\n        }\n\n        /**\n         * Indicates which encoding should be used for header strings: \"Q\" or \"B\"\n         */\n        this.textEncoding = (options.textEncoding || '').toString().trim().charAt(0).toUpperCase();\n\n        /**\n         * Immediate parent for this node (or undefined if not set)\n         */\n        this.parentNode = options.parentNode;\n\n        /**\n         * Hostname for default message-id values\n         */\n        this.hostname = options.hostname;\n\n        /**\n         * If set to 'win' then uses \\r\\n, if 'linux' then \\n. If not set (or `raw` is used) then newlines are kept as is.\n         */\n        this.newline = options.newline;\n\n        /**\n         * An array for possible child nodes\n         */\n        this.childNodes = [];\n\n        /**\n         * Used for generating unique boundaries (prepended to the shared base)\n         */\n        this._nodeId = ++this.rootNode.nodeCounter;\n\n        /**\n         * A list of header values for this node in the form of [{key:'', value:''}]\n         */\n        this._headers = [];\n\n        /**\n         * True if the content only uses ASCII printable characters\n         * @type {Boolean}\n         */\n        this._isPlainText = false;\n\n        /**\n         * True if the content is plain text but has longer lines than allowed\n         * @type {Boolean}\n         */\n        this._hasLongLines = false;\n\n        /**\n         * If set, use instead this value for envelopes instead of generating one\n         * @type {Boolean}\n         */\n        this._envelope = false;\n\n        /**\n         * If set then use this value as the stream content instead of building it\n         * @type {String|Buffer|Stream}\n         */\n        this._raw = false;\n\n        /**\n         * Additional transform streams that the message will be piped before\n         * exposing by createReadStream\n         * @type {Array}\n         */\n        this._transforms = [];\n\n        /**\n         * Additional process functions that the message will be piped through before\n         * exposing by createReadStream. These functions are run after transforms\n         * @type {Array}\n         */\n        this._processFuncs = [];\n\n        /**\n         * If content type is set (or derived from the filename) add it to headers\n         */\n        if (contentType) {\n            this.setHeader('Content-Type', contentType);\n        }\n    }\n\n    /////// PUBLIC METHODS\n\n    /**\n     * Creates and appends a child node.Arguments provided are passed to MimeNode constructor\n     *\n     * @param {String} [contentType] Optional content type\n     * @param {Object} [options] Optional options object\n     * @return {Object} Created node object\n     */\n    createChild(contentType, options) {\n        if (!options && typeof contentType === 'object') {\n            options = contentType;\n            contentType = undefined;\n        }\n        let node = new MimeNode(contentType, options);\n        this.appendChild(node);\n        return node;\n    }\n\n    /**\n     * Appends an existing node to the mime tree. Removes the node from an existing\n     * tree if needed\n     *\n     * @param {Object} childNode node to be appended\n     * @return {Object} Appended node object\n     */\n    appendChild(childNode) {\n        if (childNode.rootNode !== this.rootNode) {\n            childNode.rootNode = this.rootNode;\n            childNode._nodeId = ++this.rootNode.nodeCounter;\n        }\n\n        childNode.parentNode = this;\n\n        this.childNodes.push(childNode);\n        return childNode;\n    }\n\n    /**\n     * Replaces current node with another node\n     *\n     * @param {Object} node Replacement node\n     * @return {Object} Replacement node\n     */\n    replace(node) {\n        if (node === this) {\n            return this;\n        }\n\n        this.parentNode.childNodes.forEach((childNode, i) => {\n            if (childNode === this) {\n                node.rootNode = this.rootNode;\n                node.parentNode = this.parentNode;\n                node._nodeId = this._nodeId;\n\n                this.rootNode = this;\n                this.parentNode = undefined;\n\n                node.parentNode.childNodes[i] = node;\n            }\n        });\n\n        return node;\n    }\n\n    /**\n     * Removes current node from the mime tree\n     *\n     * @return {Object} removed node\n     */\n    remove() {\n        if (!this.parentNode) {\n            return this;\n        }\n\n        for (let i = this.parentNode.childNodes.length - 1; i >= 0; i--) {\n            if (this.parentNode.childNodes[i] === this) {\n                this.parentNode.childNodes.splice(i, 1);\n                this.parentNode = undefined;\n                this.rootNode = this;\n                return this;\n            }\n        }\n    }\n\n    /**\n     * Sets a header value. If the value for selected key exists, it is overwritten.\n     * You can set multiple values as well by using [{key:'', value:''}] or\n     * {key: 'value'} as the first argument.\n     *\n     * @param {String|Array|Object} key Header key or a list of key value pairs\n     * @param {String} value Header value\n     * @return {Object} current node\n     */\n    setHeader(key, value) {\n        let added = false,\n            headerValue;\n\n        // Allow setting multiple headers at once\n        if (!value && key && typeof key === 'object') {\n            // allow {key:'content-type', value: 'text/plain'}\n            if (key.key && 'value' in key) {\n                this.setHeader(key.key, key.value);\n            } else if (Array.isArray(key)) {\n                // allow [{key:'content-type', value: 'text/plain'}]\n                key.forEach(i => {\n                    this.setHeader(i.key, i.value);\n                });\n            } else {\n                // allow {'content-type': 'text/plain'}\n                Object.keys(key).forEach(i => {\n                    this.setHeader(i, key[i]);\n                });\n            }\n            return this;\n        }\n\n        key = this._normalizeHeaderKey(key);\n\n        headerValue = {\n            key,\n            value\n        };\n\n        // Check if the value exists and overwrite\n        for (let i = 0, len = this._headers.length; i < len; i++) {\n            if (this._headers[i].key === key) {\n                if (!added) {\n                    // replace the first match\n                    this._headers[i] = headerValue;\n                    added = true;\n                } else {\n                    // remove following matches\n                    this._headers.splice(i, 1);\n                    i--;\n                    len--;\n                }\n            }\n        }\n\n        // match not found, append the value\n        if (!added) {\n            this._headers.push(headerValue);\n        }\n\n        return this;\n    }\n\n    /**\n     * Adds a header value. If the value for selected key exists, the value is appended\n     * as a new field and old one is not touched.\n     * You can set multiple values as well by using [{key:'', value:''}] or\n     * {key: 'value'} as the first argument.\n     *\n     * @param {String|Array|Object} key Header key or a list of key value pairs\n     * @param {String} value Header value\n     * @return {Object} current node\n     */\n    addHeader(key, value) {\n        // Allow setting multiple headers at once\n        if (!value && key && typeof key === 'object') {\n            // allow {key:'content-type', value: 'text/plain'}\n            if (key.key && key.value) {\n                this.addHeader(key.key, key.value);\n            } else if (Array.isArray(key)) {\n                // allow [{key:'content-type', value: 'text/plain'}]\n                key.forEach(i => {\n                    this.addHeader(i.key, i.value);\n                });\n            } else {\n                // allow {'content-type': 'text/plain'}\n                Object.keys(key).forEach(i => {\n                    this.addHeader(i, key[i]);\n                });\n            }\n            return this;\n        } else if (Array.isArray(value)) {\n            value.forEach(val => {\n                this.addHeader(key, val);\n            });\n            return this;\n        }\n\n        this._headers.push({\n            key: this._normalizeHeaderKey(key),\n            value\n        });\n\n        return this;\n    }\n\n    /**\n     * Retrieves the first mathcing value of a selected key\n     *\n     * @param {String} key Key to search for\n     * @retun {String} Value for the key\n     */\n    getHeader(key) {\n        key = this._normalizeHeaderKey(key);\n        for (let i = 0, len = this._headers.length; i < len; i++) {\n            if (this._headers[i].key === key) {\n                return this._headers[i].value;\n            }\n        }\n    }\n\n    /**\n     * Sets body content for current node. If the value is a string, charset is added automatically\n     * to Content-Type (if it is text/*). If the value is a Buffer, you need to specify\n     * the charset yourself\n     *\n     * @param (String|Buffer) content Body content\n     * @return {Object} current node\n     */\n    setContent(content) {\n        this.content = content;\n        if (typeof this.content.pipe === 'function') {\n            // pre-stream handler. might be triggered if a stream is set as content\n            // and 'error' fires before anything is done with this stream\n            this._contentErrorHandler = err => {\n                this.content.removeListener('error', this._contentErrorHandler);\n                this.content = err;\n            };\n            this.content.once('error', this._contentErrorHandler);\n        } else if (typeof this.content === 'string') {\n            this._isPlainText = mimeFuncs.isPlainText(this.content);\n            if (this._isPlainText && mimeFuncs.hasLongerLines(this.content, 76)) {\n                // If there are lines longer than 76 symbols/bytes do not use 7bit\n                this._hasLongLines = true;\n            }\n        }\n        return this;\n    }\n\n    build(callback) {\n        let promise;\n\n        if (!callback) {\n            promise = new Promise((resolve, reject) => {\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n\n        let stream = this.createReadStream();\n        let buf = [];\n        let buflen = 0;\n        let returned = false;\n\n        stream.on('readable', () => {\n            let chunk;\n\n            while ((chunk = stream.read()) !== null) {\n                buf.push(chunk);\n                buflen += chunk.length;\n            }\n        });\n\n        stream.once('error', err => {\n            if (returned) {\n                return;\n            }\n            returned = true;\n\n            return callback(err);\n        });\n\n        stream.once('end', chunk => {\n            if (returned) {\n                return;\n            }\n            returned = true;\n\n            if (chunk && chunk.length) {\n                buf.push(chunk);\n                buflen += chunk.length;\n            }\n            return callback(null, Buffer.concat(buf, buflen));\n        });\n\n        return promise;\n    }\n\n    getTransferEncoding() {\n        let transferEncoding = false;\n        let contentType = (this.getHeader('Content-Type') || '').toString().toLowerCase().trim();\n\n        if (this.content) {\n            transferEncoding = (this.getHeader('Content-Transfer-Encoding') || '').toString().toLowerCase().trim();\n            if (!transferEncoding || !['base64', 'quoted-printable'].includes(transferEncoding)) {\n                if (/^text\\//i.test(contentType)) {\n                    // If there are no special symbols, no need to modify the text\n                    if (this._isPlainText && !this._hasLongLines) {\n                        transferEncoding = '7bit';\n                    } else if (typeof this.content === 'string' || this.content instanceof Buffer) {\n                        // detect preferred encoding for string value\n                        transferEncoding = this._getTextEncoding(this.content) === 'Q' ? 'quoted-printable' : 'base64';\n                    } else {\n                        // we can not check content for a stream, so either use preferred encoding or fallback to QP\n                        transferEncoding = this.textEncoding === 'B' ? 'base64' : 'quoted-printable';\n                    }\n                } else if (!/^(multipart|message)\\//i.test(contentType)) {\n                    transferEncoding = transferEncoding || 'base64';\n                }\n            }\n        }\n        return transferEncoding;\n    }\n\n    /**\n     * Builds the header block for the mime node. Append \\r\\n\\r\\n before writing the content\n     *\n     * @returns {String} Headers\n     */\n    buildHeaders() {\n        let transferEncoding = this.getTransferEncoding();\n        let headers = [];\n\n        if (transferEncoding) {\n            this.setHeader('Content-Transfer-Encoding', transferEncoding);\n        }\n\n        if (this.filename && !this.getHeader('Content-Disposition')) {\n            this.setHeader('Content-Disposition', 'attachment');\n        }\n\n        // Ensure mandatory header fields\n        if (this.rootNode === this) {\n            if (!this.getHeader('Date')) {\n                this.setHeader('Date', this.date.toUTCString().replace(/GMT/, '+0000'));\n            }\n\n            // ensure that Message-Id is present\n            this.messageId();\n\n            if (!this.getHeader('MIME-Version')) {\n                this.setHeader('MIME-Version', '1.0');\n            }\n\n            // Ensure that Content-Type is the last header for the root node\n            for (let i = this._headers.length - 2; i >= 0; i--) {\n                let header = this._headers[i];\n                if (header.key === 'Content-Type') {\n                    this._headers.splice(i, 1);\n                    this._headers.push(header);\n                }\n            }\n        }\n\n        this._headers.forEach(header => {\n            let key = header.key;\n            let value = header.value;\n            let structured;\n            let param;\n            let options = {};\n            let formattedHeaders = ['From', 'Sender', 'To', 'Cc', 'Bcc', 'Reply-To', 'Date', 'References'];\n\n            if (value && typeof value === 'object' && !formattedHeaders.includes(key)) {\n                Object.keys(value).forEach(key => {\n                    if (key !== 'value') {\n                        options[key] = value[key];\n                    }\n                });\n                value = (value.value || '').toString();\n                if (!value.trim()) {\n                    return;\n                }\n            }\n\n            if (options.prepared) {\n                // header value is\n                if (options.foldLines) {\n                    headers.push(mimeFuncs.foldLines(key + ': ' + value));\n                } else {\n                    headers.push(key + ': ' + value);\n                }\n                return;\n            }\n\n            switch (header.key) {\n                case 'Content-Disposition':\n                    structured = mimeFuncs.parseHeaderValue(value);\n                    if (this.filename) {\n                        structured.params.filename = this.filename;\n                    }\n                    value = mimeFuncs.buildHeaderValue(structured);\n                    break;\n\n                case 'Content-Type':\n                    structured = mimeFuncs.parseHeaderValue(value);\n\n                    this._handleContentType(structured);\n\n                    if (structured.value.match(/^text\\/plain\\b/) && typeof this.content === 'string' && /[\\u0080-\\uFFFF]/.test(this.content)) {\n                        structured.params.charset = 'utf-8';\n                    }\n\n                    value = mimeFuncs.buildHeaderValue(structured);\n\n                    if (this.filename) {\n                        // add support for non-compliant clients like QQ webmail\n                        // we can't build the value with buildHeaderValue as the value is non standard and\n                        // would be converted to parameter continuation encoding that we do not want\n                        param = this._encodeWords(this.filename);\n\n                        if (param !== this.filename || /[\\s'\"\\\\;:/=(),<>@[\\]?]|^-/.test(param)) {\n                            // include value in quotes if needed\n                            param = '\"' + param + '\"';\n                        }\n                        value += '; name=' + param;\n                    }\n                    break;\n\n                case 'Bcc':\n                    if (!this.keepBcc) {\n                        // skip BCC values\n                        return;\n                    }\n                    break;\n            }\n\n            value = this._encodeHeaderValue(key, value);\n\n            // skip empty lines\n            if (!(value || '').toString().trim()) {\n                return;\n            }\n\n            if (typeof this.normalizeHeaderKey === 'function') {\n                let normalized = this.normalizeHeaderKey(key, value);\n                if (normalized && typeof normalized === 'string' && normalized.length) {\n                    key = normalized;\n                }\n            }\n\n            headers.push(mimeFuncs.foldLines(key + ': ' + value, 76));\n        });\n\n        return headers.join('\\r\\n');\n    }\n\n    /**\n     * Streams the rfc2822 message from the current node. If this is a root node,\n     * mandatory header fields are set if missing (Date, Message-Id, MIME-Version)\n     *\n     * @return {String} Compiled message\n     */\n    createReadStream(options) {\n        options = options || {};\n\n        let stream = new PassThrough(options);\n        let outputStream = stream;\n        let transform;\n\n        this.stream(stream, options, err => {\n            if (err) {\n                outputStream.emit('error', err);\n                return;\n            }\n            stream.end();\n        });\n\n        for (let i = 0, len = this._transforms.length; i < len; i++) {\n            transform = typeof this._transforms[i] === 'function' ? this._transforms[i]() : this._transforms[i];\n            outputStream.once('error', err => {\n                transform.emit('error', err);\n            });\n            outputStream = outputStream.pipe(transform);\n        }\n\n        // ensure terminating newline after possible user transforms\n        transform = new LastNewline();\n        outputStream.once('error', err => {\n            transform.emit('error', err);\n        });\n        outputStream = outputStream.pipe(transform);\n\n        // dkim and stuff\n        for (let i = 0, len = this._processFuncs.length; i < len; i++) {\n            transform = this._processFuncs[i];\n            outputStream = transform(outputStream);\n        }\n\n        if (this.newline) {\n            const winbreak = ['win', 'windows', 'dos', '\\r\\n'].includes(this.newline.toString().toLowerCase());\n            const newlineTransform = winbreak ? new LeWindows() : new LeUnix();\n\n            const stream = outputStream.pipe(newlineTransform);\n            outputStream.on('error', err => stream.emit('error', err));\n            return stream;\n        }\n\n        return outputStream;\n    }\n\n    /**\n     * Appends a transform stream object to the transforms list. Final output\n     * is passed through this stream before exposing\n     *\n     * @param {Object} transform Read-Write stream\n     */\n    transform(transform) {\n        this._transforms.push(transform);\n    }\n\n    /**\n     * Appends a post process function. The functon is run after transforms and\n     * uses the following syntax\n     *\n     *   processFunc(input) -> outputStream\n     *\n     * @param {Object} processFunc Read-Write stream\n     */\n    processFunc(processFunc) {\n        this._processFuncs.push(processFunc);\n    }\n\n    stream(outputStream, options, done) {\n        let transferEncoding = this.getTransferEncoding();\n        let contentStream;\n        let localStream;\n\n        // protect actual callback against multiple triggering\n        let returned = false;\n        let callback = err => {\n            if (returned) {\n                return;\n            }\n            returned = true;\n            done(err);\n        };\n\n        // for multipart nodes, push child nodes\n        // for content nodes end the stream\n        let finalize = () => {\n            let childId = 0;\n            let processChildNode = () => {\n                if (childId >= this.childNodes.length) {\n                    outputStream.write('\\r\\n--' + this.boundary + '--\\r\\n');\n                    return callback();\n                }\n                let child = this.childNodes[childId++];\n                outputStream.write((childId > 1 ? '\\r\\n' : '') + '--' + this.boundary + '\\r\\n');\n                child.stream(outputStream, options, err => {\n                    if (err) {\n                        return callback(err);\n                    }\n                    setImmediate(processChildNode);\n                });\n            };\n\n            if (this.multipart) {\n                setImmediate(processChildNode);\n            } else {\n                return callback();\n            }\n        };\n\n        // pushes node content\n        let sendContent = () => {\n            if (this.content) {\n                if (Object.prototype.toString.call(this.content) === '[object Error]') {\n                    // content is already errored\n                    return callback(this.content);\n                }\n\n                if (typeof this.content.pipe === 'function') {\n                    this.content.removeListener('error', this._contentErrorHandler);\n                    this._contentErrorHandler = err => callback(err);\n                    this.content.once('error', this._contentErrorHandler);\n                }\n\n                let createStream = () => {\n                    if (['quoted-printable', 'base64'].includes(transferEncoding)) {\n                        contentStream = new (transferEncoding === 'base64' ? base64 : qp).Encoder(options);\n\n                        contentStream.pipe(outputStream, {\n                            end: false\n                        });\n                        contentStream.once('end', finalize);\n                        contentStream.once('error', err => callback(err));\n\n                        localStream = this._getStream(this.content);\n                        localStream.pipe(contentStream);\n                    } else {\n                        // anything that is not QP or Base54 passes as-is\n                        localStream = this._getStream(this.content);\n                        localStream.pipe(outputStream, {\n                            end: false\n                        });\n                        localStream.once('end', finalize);\n                    }\n\n                    localStream.once('error', err => callback(err));\n                };\n\n                if (this.content._resolve) {\n                    let chunks = [];\n                    let chunklen = 0;\n                    let returned = false;\n                    let sourceStream = this._getStream(this.content);\n                    sourceStream.on('error', err => {\n                        if (returned) {\n                            return;\n                        }\n                        returned = true;\n                        callback(err);\n                    });\n                    sourceStream.on('readable', () => {\n                        let chunk;\n                        while ((chunk = sourceStream.read()) !== null) {\n                            chunks.push(chunk);\n                            chunklen += chunk.length;\n                        }\n                    });\n                    sourceStream.on('end', () => {\n                        if (returned) {\n                            return;\n                        }\n                        returned = true;\n                        this.content._resolve = false;\n                        this.content._resolvedValue = Buffer.concat(chunks, chunklen);\n                        setImmediate(createStream);\n                    });\n                } else {\n                    setImmediate(createStream);\n                }\n                return;\n            } else {\n                return setImmediate(finalize);\n            }\n        };\n\n        if (this._raw) {\n            setImmediate(() => {\n                if (Object.prototype.toString.call(this._raw) === '[object Error]') {\n                    // content is already errored\n                    return callback(this._raw);\n                }\n\n                // remove default error handler (if set)\n                if (typeof this._raw.pipe === 'function') {\n                    this._raw.removeListener('error', this._contentErrorHandler);\n                }\n\n                let raw = this._getStream(this._raw);\n                raw.pipe(outputStream, {\n                    end: false\n                });\n                raw.on('error', err => outputStream.emit('error', err));\n                raw.on('end', finalize);\n            });\n        } else {\n            outputStream.write(this.buildHeaders() + '\\r\\n\\r\\n');\n            setImmediate(sendContent);\n        }\n    }\n\n    /**\n     * Sets envelope to be used instead of the generated one\n     *\n     * @return {Object} SMTP envelope in the form of {from: 'from@example.com', to: ['to@example.com']}\n     */\n    setEnvelope(envelope) {\n        let list;\n\n        this._envelope = {\n            from: false,\n            to: []\n        };\n\n        if (envelope.from) {\n            list = [];\n            this._convertAddresses(this._parseAddresses(envelope.from), list);\n            list = list.filter(address => address && address.address);\n            if (list.length && list[0]) {\n                this._envelope.from = list[0].address;\n            }\n        }\n        ['to', 'cc', 'bcc'].forEach(key => {\n            if (envelope[key]) {\n                this._convertAddresses(this._parseAddresses(envelope[key]), this._envelope.to);\n            }\n        });\n\n        this._envelope.to = this._envelope.to.map(to => to.address).filter(address => address);\n\n        let standardFields = ['to', 'cc', 'bcc', 'from'];\n        Object.keys(envelope).forEach(key => {\n            if (!standardFields.includes(key)) {\n                this._envelope[key] = envelope[key];\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * Generates and returns an object with parsed address fields\n     *\n     * @return {Object} Address object\n     */\n    getAddresses() {\n        let addresses = {};\n\n        this._headers.forEach(header => {\n            let key = header.key.toLowerCase();\n            if (['from', 'sender', 'reply-to', 'to', 'cc', 'bcc'].includes(key)) {\n                if (!Array.isArray(addresses[key])) {\n                    addresses[key] = [];\n                }\n\n                this._convertAddresses(this._parseAddresses(header.value), addresses[key]);\n            }\n        });\n\n        return addresses;\n    }\n\n    /**\n     * Generates and returns SMTP envelope with the sender address and a list of recipients addresses\n     *\n     * @return {Object} SMTP envelope in the form of {from: 'from@example.com', to: ['to@example.com']}\n     */\n    getEnvelope() {\n        if (this._envelope) {\n            return this._envelope;\n        }\n\n        let envelope = {\n            from: false,\n            to: []\n        };\n        this._headers.forEach(header => {\n            let list = [];\n            if (header.key === 'From' || (!envelope.from && ['Reply-To', 'Sender'].includes(header.key))) {\n                this._convertAddresses(this._parseAddresses(header.value), list);\n                if (list.length && list[0]) {\n                    envelope.from = list[0].address;\n                }\n            } else if (['To', 'Cc', 'Bcc'].includes(header.key)) {\n                this._convertAddresses(this._parseAddresses(header.value), envelope.to);\n            }\n        });\n\n        envelope.to = envelope.to.map(to => to.address);\n\n        return envelope;\n    }\n\n    /**\n     * Returns Message-Id value. If it does not exist, then creates one\n     *\n     * @return {String} Message-Id value\n     */\n    messageId() {\n        let messageId = this.getHeader('Message-ID');\n        // You really should define your own Message-Id field!\n        if (!messageId) {\n            messageId = this._generateMessageId();\n            this.setHeader('Message-ID', messageId);\n        }\n        return messageId;\n    }\n\n    /**\n     * Sets pregenerated content that will be used as the output of this node\n     *\n     * @param {String|Buffer|Stream} Raw MIME contents\n     */\n    setRaw(raw) {\n        this._raw = raw;\n\n        if (this._raw && typeof this._raw.pipe === 'function') {\n            // pre-stream handler. might be triggered if a stream is set as content\n            // and 'error' fires before anything is done with this stream\n            this._contentErrorHandler = err => {\n                this._raw.removeListener('error', this._contentErrorHandler);\n                this._raw = err;\n            };\n            this._raw.once('error', this._contentErrorHandler);\n        }\n\n        return this;\n    }\n\n    /////// PRIVATE METHODS\n\n    /**\n     * Detects and returns handle to a stream related with the content.\n     *\n     * @param {Mixed} content Node content\n     * @returns {Object} Stream object\n     */\n    _getStream(content) {\n        let contentStream;\n\n        if (content._resolvedValue) {\n            // pass string or buffer content as a stream\n            contentStream = new PassThrough();\n\n            setImmediate(() => {\n                try {\n                    contentStream.end(content._resolvedValue);\n                } catch (err) {\n                    contentStream.emit('error', err);\n                }\n            });\n\n            return contentStream;\n        } else if (typeof content.pipe === 'function') {\n            // assume as stream\n            return content;\n        } else if (content && typeof content.path === 'string' && !content.href) {\n            if (this.disableFileAccess) {\n                contentStream = new PassThrough();\n                setImmediate(() => contentStream.emit('error', new Error('File access rejected for ' + content.path)));\n                return contentStream;\n            }\n            // read file\n            return fs.createReadStream(content.path);\n        } else if (content && typeof content.href === 'string') {\n            if (this.disableUrlAccess) {\n                contentStream = new PassThrough();\n                setImmediate(() => contentStream.emit('error', new Error('Url access rejected for ' + content.href)));\n                return contentStream;\n            }\n            // fetch URL\n            return nmfetch(content.href, { headers: content.httpHeaders });\n        } else {\n            // pass string or buffer content as a stream\n            contentStream = new PassThrough();\n\n            setImmediate(() => {\n                try {\n                    contentStream.end(content || '');\n                } catch (err) {\n                    contentStream.emit('error', err);\n                }\n            });\n            return contentStream;\n        }\n    }\n\n    /**\n     * Parses addresses. Takes in a single address or an array or an\n     * array of address arrays (eg. To: [[first group], [second group],...])\n     *\n     * @param {Mixed} addresses Addresses to be parsed\n     * @return {Array} An array of address objects\n     */\n    _parseAddresses(addresses) {\n        return [].concat.apply(\n            [],\n            [].concat(addresses).map(address => {\n                // eslint-disable-line prefer-spread\n                if (address && address.address) {\n                    address.address = this._normalizeAddress(address.address);\n                    address.name = address.name || '';\n                    return [address];\n                }\n                return addressparser(address);\n            })\n        );\n    }\n\n    /**\n     * Normalizes a header key, uses Camel-Case form, except for uppercase MIME-\n     *\n     * @param {String} key Key to be normalized\n     * @return {String} key in Camel-Case form\n     */\n    _normalizeHeaderKey(key) {\n        key = (key || '')\n            .toString()\n            // no newlines in keys\n            .replace(/\\r?\\n|\\r/g, ' ')\n            .trim()\n            .toLowerCase()\n            // use uppercase words, except MIME\n            .replace(/^X-SMTPAPI$|^(MIME|DKIM|ARC|BIMI)\\b|^[a-z]|-(SPF|FBL|ID|MD5)$|-[a-z]/gi, c => c.toUpperCase())\n            // special case\n            .replace(/^Content-Features$/i, 'Content-features');\n\n        return key;\n    }\n\n    /**\n     * Checks if the content type is multipart and defines boundary if needed.\n     * Doesn't return anything, modifies object argument instead.\n     *\n     * @param {Object} structured Parsed header value for 'Content-Type' key\n     */\n    _handleContentType(structured) {\n        this.contentType = structured.value.trim().toLowerCase();\n\n        this.multipart = /^multipart\\//i.test(this.contentType) ? this.contentType.substr(this.contentType.indexOf('/') + 1) : false;\n\n        if (this.multipart) {\n            this.boundary = structured.params.boundary = structured.params.boundary || this.boundary || this._generateBoundary();\n        } else {\n            this.boundary = false;\n        }\n    }\n\n    /**\n     * Generates a multipart boundary value\n     *\n     * @return {String} boundary value\n     */\n    _generateBoundary() {\n        return this.rootNode.boundaryPrefix + '-' + this.rootNode.baseBoundary + '-Part_' + this._nodeId;\n    }\n\n    /**\n     * Encodes a header value for use in the generated rfc2822 email.\n     *\n     * @param {String} key Header key\n     * @param {String} value Header value\n     */\n    _encodeHeaderValue(key, value) {\n        key = this._normalizeHeaderKey(key);\n\n        switch (key) {\n            // Structured headers\n            case 'From':\n            case 'Sender':\n            case 'To':\n            case 'Cc':\n            case 'Bcc':\n            case 'Reply-To':\n                return this._convertAddresses(this._parseAddresses(value));\n\n            // values enclosed in <>\n            case 'Message-ID':\n            case 'In-Reply-To':\n            case 'Content-Id':\n                value = (value || '').toString().replace(/\\r?\\n|\\r/g, ' ');\n\n                if (value.charAt(0) !== '<') {\n                    value = '<' + value;\n                }\n\n                if (value.charAt(value.length - 1) !== '>') {\n                    value = value + '>';\n                }\n                return value;\n\n            // space separated list of values enclosed in <>\n            case 'References':\n                value = [].concat\n                    .apply(\n                        [],\n                        [].concat(value || '').map(elm => {\n                            // eslint-disable-line prefer-spread\n                            elm = (elm || '')\n                                .toString()\n                                .replace(/\\r?\\n|\\r/g, ' ')\n                                .trim();\n                            return elm.replace(/<[^>]*>/g, str => str.replace(/\\s/g, '')).split(/\\s+/);\n                        })\n                    )\n                    .map(elm => {\n                        if (elm.charAt(0) !== '<') {\n                            elm = '<' + elm;\n                        }\n                        if (elm.charAt(elm.length - 1) !== '>') {\n                            elm = elm + '>';\n                        }\n                        return elm;\n                    });\n\n                return value.join(' ').trim();\n\n            case 'Date':\n                if (Object.prototype.toString.call(value) === '[object Date]') {\n                    return value.toUTCString().replace(/GMT/, '+0000');\n                }\n\n                value = (value || '').toString().replace(/\\r?\\n|\\r/g, ' ');\n                return this._encodeWords(value);\n\n            case 'Content-Type':\n            case 'Content-Disposition':\n                // if it includes a filename then it is already encoded\n                return (value || '').toString().replace(/\\r?\\n|\\r/g, ' ');\n\n            default:\n                value = (value || '').toString().replace(/\\r?\\n|\\r/g, ' ');\n                // encodeWords only encodes if needed, otherwise the original string is returned\n                return this._encodeWords(value);\n        }\n    }\n\n    /**\n     * Rebuilds address object using punycode and other adjustments\n     *\n     * @param {Array} addresses An array of address objects\n     * @param {Array} [uniqueList] An array to be populated with addresses\n     * @return {String} address string\n     */\n    _convertAddresses(addresses, uniqueList) {\n        let values = [];\n\n        uniqueList = uniqueList || [];\n\n        [].concat(addresses || []).forEach(address => {\n            if (address.address) {\n                address.address = this._normalizeAddress(address.address);\n\n                if (!address.name) {\n                    values.push(address.address.indexOf(' ') >= 0 ? `<${address.address}>` : `${address.address}`);\n                } else if (address.name) {\n                    values.push(`${this._encodeAddressName(address.name)} <${address.address}>`);\n                }\n\n                if (address.address) {\n                    if (!uniqueList.filter(a => a.address === address.address).length) {\n                        uniqueList.push(address);\n                    }\n                }\n            } else if (address.group) {\n                let groupListAddresses = (address.group.length ? this._convertAddresses(address.group, uniqueList) : '').trim();\n                values.push(`${this._encodeAddressName(address.name)}:${groupListAddresses};`);\n            }\n        });\n\n        return values.join(', ');\n    }\n\n    /**\n     * Normalizes an email address\n     *\n     * @param {Array} address An array of address objects\n     * @return {String} address string\n     */\n    _normalizeAddress(address) {\n        address = (address || '')\n            .toString()\n            .replace(/[\\x00-\\x1F<>]+/g, ' ') // remove unallowed characters\n            .trim();\n\n        let lastAt = address.lastIndexOf('@');\n        if (lastAt < 0) {\n            // Bare username\n            return address;\n        }\n\n        let user = address.substr(0, lastAt);\n        let domain = address.substr(lastAt + 1);\n\n        // Usernames are not touched and are kept as is even if these include unicode\n        // Domains are punycoded by default\n        // 'j\u00F5geva.ee' will be converted to 'xn--jgeva-dua.ee'\n        // non-unicode domains are left as is\n\n        let encodedDomain;\n\n        try {\n            encodedDomain = punycode.toASCII(domain.toLowerCase());\n        } catch (err) {\n            // keep as is?\n        }\n\n        if (user.indexOf(' ') >= 0) {\n            if (user.charAt(0) !== '\"') {\n                user = '\"' + user;\n            }\n            if (user.substr(-1) !== '\"') {\n                user = user + '\"';\n            }\n        }\n\n        return `${user}@${encodedDomain}`;\n    }\n\n    /**\n     * If needed, mime encodes the name part\n     *\n     * @param {String} name Name part of an address\n     * @returns {String} Mime word encoded string if needed\n     */\n    _encodeAddressName(name) {\n        if (!/^[\\w ]*$/.test(name)) {\n            if (/^[\\x20-\\x7e]*$/.test(name)) {\n                return '\"' + name.replace(/([\\\\\"])/g, '\\\\$1') + '\"';\n            } else {\n                return mimeFuncs.encodeWord(name, this._getTextEncoding(name), 52);\n            }\n        }\n        return name;\n    }\n\n    /**\n     * If needed, mime encodes the name part\n     *\n     * @param {String} name Name part of an address\n     * @returns {String} Mime word encoded string if needed\n     */\n    _encodeWords(value) {\n        // set encodeAll parameter to true even though it is against the recommendation of RFC2047,\n        // by default only words that include non-ascii should be converted into encoded words\n        // but some clients (eg. Zimbra) do not handle it properly and remove surrounding whitespace\n        return mimeFuncs.encodeWords(value, this._getTextEncoding(value), 52, true);\n    }\n\n    /**\n     * Detects best mime encoding for a text value\n     *\n     * @param {String} value Value to check for\n     * @return {String} either 'Q' or 'B'\n     */\n    _getTextEncoding(value) {\n        value = (value || '').toString();\n\n        let encoding = this.textEncoding;\n        let latinLen;\n        let nonLatinLen;\n\n        if (!encoding) {\n            // count latin alphabet symbols and 8-bit range symbols + control symbols\n            // if there are more latin characters, then use quoted-printable\n            // encoding, otherwise use base64\n            nonLatinLen = (value.match(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\u0080-\\uFFFF]/g) || []).length; // eslint-disable-line no-control-regex\n            latinLen = (value.match(/[a-z]/gi) || []).length;\n            // if there are more latin symbols than binary/unicode, then prefer Q, otherwise B\n            encoding = nonLatinLen < latinLen ? 'Q' : 'B';\n        }\n        return encoding;\n    }\n\n    /**\n     * Generates a message id\n     *\n     * @return {String} Random Message-ID value\n     */\n    _generateMessageId() {\n        return (\n            '<' +\n            [2, 2, 2, 6].reduce(\n                // crux to generate UUID-like random strings\n                (prev, len) => prev + '-' + crypto.randomBytes(len).toString('hex'),\n                crypto.randomBytes(4).toString('hex')\n            ) +\n            '@' +\n            // try to use the domain of the FROM address or fallback to server hostname\n            (this.getEnvelope().from || this.hostname || 'localhost').split('@').pop() +\n            '>'\n        );\n    }\n}\n\nmodule.exports = MimeNode;\n", "/* eslint no-undefined: 0 */\n\n'use strict';\n\nconst MimeNode = require('../mime-node');\nconst mimeFuncs = require('../mime-funcs');\nconst parseDataURI = require('../shared').parseDataURI;\n\n/**\n * Creates the object for composing a MimeNode instance out from the mail options\n *\n * @constructor\n * @param {Object} mail Mail options\n */\nclass MailComposer {\n    constructor(mail) {\n        this.mail = mail || {};\n        this.message = false;\n    }\n\n    /**\n     * Builds MimeNode instance\n     */\n    compile() {\n        this._alternatives = this.getAlternatives();\n        this._htmlNode = this._alternatives.filter(alternative => /^text\\/html\\b/i.test(alternative.contentType)).pop();\n        this._attachments = this.getAttachments(!!this._htmlNode);\n\n        this._useRelated = !!(this._htmlNode && this._attachments.related.length);\n        this._useAlternative = this._alternatives.length > 1;\n        this._useMixed = this._attachments.attached.length > 1 || (this._alternatives.length && this._attachments.attached.length === 1);\n\n        // Compose MIME tree\n        if (this.mail.raw) {\n            this.message = new MimeNode('message/rfc822', { newline: this.mail.newline }).setRaw(this.mail.raw);\n        } else if (this._useMixed) {\n            this.message = this._createMixed();\n        } else if (this._useAlternative) {\n            this.message = this._createAlternative();\n        } else if (this._useRelated) {\n            this.message = this._createRelated();\n        } else {\n            this.message = this._createContentNode(\n                false,\n                []\n                    .concat(this._alternatives || [])\n                    .concat(this._attachments.attached || [])\n                    .shift() || {\n                    contentType: 'text/plain',\n                    content: ''\n                }\n            );\n        }\n\n        // Add custom headers\n        if (this.mail.headers) {\n            this.message.addHeader(this.mail.headers);\n        }\n\n        // Add headers to the root node, always overrides custom headers\n        ['from', 'sender', 'to', 'cc', 'bcc', 'reply-to', 'in-reply-to', 'references', 'subject', 'message-id', 'date'].forEach(header => {\n            let key = header.replace(/-(\\w)/g, (o, c) => c.toUpperCase());\n            if (this.mail[key]) {\n                this.message.setHeader(header, this.mail[key]);\n            }\n        });\n\n        // Sets custom envelope\n        if (this.mail.envelope) {\n            this.message.setEnvelope(this.mail.envelope);\n        }\n\n        // ensure Message-Id value\n        this.message.messageId();\n\n        return this.message;\n    }\n\n    /**\n     * List all attachments. Resulting attachment objects can be used as input for MimeNode nodes\n     *\n     * @param {Boolean} findRelated If true separate related attachments from attached ones\n     * @returns {Object} An object of arrays (`related` and `attached`)\n     */\n    getAttachments(findRelated) {\n        let icalEvent, eventObject;\n        let attachments = [].concat(this.mail.attachments || []).map((attachment, i) => {\n            let data;\n            let isMessageNode = /^message\\//i.test(attachment.contentType);\n\n            if (/^data:/i.test(attachment.path || attachment.href)) {\n                attachment = this._processDataUrl(attachment);\n            }\n\n            let contentType = attachment.contentType || mimeFuncs.detectMimeType(attachment.filename || attachment.path || attachment.href || 'bin');\n            let isImage = /^image\\//i.test(contentType);\n            let contentDisposition = attachment.contentDisposition || (isMessageNode || (isImage && attachment.cid) ? 'inline' : 'attachment');\n\n            data = {\n                contentType,\n                contentDisposition,\n                contentTransferEncoding: 'contentTransferEncoding' in attachment ? attachment.contentTransferEncoding : 'base64'\n            };\n\n            if (attachment.filename) {\n                data.filename = attachment.filename;\n            } else if (!isMessageNode && attachment.filename !== false) {\n                data.filename = (attachment.path || attachment.href || '').split('/').pop().split('?').shift() || 'attachment-' + (i + 1);\n                if (data.filename.indexOf('.') < 0) {\n                    data.filename += '.' + mimeFuncs.detectExtension(data.contentType);\n                }\n            }\n\n            if (/^https?:\\/\\//i.test(attachment.path)) {\n                attachment.href = attachment.path;\n                attachment.path = undefined;\n            }\n\n            if (attachment.cid) {\n                data.cid = attachment.cid;\n            }\n\n            if (attachment.raw) {\n                data.raw = attachment.raw;\n            } else if (attachment.path) {\n                data.content = {\n                    path: attachment.path\n                };\n            } else if (attachment.href) {\n                data.content = {\n                    href: attachment.href,\n                    httpHeaders: attachment.httpHeaders\n                };\n            } else {\n                data.content = attachment.content || '';\n            }\n\n            if (attachment.encoding) {\n                data.encoding = attachment.encoding;\n            }\n\n            if (attachment.headers) {\n                data.headers = attachment.headers;\n            }\n\n            return data;\n        });\n\n        if (this.mail.icalEvent) {\n            if (\n                typeof this.mail.icalEvent === 'object' &&\n                (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)\n            ) {\n                icalEvent = this.mail.icalEvent;\n            } else {\n                icalEvent = {\n                    content: this.mail.icalEvent\n                };\n            }\n\n            eventObject = {};\n            Object.keys(icalEvent).forEach(key => {\n                eventObject[key] = icalEvent[key];\n            });\n\n            eventObject.contentType = 'application/ics';\n            if (!eventObject.headers) {\n                eventObject.headers = {};\n            }\n            eventObject.filename = eventObject.filename || 'invite.ics';\n            eventObject.headers['Content-Disposition'] = 'attachment';\n            eventObject.headers['Content-Transfer-Encoding'] = 'base64';\n        }\n\n        if (!findRelated) {\n            return {\n                attached: attachments.concat(eventObject || []),\n                related: []\n            };\n        } else {\n            return {\n                attached: attachments.filter(attachment => !attachment.cid).concat(eventObject || []),\n                related: attachments.filter(attachment => !!attachment.cid)\n            };\n        }\n    }\n\n    /**\n     * List alternatives. Resulting objects can be used as input for MimeNode nodes\n     *\n     * @returns {Array} An array of alternative elements. Includes the `text` and `html` values as well\n     */\n    getAlternatives() {\n        let alternatives = [],\n            text,\n            html,\n            watchHtml,\n            amp,\n            icalEvent,\n            eventObject;\n\n        if (this.mail.text) {\n            if (typeof this.mail.text === 'object' && (this.mail.text.content || this.mail.text.path || this.mail.text.href || this.mail.text.raw)) {\n                text = this.mail.text;\n            } else {\n                text = {\n                    content: this.mail.text\n                };\n            }\n            text.contentType = 'text/plain; charset=utf-8';\n        }\n\n        if (this.mail.watchHtml) {\n            if (\n                typeof this.mail.watchHtml === 'object' &&\n                (this.mail.watchHtml.content || this.mail.watchHtml.path || this.mail.watchHtml.href || this.mail.watchHtml.raw)\n            ) {\n                watchHtml = this.mail.watchHtml;\n            } else {\n                watchHtml = {\n                    content: this.mail.watchHtml\n                };\n            }\n            watchHtml.contentType = 'text/watch-html; charset=utf-8';\n        }\n\n        if (this.mail.amp) {\n            if (typeof this.mail.amp === 'object' && (this.mail.amp.content || this.mail.amp.path || this.mail.amp.href || this.mail.amp.raw)) {\n                amp = this.mail.amp;\n            } else {\n                amp = {\n                    content: this.mail.amp\n                };\n            }\n            amp.contentType = 'text/x-amp-html; charset=utf-8';\n        }\n\n        // NB! when including attachments with a calendar alternative you might end up in a blank screen on some clients\n        if (this.mail.icalEvent) {\n            if (\n                typeof this.mail.icalEvent === 'object' &&\n                (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)\n            ) {\n                icalEvent = this.mail.icalEvent;\n            } else {\n                icalEvent = {\n                    content: this.mail.icalEvent\n                };\n            }\n\n            eventObject = {};\n            Object.keys(icalEvent).forEach(key => {\n                eventObject[key] = icalEvent[key];\n            });\n\n            if (eventObject.content && typeof eventObject.content === 'object') {\n                // we are going to have the same attachment twice, so mark this to be\n                // resolved just once\n                eventObject.content._resolve = true;\n            }\n\n            eventObject.filename = false;\n            eventObject.contentType = 'text/calendar; charset=utf-8; method=' + (eventObject.method || 'PUBLISH').toString().trim().toUpperCase();\n            if (!eventObject.headers) {\n                eventObject.headers = {};\n            }\n        }\n\n        if (this.mail.html) {\n            if (typeof this.mail.html === 'object' && (this.mail.html.content || this.mail.html.path || this.mail.html.href || this.mail.html.raw)) {\n                html = this.mail.html;\n            } else {\n                html = {\n                    content: this.mail.html\n                };\n            }\n            html.contentType = 'text/html; charset=utf-8';\n        }\n\n        []\n            .concat(text || [])\n            .concat(watchHtml || [])\n            .concat(amp || [])\n            .concat(html || [])\n            .concat(eventObject || [])\n            .concat(this.mail.alternatives || [])\n            .forEach(alternative => {\n                let data;\n\n                if (/^data:/i.test(alternative.path || alternative.href)) {\n                    alternative = this._processDataUrl(alternative);\n                }\n\n                data = {\n                    contentType: alternative.contentType || mimeFuncs.detectMimeType(alternative.filename || alternative.path || alternative.href || 'txt'),\n                    contentTransferEncoding: alternative.contentTransferEncoding\n                };\n\n                if (alternative.filename) {\n                    data.filename = alternative.filename;\n                }\n\n                if (/^https?:\\/\\//i.test(alternative.path)) {\n                    alternative.href = alternative.path;\n                    alternative.path = undefined;\n                }\n\n                if (alternative.raw) {\n                    data.raw = alternative.raw;\n                } else if (alternative.path) {\n                    data.content = {\n                        path: alternative.path\n                    };\n                } else if (alternative.href) {\n                    data.content = {\n                        href: alternative.href\n                    };\n                } else {\n                    data.content = alternative.content || '';\n                }\n\n                if (alternative.encoding) {\n                    data.encoding = alternative.encoding;\n                }\n\n                if (alternative.headers) {\n                    data.headers = alternative.headers;\n                }\n\n                alternatives.push(data);\n            });\n\n        return alternatives;\n    }\n\n    /**\n     * Builds multipart/mixed node. It should always contain different type of elements on the same level\n     * eg. text + attachments\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @returns {Object} MimeNode node element\n     */\n    _createMixed(parentNode) {\n        let node;\n\n        if (!parentNode) {\n            node = new MimeNode('multipart/mixed', {\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        } else {\n            node = parentNode.createChild('multipart/mixed', {\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        }\n\n        if (this._useAlternative) {\n            this._createAlternative(node);\n        } else if (this._useRelated) {\n            this._createRelated(node);\n        }\n\n        []\n            .concat((!this._useAlternative && this._alternatives) || [])\n            .concat(this._attachments.attached || [])\n            .forEach(element => {\n                // if the element is a html node from related subpart then ignore it\n                if (!this._useRelated || element !== this._htmlNode) {\n                    this._createContentNode(node, element);\n                }\n            });\n\n        return node;\n    }\n\n    /**\n     * Builds multipart/alternative node. It should always contain same type of elements on the same level\n     * eg. text + html view of the same data\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @returns {Object} MimeNode node element\n     */\n    _createAlternative(parentNode) {\n        let node;\n\n        if (!parentNode) {\n            node = new MimeNode('multipart/alternative', {\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        } else {\n            node = parentNode.createChild('multipart/alternative', {\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        }\n\n        this._alternatives.forEach(alternative => {\n            if (this._useRelated && this._htmlNode === alternative) {\n                this._createRelated(node);\n            } else {\n                this._createContentNode(node, alternative);\n            }\n        });\n\n        return node;\n    }\n\n    /**\n     * Builds multipart/related node. It should always contain html node with related attachments\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @returns {Object} MimeNode node element\n     */\n    _createRelated(parentNode) {\n        let node;\n\n        if (!parentNode) {\n            node = new MimeNode('multipart/related; type=\"text/html\"', {\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        } else {\n            node = parentNode.createChild('multipart/related; type=\"text/html\"', {\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        }\n\n        this._createContentNode(node, this._htmlNode);\n\n        this._attachments.related.forEach(alternative => this._createContentNode(node, alternative));\n\n        return node;\n    }\n\n    /**\n     * Creates a regular node with contents\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @param {Object} element Node data\n     * @returns {Object} MimeNode node element\n     */\n    _createContentNode(parentNode, element) {\n        element = element || {};\n        element.content = element.content || '';\n\n        let node;\n        let encoding = (element.encoding || 'utf8')\n            .toString()\n            .toLowerCase()\n            .replace(/[-_\\s]/g, '');\n\n        if (!parentNode) {\n            node = new MimeNode(element.contentType, {\n                filename: element.filename,\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        } else {\n            node = parentNode.createChild(element.contentType, {\n                filename: element.filename,\n                textEncoding: this.mail.textEncoding,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        }\n\n        // add custom headers\n        if (element.headers) {\n            node.addHeader(element.headers);\n        }\n\n        if (element.cid) {\n            node.setHeader('Content-Id', '<' + element.cid.replace(/[<>]/g, '') + '>');\n        }\n\n        if (element.contentTransferEncoding) {\n            node.setHeader('Content-Transfer-Encoding', element.contentTransferEncoding);\n        } else if (this.mail.encoding && /^text\\//i.test(element.contentType)) {\n            node.setHeader('Content-Transfer-Encoding', this.mail.encoding);\n        }\n\n        if (!/^text\\//i.test(element.contentType) || element.contentDisposition) {\n            node.setHeader(\n                'Content-Disposition',\n                element.contentDisposition || (element.cid && /^image\\//i.test(element.contentType) ? 'inline' : 'attachment')\n            );\n        }\n\n        if (typeof element.content === 'string' && !['utf8', 'usascii', 'ascii'].includes(encoding)) {\n            element.content = Buffer.from(element.content, encoding);\n        }\n\n        // prefer pregenerated raw content\n        if (element.raw) {\n            node.setRaw(element.raw);\n        } else {\n            node.setContent(element.content);\n        }\n\n        return node;\n    }\n\n    /**\n     * Parses data uri and converts it to a Buffer\n     *\n     * @param {Object} element Content element\n     * @return {Object} Parsed element\n     */\n    _processDataUrl(element) {\n        let parsedDataUri;\n        if ((element.path || element.href).match(/^data:/)) {\n            parsedDataUri = parseDataURI(element.path || element.href);\n        }\n\n        if (!parsedDataUri) {\n            return element;\n        }\n\n        element.content = parsedDataUri.data;\n        element.contentType = element.contentType || parsedDataUri.contentType;\n\n        if ('path' in element) {\n            element.path = false;\n        }\n\n        if ('href' in element) {\n            element.href = false;\n        }\n\n        return element;\n    }\n}\n\nmodule.exports = MailComposer;\n", "'use strict';\n\nconst Transform = require('stream').Transform;\n\n/**\n * MessageParser instance is a transform stream that separates message headers\n * from the rest of the body. Headers are emitted with the 'headers' event. Message\n * body is passed on as the resulting stream.\n */\nclass MessageParser extends Transform {\n    constructor(options) {\n        super(options);\n        this.lastBytes = Buffer.alloc(4);\n        this.headersParsed = false;\n        this.headerBytes = 0;\n        this.headerChunks = [];\n        this.rawHeaders = false;\n        this.bodySize = 0;\n    }\n\n    /**\n     * Keeps count of the last 4 bytes in order to detect line breaks on chunk boundaries\n     *\n     * @param {Buffer} data Next data chunk from the stream\n     */\n    updateLastBytes(data) {\n        let lblen = this.lastBytes.length;\n        let nblen = Math.min(data.length, lblen);\n\n        // shift existing bytes\n        for (let i = 0, len = lblen - nblen; i < len; i++) {\n            this.lastBytes[i] = this.lastBytes[i + nblen];\n        }\n\n        // add new bytes\n        for (let i = 1; i <= nblen; i++) {\n            this.lastBytes[lblen - i] = data[data.length - i];\n        }\n    }\n\n    /**\n     * Finds and removes message headers from the remaining body. We want to keep\n     * headers separated until final delivery to be able to modify these\n     *\n     * @param {Buffer} data Next chunk of data\n     * @return {Boolean} Returns true if headers are already found or false otherwise\n     */\n    checkHeaders(data) {\n        if (this.headersParsed) {\n            return true;\n        }\n\n        let lblen = this.lastBytes.length;\n        let headerPos = 0;\n        this.curLinePos = 0;\n        for (let i = 0, len = this.lastBytes.length + data.length; i < len; i++) {\n            let chr;\n            if (i < lblen) {\n                chr = this.lastBytes[i];\n            } else {\n                chr = data[i - lblen];\n            }\n            if (chr === 0x0a && i) {\n                let pr1 = i - 1 < lblen ? this.lastBytes[i - 1] : data[i - 1 - lblen];\n                let pr2 = i > 1 ? (i - 2 < lblen ? this.lastBytes[i - 2] : data[i - 2 - lblen]) : false;\n                if (pr1 === 0x0a) {\n                    this.headersParsed = true;\n                    headerPos = i - lblen + 1;\n                    this.headerBytes += headerPos;\n                    break;\n                } else if (pr1 === 0x0d && pr2 === 0x0a) {\n                    this.headersParsed = true;\n                    headerPos = i - lblen + 1;\n                    this.headerBytes += headerPos;\n                    break;\n                }\n            }\n        }\n\n        if (this.headersParsed) {\n            this.headerChunks.push(data.slice(0, headerPos));\n            this.rawHeaders = Buffer.concat(this.headerChunks, this.headerBytes);\n            this.headerChunks = null;\n            this.emit('headers', this.parseHeaders());\n            if (data.length - 1 > headerPos) {\n                let chunk = data.slice(headerPos);\n                this.bodySize += chunk.length;\n                // this would be the first chunk of data sent downstream\n                setImmediate(() => this.push(chunk));\n            }\n            return false;\n        } else {\n            this.headerBytes += data.length;\n            this.headerChunks.push(data);\n        }\n\n        // store last 4 bytes to catch header break\n        this.updateLastBytes(data);\n\n        return false;\n    }\n\n    _transform(chunk, encoding, callback) {\n        if (!chunk || !chunk.length) {\n            return callback();\n        }\n\n        if (typeof chunk === 'string') {\n            chunk = Buffer.from(chunk, encoding);\n        }\n\n        let headersFound;\n\n        try {\n            headersFound = this.checkHeaders(chunk);\n        } catch (E) {\n            return callback(E);\n        }\n\n        if (headersFound) {\n            this.bodySize += chunk.length;\n            this.push(chunk);\n        }\n\n        setImmediate(callback);\n    }\n\n    _flush(callback) {\n        if (this.headerChunks) {\n            let chunk = Buffer.concat(this.headerChunks, this.headerBytes);\n            this.bodySize += chunk.length;\n            this.push(chunk);\n            this.headerChunks = null;\n        }\n        callback();\n    }\n\n    parseHeaders() {\n        let lines = (this.rawHeaders || '').toString().split(/\\r?\\n/);\n        for (let i = lines.length - 1; i > 0; i--) {\n            if (/^\\s/.test(lines[i])) {\n                lines[i - 1] += '\\n' + lines[i];\n                lines.splice(i, 1);\n            }\n        }\n        return lines\n            .filter(line => line.trim())\n            .map(line => ({\n                key: line.substr(0, line.indexOf(':')).trim().toLowerCase(),\n                line\n            }));\n    }\n}\n\nmodule.exports = MessageParser;\n", "'use strict';\n\n// streams through a message body and calculates relaxed body hash\n\nconst Transform = require('stream').Transform;\nconst crypto = require('crypto');\n\nclass RelaxedBody extends Transform {\n    constructor(options) {\n        super();\n        options = options || {};\n        this.chunkBuffer = [];\n        this.chunkBufferLen = 0;\n        this.bodyHash = crypto.createHash(options.hashAlgo || 'sha1');\n        this.remainder = '';\n        this.byteLength = 0;\n\n        this.debug = options.debug;\n        this._debugBody = options.debug ? [] : false;\n    }\n\n    updateHash(chunk) {\n        let bodyStr;\n\n        // find next remainder\n        let nextRemainder = '';\n\n        // This crux finds and removes the spaces from the last line and the newline characters after the last non-empty line\n        // If we get another chunk that does not match this description then we can restore the previously processed data\n        let state = 'file';\n        for (let i = chunk.length - 1; i >= 0; i--) {\n            let c = chunk[i];\n\n            if (state === 'file' && (c === 0x0a || c === 0x0d)) {\n                // do nothing, found \\n or \\r at the end of chunk, stil end of file\n            } else if (state === 'file' && (c === 0x09 || c === 0x20)) {\n                // switch to line ending mode, this is the last non-empty line\n                state = 'line';\n            } else if (state === 'line' && (c === 0x09 || c === 0x20)) {\n                // do nothing, found ' ' or \\t at the end of line, keep processing the last non-empty line\n            } else if (state === 'file' || state === 'line') {\n                // non line/file ending character found, switch to body mode\n                state = 'body';\n                if (i === chunk.length - 1) {\n                    // final char is not part of line end or file end, so do nothing\n                    break;\n                }\n            }\n\n            if (i === 0) {\n                // reached to the beginning of the chunk, check if it is still about the ending\n                // and if the remainder also matches\n                if (\n                    (state === 'file' && (!this.remainder || /[\\r\\n]$/.test(this.remainder))) ||\n                    (state === 'line' && (!this.remainder || /[ \\t]$/.test(this.remainder)))\n                ) {\n                    // keep everything\n                    this.remainder += chunk.toString('binary');\n                    return;\n                } else if (state === 'line' || state === 'file') {\n                    // process existing remainder as normal line but store the current chunk\n                    nextRemainder = chunk.toString('binary');\n                    chunk = false;\n                    break;\n                }\n            }\n\n            if (state !== 'body') {\n                continue;\n            }\n\n            // reached first non ending byte\n            nextRemainder = chunk.slice(i + 1).toString('binary');\n            chunk = chunk.slice(0, i + 1);\n            break;\n        }\n\n        let needsFixing = !!this.remainder;\n        if (chunk && !needsFixing) {\n            // check if we even need to change anything\n            for (let i = 0, len = chunk.length; i < len; i++) {\n                if (i && chunk[i] === 0x0a && chunk[i - 1] !== 0x0d) {\n                    // missing \\r before \\n\n                    needsFixing = true;\n                    break;\n                } else if (i && chunk[i] === 0x0d && chunk[i - 1] === 0x20) {\n                    // trailing WSP found\n                    needsFixing = true;\n                    break;\n                } else if (i && chunk[i] === 0x20 && chunk[i - 1] === 0x20) {\n                    // multiple spaces found, needs to be replaced with just one\n                    needsFixing = true;\n                    break;\n                } else if (chunk[i] === 0x09) {\n                    // TAB found, needs to be replaced with a space\n                    needsFixing = true;\n                    break;\n                }\n            }\n        }\n\n        if (needsFixing) {\n            bodyStr = this.remainder + (chunk ? chunk.toString('binary') : '');\n            this.remainder = nextRemainder;\n            bodyStr = bodyStr\n                .replace(/\\r?\\n/g, '\\n') // use js line endings\n                .replace(/[ \\t]*$/gm, '') // remove line endings, rtrim\n                .replace(/[ \\t]+/gm, ' ') // single spaces\n                .replace(/\\n/g, '\\r\\n'); // restore rfc822 line endings\n            chunk = Buffer.from(bodyStr, 'binary');\n        } else if (nextRemainder) {\n            this.remainder = nextRemainder;\n        }\n\n        if (this.debug) {\n            this._debugBody.push(chunk);\n        }\n        this.bodyHash.update(chunk);\n    }\n\n    _transform(chunk, encoding, callback) {\n        if (!chunk || !chunk.length) {\n            return callback();\n        }\n\n        if (typeof chunk === 'string') {\n            chunk = Buffer.from(chunk, encoding);\n        }\n\n        this.updateHash(chunk);\n\n        this.byteLength += chunk.length;\n        this.push(chunk);\n        callback();\n    }\n\n    _flush(callback) {\n        // generate final hash and emit it\n        if (/[\\r\\n]$/.test(this.remainder) && this.byteLength > 2) {\n            // add terminating line end\n            this.bodyHash.update(Buffer.from('\\r\\n'));\n        }\n        if (!this.byteLength) {\n            // emit empty line buffer to keep the stream flowing\n            this.push(Buffer.from('\\r\\n'));\n            // this.bodyHash.update(Buffer.from('\\r\\n'));\n        }\n\n        this.emit('hash', this.bodyHash.digest('base64'), this.debug ? Buffer.concat(this._debugBody) : false);\n        callback();\n    }\n}\n\nmodule.exports = RelaxedBody;\n", "'use strict';\n\nconst punycode = require('../punycode');\nconst mimeFuncs = require('../mime-funcs');\nconst crypto = require('crypto');\n\n/**\n * Returns DKIM signature header line\n *\n * @param {Object} headers Parsed headers object from MessageParser\n * @param {String} bodyHash Base64 encoded hash of the message\n * @param {Object} options DKIM options\n * @param {String} options.domainName Domain name to be signed for\n * @param {String} options.keySelector DKIM key selector to use\n * @param {String} options.privateKey DKIM private key to use\n * @return {String} Complete header line\n */\n\nmodule.exports = (headers, hashAlgo, bodyHash, options) => {\n    options = options || {};\n\n    // all listed fields from RFC4871 #5.5\n    let defaultFieldNames =\n        'From:Sender:Reply-To:Subject:Date:Message-ID:To:' +\n        'Cc:MIME-Version:Content-Type:Content-Transfer-Encoding:Content-ID:' +\n        'Content-Description:Resent-Date:Resent-From:Resent-Sender:' +\n        'Resent-To:Resent-Cc:Resent-Message-ID:In-Reply-To:References:' +\n        'List-Id:List-Help:List-Unsubscribe:List-Subscribe:List-Post:' +\n        'List-Owner:List-Archive';\n\n    let fieldNames = options.headerFieldNames || defaultFieldNames;\n\n    let canonicalizedHeaderData = relaxedHeaders(headers, fieldNames, options.skipFields);\n    let dkimHeader = generateDKIMHeader(options.domainName, options.keySelector, canonicalizedHeaderData.fieldNames, hashAlgo, bodyHash);\n\n    let signer, signature;\n\n    canonicalizedHeaderData.headers += 'dkim-signature:' + relaxedHeaderLine(dkimHeader);\n\n    signer = crypto.createSign(('rsa-' + hashAlgo).toUpperCase());\n    signer.update(canonicalizedHeaderData.headers);\n    try {\n        signature = signer.sign(options.privateKey, 'base64');\n    } catch (E) {\n        return false;\n    }\n\n    return dkimHeader + signature.replace(/(^.{73}|.{75}(?!\\r?\\n|\\r))/g, '$&\\r\\n ').trim();\n};\n\nmodule.exports.relaxedHeaders = relaxedHeaders;\n\nfunction generateDKIMHeader(domainName, keySelector, fieldNames, hashAlgo, bodyHash) {\n    let dkim = [\n        'v=1',\n        'a=rsa-' + hashAlgo,\n        'c=relaxed/relaxed',\n        'd=' + punycode.toASCII(domainName),\n        'q=dns/txt',\n        's=' + keySelector,\n        'bh=' + bodyHash,\n        'h=' + fieldNames\n    ].join('; ');\n\n    return mimeFuncs.foldLines('DKIM-Signature: ' + dkim, 76) + ';\\r\\n b=';\n}\n\nfunction relaxedHeaders(headers, fieldNames, skipFields) {\n    let includedFields = new Set();\n    let skip = new Set();\n    let headerFields = new Map();\n\n    (skipFields || '')\n        .toLowerCase()\n        .split(':')\n        .forEach(field => {\n            skip.add(field.trim());\n        });\n\n    (fieldNames || '')\n        .toLowerCase()\n        .split(':')\n        .filter(field => !skip.has(field.trim()))\n        .forEach(field => {\n            includedFields.add(field.trim());\n        });\n\n    for (let i = headers.length - 1; i >= 0; i--) {\n        let line = headers[i];\n        // only include the first value from bottom to top\n        if (includedFields.has(line.key) && !headerFields.has(line.key)) {\n            headerFields.set(line.key, relaxedHeaderLine(line.line));\n        }\n    }\n\n    let headersList = [];\n    let fields = [];\n    includedFields.forEach(field => {\n        if (headerFields.has(field)) {\n            fields.push(field);\n            headersList.push(field + ':' + headerFields.get(field));\n        }\n    });\n\n    return {\n        headers: headersList.join('\\r\\n') + '\\r\\n',\n        fieldNames: fields.join(':')\n    };\n}\n\nfunction relaxedHeaderLine(line) {\n    return line\n        .substr(line.indexOf(':') + 1)\n        .replace(/\\r?\\n/g, '')\n        .replace(/\\s+/g, ' ')\n        .trim();\n}\n", "'use strict';\n\n// FIXME:\n// replace this Transform mess with a method that pipes input argument to output argument\n\nconst MessageParser = require('./message-parser');\nconst RelaxedBody = require('./relaxed-body');\nconst sign = require('./sign');\nconst PassThrough = require('stream').PassThrough;\nconst fs = require('fs');\nconst path = require('path');\nconst crypto = require('crypto');\n\nconst DKIM_ALGO = 'sha256';\nconst MAX_MESSAGE_SIZE = 128 * 1024; // buffer messages larger than this to disk\n\n/*\n// Usage:\n\nlet dkim = new DKIM({\n    domainName: 'example.com',\n    keySelector: 'key-selector',\n    privateKey,\n    cacheDir: '/tmp'\n});\ndkim.sign(input).pipe(process.stdout);\n\n// Where inputStream is a rfc822 message (either a stream, string or Buffer)\n// and outputStream is a DKIM signed rfc822 message\n*/\n\nclass DKIMSigner {\n    constructor(options, keys, input, output) {\n        this.options = options || {};\n        this.keys = keys;\n\n        this.cacheTreshold = Number(this.options.cacheTreshold) || MAX_MESSAGE_SIZE;\n        this.hashAlgo = this.options.hashAlgo || DKIM_ALGO;\n\n        this.cacheDir = this.options.cacheDir || false;\n\n        this.chunks = [];\n        this.chunklen = 0;\n        this.readPos = 0;\n        this.cachePath = this.cacheDir ? path.join(this.cacheDir, 'message.' + Date.now() + '-' + crypto.randomBytes(14).toString('hex')) : false;\n        this.cache = false;\n\n        this.headers = false;\n        this.bodyHash = false;\n        this.parser = false;\n        this.relaxedBody = false;\n\n        this.input = input;\n        this.output = output;\n        this.output.usingCache = false;\n\n        this.hasErrored = false;\n\n        this.input.on('error', err => {\n            this.hasErrored = true;\n            this.cleanup();\n            output.emit('error', err);\n        });\n    }\n\n    cleanup() {\n        if (!this.cache || !this.cachePath) {\n            return;\n        }\n        fs.unlink(this.cachePath, () => false);\n    }\n\n    createReadCache() {\n        // pipe remainings to cache file\n        this.cache = fs.createReadStream(this.cachePath);\n        this.cache.once('error', err => {\n            this.cleanup();\n            this.output.emit('error', err);\n        });\n        this.cache.once('close', () => {\n            this.cleanup();\n        });\n        this.cache.pipe(this.output);\n    }\n\n    sendNextChunk() {\n        if (this.hasErrored) {\n            return;\n        }\n\n        if (this.readPos >= this.chunks.length) {\n            if (!this.cache) {\n                return this.output.end();\n            }\n            return this.createReadCache();\n        }\n        let chunk = this.chunks[this.readPos++];\n        if (this.output.write(chunk) === false) {\n            return this.output.once('drain', () => {\n                this.sendNextChunk();\n            });\n        }\n        setImmediate(() => this.sendNextChunk());\n    }\n\n    sendSignedOutput() {\n        let keyPos = 0;\n        let signNextKey = () => {\n            if (keyPos >= this.keys.length) {\n                this.output.write(this.parser.rawHeaders);\n                return setImmediate(() => this.sendNextChunk());\n            }\n            let key = this.keys[keyPos++];\n            let dkimField = sign(this.headers, this.hashAlgo, this.bodyHash, {\n                domainName: key.domainName,\n                keySelector: key.keySelector,\n                privateKey: key.privateKey,\n                headerFieldNames: this.options.headerFieldNames,\n                skipFields: this.options.skipFields\n            });\n            if (dkimField) {\n                this.output.write(Buffer.from(dkimField + '\\r\\n'));\n            }\n            return setImmediate(signNextKey);\n        };\n\n        if (this.bodyHash && this.headers) {\n            return signNextKey();\n        }\n\n        this.output.write(this.parser.rawHeaders);\n        this.sendNextChunk();\n    }\n\n    createWriteCache() {\n        this.output.usingCache = true;\n        // pipe remainings to cache file\n        this.cache = fs.createWriteStream(this.cachePath);\n        this.cache.once('error', err => {\n            this.cleanup();\n            // drain input\n            this.relaxedBody.unpipe(this.cache);\n            this.relaxedBody.on('readable', () => {\n                while (this.relaxedBody.read() !== null) {\n                    // do nothing\n                }\n            });\n            this.hasErrored = true;\n            // emit error\n            this.output.emit('error', err);\n        });\n        this.cache.once('close', () => {\n            this.sendSignedOutput();\n        });\n        this.relaxedBody.removeAllListeners('readable');\n        this.relaxedBody.pipe(this.cache);\n    }\n\n    signStream() {\n        this.parser = new MessageParser();\n        this.relaxedBody = new RelaxedBody({\n            hashAlgo: this.hashAlgo\n        });\n\n        this.parser.on('headers', value => {\n            this.headers = value;\n        });\n\n        this.relaxedBody.on('hash', value => {\n            this.bodyHash = value;\n        });\n\n        this.relaxedBody.on('readable', () => {\n            let chunk;\n            if (this.cache) {\n                return;\n            }\n            while ((chunk = this.relaxedBody.read()) !== null) {\n                this.chunks.push(chunk);\n                this.chunklen += chunk.length;\n                if (this.chunklen >= this.cacheTreshold && this.cachePath) {\n                    return this.createWriteCache();\n                }\n            }\n        });\n\n        this.relaxedBody.on('end', () => {\n            if (this.cache) {\n                return;\n            }\n            this.sendSignedOutput();\n        });\n\n        this.parser.pipe(this.relaxedBody);\n        setImmediate(() => this.input.pipe(this.parser));\n    }\n}\n\nclass DKIM {\n    constructor(options) {\n        this.options = options || {};\n        this.keys = [].concat(\n            this.options.keys || {\n                domainName: options.domainName,\n                keySelector: options.keySelector,\n                privateKey: options.privateKey\n            }\n        );\n    }\n\n    sign(input, extraOptions) {\n        let output = new PassThrough();\n        let inputStream = input;\n        let writeValue = false;\n\n        if (Buffer.isBuffer(input)) {\n            writeValue = input;\n            inputStream = new PassThrough();\n        } else if (typeof input === 'string') {\n            writeValue = Buffer.from(input);\n            inputStream = new PassThrough();\n        }\n\n        let options = this.options;\n        if (extraOptions && Object.keys(extraOptions).length) {\n            options = {};\n            Object.keys(this.options || {}).forEach(key => {\n                options[key] = this.options[key];\n            });\n            Object.keys(extraOptions || {}).forEach(key => {\n                if (!(key in options)) {\n                    options[key] = extraOptions[key];\n                }\n            });\n        }\n\n        let signer = new DKIMSigner(options, this.keys, inputStream, output);\n        setImmediate(() => {\n            signer.signStream();\n            if (writeValue) {\n                setImmediate(() => {\n                    inputStream.end(writeValue);\n                });\n            }\n        });\n\n        return output;\n    }\n}\n\nmodule.exports = DKIM;\n", "'use strict';\n\n/**\n * Minimal HTTP/S proxy client\n */\n\nconst net = require('net');\nconst tls = require('tls');\nconst urllib = require('url');\n\n/**\n * Establishes proxied connection to destinationPort\n *\n * httpProxyClient(\"http://localhost:3128/\", 80, \"google.com\", function(err, socket){\n *     socket.write(\"GET / HTTP/1.0\\r\\n\\r\\n\");\n * });\n *\n * @param {String} proxyUrl proxy configuration, etg \"http://proxy.host:3128/\"\n * @param {Number} destinationPort Port to open in destination host\n * @param {String} destinationHost Destination hostname\n * @param {Function} callback Callback to run with the rocket object once connection is established\n */\nfunction httpProxyClient(proxyUrl, destinationPort, destinationHost, callback) {\n    let proxy = urllib.parse(proxyUrl);\n\n    // create a socket connection to the proxy server\n    let options;\n    let connect;\n    let socket;\n\n    options = {\n        host: proxy.hostname,\n        port: Number(proxy.port) ? Number(proxy.port) : proxy.protocol === 'https:' ? 443 : 80\n    };\n\n    if (proxy.protocol === 'https:') {\n        // we can use untrusted proxies as long as we verify actual SMTP certificates\n        options.rejectUnauthorized = false;\n        connect = tls.connect.bind(tls);\n    } else {\n        connect = net.connect.bind(net);\n    }\n\n    // Error harness for initial connection. Once connection is established, the responsibility\n    // to handle errors is passed to whoever uses this socket\n    let finished = false;\n    let tempSocketErr = err => {\n        if (finished) {\n            return;\n        }\n        finished = true;\n        try {\n            socket.destroy();\n        } catch (E) {\n            // ignore\n        }\n        callback(err);\n    };\n\n    let timeoutErr = () => {\n        let err = new Error('Proxy socket timed out');\n        err.code = 'ETIMEDOUT';\n        tempSocketErr(err);\n    };\n\n    socket = connect(options, () => {\n        if (finished) {\n            return;\n        }\n\n        let reqHeaders = {\n            Host: destinationHost + ':' + destinationPort,\n            Connection: 'close'\n        };\n        if (proxy.auth) {\n            reqHeaders['Proxy-Authorization'] = 'Basic ' + Buffer.from(proxy.auth).toString('base64');\n        }\n\n        socket.write(\n            // HTTP method\n            'CONNECT ' +\n                destinationHost +\n                ':' +\n                destinationPort +\n                ' HTTP/1.1\\r\\n' +\n                // HTTP request headers\n                Object.keys(reqHeaders)\n                    .map(key => key + ': ' + reqHeaders[key])\n                    .join('\\r\\n') +\n                // End request\n                '\\r\\n\\r\\n'\n        );\n\n        let headers = '';\n        let onSocketData = chunk => {\n            let match;\n            let remainder;\n\n            if (finished) {\n                return;\n            }\n\n            headers += chunk.toString('binary');\n            if ((match = headers.match(/\\r\\n\\r\\n/))) {\n                socket.removeListener('data', onSocketData);\n\n                remainder = headers.substr(match.index + match[0].length);\n                headers = headers.substr(0, match.index);\n                if (remainder) {\n                    socket.unshift(Buffer.from(remainder, 'binary'));\n                }\n\n                // proxy connection is now established\n                finished = true;\n\n                // check response code\n                match = headers.match(/^HTTP\\/\\d+\\.\\d+ (\\d+)/i);\n                if (!match || (match[1] || '').charAt(0) !== '2') {\n                    try {\n                        socket.destroy();\n                    } catch (E) {\n                        // ignore\n                    }\n                    return callback(new Error('Invalid response from proxy' + ((match && ': ' + match[1]) || '')));\n                }\n\n                socket.removeListener('error', tempSocketErr);\n                socket.removeListener('timeout', timeoutErr);\n                socket.setTimeout(0);\n\n                return callback(null, socket);\n            }\n        };\n        socket.on('data', onSocketData);\n    });\n\n    socket.setTimeout(httpProxyClient.timeout || 30 * 1000);\n    socket.on('timeout', timeoutErr);\n\n    socket.once('error', tempSocketErr);\n}\n\nmodule.exports = httpProxyClient;\n", "'use strict';\n\nconst shared = require('../shared');\nconst MimeNode = require('../mime-node');\nconst mimeFuncs = require('../mime-funcs');\n\nclass MailMessage {\n    constructor(mailer, data) {\n        this.mailer = mailer;\n        this.data = {};\n        this.message = null;\n\n        data = data || {};\n        let options = mailer.options || {};\n        let defaults = mailer._defaults || {};\n\n        Object.keys(data).forEach(key => {\n            this.data[key] = data[key];\n        });\n\n        this.data.headers = this.data.headers || {};\n\n        // apply defaults\n        Object.keys(defaults).forEach(key => {\n            if (!(key in this.data)) {\n                this.data[key] = defaults[key];\n            } else if (key === 'headers') {\n                // headers is a special case. Allow setting individual default headers\n                Object.keys(defaults.headers).forEach(key => {\n                    if (!(key in this.data.headers)) {\n                        this.data.headers[key] = defaults.headers[key];\n                    }\n                });\n            }\n        });\n\n        // force specific keys from transporter options\n        ['disableFileAccess', 'disableUrlAccess', 'normalizeHeaderKey'].forEach(key => {\n            if (key in options) {\n                this.data[key] = options[key];\n            }\n        });\n    }\n\n    resolveContent(...args) {\n        return shared.resolveContent(...args);\n    }\n\n    resolveAll(callback) {\n        let keys = [\n            [this.data, 'html'],\n            [this.data, 'text'],\n            [this.data, 'watchHtml'],\n            [this.data, 'amp'],\n            [this.data, 'icalEvent']\n        ];\n\n        if (this.data.alternatives && this.data.alternatives.length) {\n            this.data.alternatives.forEach((alternative, i) => {\n                keys.push([this.data.alternatives, i]);\n            });\n        }\n\n        if (this.data.attachments && this.data.attachments.length) {\n            this.data.attachments.forEach((attachment, i) => {\n                if (!attachment.filename) {\n                    attachment.filename = (attachment.path || attachment.href || '').split('/').pop().split('?').shift() || 'attachment-' + (i + 1);\n                    if (attachment.filename.indexOf('.') < 0) {\n                        attachment.filename += '.' + mimeFuncs.detectExtension(attachment.contentType);\n                    }\n                }\n\n                if (!attachment.contentType) {\n                    attachment.contentType = mimeFuncs.detectMimeType(attachment.filename || attachment.path || attachment.href || 'bin');\n                }\n\n                keys.push([this.data.attachments, i]);\n            });\n        }\n\n        let mimeNode = new MimeNode();\n\n        let addressKeys = ['from', 'to', 'cc', 'bcc', 'sender', 'replyTo'];\n\n        addressKeys.forEach(address => {\n            let value;\n            if (this.message) {\n                value = [].concat(mimeNode._parseAddresses(this.message.getHeader(address === 'replyTo' ? 'reply-to' : address)) || []);\n            } else if (this.data[address]) {\n                value = [].concat(mimeNode._parseAddresses(this.data[address]) || []);\n            }\n            if (value && value.length) {\n                this.data[address] = value;\n            } else if (address in this.data) {\n                this.data[address] = null;\n            }\n        });\n\n        let singleKeys = ['from', 'sender'];\n        singleKeys.forEach(address => {\n            if (this.data[address]) {\n                this.data[address] = this.data[address].shift();\n            }\n        });\n\n        let pos = 0;\n        let resolveNext = () => {\n            if (pos >= keys.length) {\n                return callback(null, this.data);\n            }\n            let args = keys[pos++];\n            if (!args[0] || !args[0][args[1]]) {\n                return resolveNext();\n            }\n            shared.resolveContent(...args, (err, value) => {\n                if (err) {\n                    return callback(err);\n                }\n\n                let node = {\n                    content: value\n                };\n                if (args[0][args[1]] && typeof args[0][args[1]] === 'object' && !Buffer.isBuffer(args[0][args[1]])) {\n                    Object.keys(args[0][args[1]]).forEach(key => {\n                        if (!(key in node) && !['content', 'path', 'href', 'raw'].includes(key)) {\n                            node[key] = args[0][args[1]][key];\n                        }\n                    });\n                }\n\n                args[0][args[1]] = node;\n                resolveNext();\n            });\n        };\n\n        setImmediate(() => resolveNext());\n    }\n\n    normalize(callback) {\n        let envelope = this.data.envelope || this.message.getEnvelope();\n        let messageId = this.message.messageId();\n\n        this.resolveAll((err, data) => {\n            if (err) {\n                return callback(err);\n            }\n\n            data.envelope = envelope;\n            data.messageId = messageId;\n\n            ['html', 'text', 'watchHtml', 'amp'].forEach(key => {\n                if (data[key] && data[key].content) {\n                    if (typeof data[key].content === 'string') {\n                        data[key] = data[key].content;\n                    } else if (Buffer.isBuffer(data[key].content)) {\n                        data[key] = data[key].content.toString();\n                    }\n                }\n            });\n\n            if (data.icalEvent && Buffer.isBuffer(data.icalEvent.content)) {\n                data.icalEvent.content = data.icalEvent.content.toString('base64');\n                data.icalEvent.encoding = 'base64';\n            }\n\n            if (data.alternatives && data.alternatives.length) {\n                data.alternatives.forEach(alternative => {\n                    if (alternative && alternative.content && Buffer.isBuffer(alternative.content)) {\n                        alternative.content = alternative.content.toString('base64');\n                        alternative.encoding = 'base64';\n                    }\n                });\n            }\n\n            if (data.attachments && data.attachments.length) {\n                data.attachments.forEach(attachment => {\n                    if (attachment && attachment.content && Buffer.isBuffer(attachment.content)) {\n                        attachment.content = attachment.content.toString('base64');\n                        attachment.encoding = 'base64';\n                    }\n                });\n            }\n\n            data.normalizedHeaders = {};\n            Object.keys(data.headers || {}).forEach(key => {\n                let value = [].concat(data.headers[key] || []).shift();\n                value = (value && value.value) || value;\n                if (value) {\n                    if (['references', 'in-reply-to', 'message-id', 'content-id'].includes(key)) {\n                        value = this.message._encodeHeaderValue(key, value);\n                    }\n                    data.normalizedHeaders[key] = value;\n                }\n            });\n\n            if (data.list && typeof data.list === 'object') {\n                let listHeaders = this._getListHeaders(data.list);\n                listHeaders.forEach(entry => {\n                    data.normalizedHeaders[entry.key] = entry.value.map(val => (val && val.value) || val).join(', ');\n                });\n            }\n\n            if (data.references) {\n                data.normalizedHeaders.references = this.message._encodeHeaderValue('references', data.references);\n            }\n\n            if (data.inReplyTo) {\n                data.normalizedHeaders['in-reply-to'] = this.message._encodeHeaderValue('in-reply-to', data.inReplyTo);\n            }\n\n            return callback(null, data);\n        });\n    }\n\n    setMailerHeader() {\n        if (!this.message || !this.data.xMailer) {\n            return;\n        }\n        this.message.setHeader('X-Mailer', this.data.xMailer);\n    }\n\n    setPriorityHeaders() {\n        if (!this.message || !this.data.priority) {\n            return;\n        }\n        switch ((this.data.priority || '').toString().toLowerCase()) {\n            case 'high':\n                this.message.setHeader('X-Priority', '1 (Highest)');\n                this.message.setHeader('X-MSMail-Priority', 'High');\n                this.message.setHeader('Importance', 'High');\n                break;\n            case 'low':\n                this.message.setHeader('X-Priority', '5 (Lowest)');\n                this.message.setHeader('X-MSMail-Priority', 'Low');\n                this.message.setHeader('Importance', 'Low');\n                break;\n            default:\n            // do not add anything, since all messages are 'Normal' by default\n        }\n    }\n\n    setListHeaders() {\n        if (!this.message || !this.data.list || typeof this.data.list !== 'object') {\n            return;\n        }\n        // add optional List-* headers\n        if (this.data.list && typeof this.data.list === 'object') {\n            this._getListHeaders(this.data.list).forEach(listHeader => {\n                listHeader.value.forEach(value => {\n                    this.message.addHeader(listHeader.key, value);\n                });\n            });\n        }\n    }\n\n    _getListHeaders(listData) {\n        // make sure an url looks like <protocol:url>\n        return Object.keys(listData).map(key => ({\n            key: 'list-' + key.toLowerCase().trim(),\n            value: [].concat(listData[key] || []).map(value => ({\n                prepared: true,\n                foldLines: true,\n                value: []\n                    .concat(value || [])\n                    .map(value => {\n                        if (typeof value === 'string') {\n                            value = {\n                                url: value\n                            };\n                        }\n\n                        if (value && value.url) {\n                            if (key.toLowerCase().trim() === 'id') {\n                                // List-ID: \"comment\" <domain>\n                                let comment = value.comment || '';\n                                if (mimeFuncs.isPlainText(comment)) {\n                                    comment = '\"' + comment + '\"';\n                                } else {\n                                    comment = mimeFuncs.encodeWord(comment);\n                                }\n\n                                return (value.comment ? comment + ' ' : '') + this._formatListUrl(value.url).replace(/^<[^:]+\\/{,2}/, '');\n                            }\n\n                            // List-*: <http://domain> (comment)\n                            let comment = value.comment || '';\n                            if (!mimeFuncs.isPlainText(comment)) {\n                                comment = mimeFuncs.encodeWord(comment);\n                            }\n\n                            return this._formatListUrl(value.url) + (value.comment ? ' (' + comment + ')' : '');\n                        }\n\n                        return '';\n                    })\n                    .filter(value => value)\n                    .join(', ')\n            }))\n        }));\n    }\n\n    _formatListUrl(url) {\n        url = url.replace(/[\\s<]+|[\\s>]+/g, '');\n        if (/^(https?|mailto|ftp):/.test(url)) {\n            return '<' + url + '>';\n        }\n        if (/^[^@]+@[^@]+$/.test(url)) {\n            return '<mailto:' + url + '>';\n        }\n\n        return '<http://' + url + '>';\n    }\n}\n\nmodule.exports = MailMessage;\n", "'use strict';\n\nconst EventEmitter = require('events');\nconst shared = require('../shared');\nconst mimeTypes = require('../mime-funcs/mime-types');\nconst MailComposer = require('../mail-composer');\nconst DKIM = require('../dkim');\nconst httpProxyClient = require('../smtp-connection/http-proxy-client');\nconst util = require('util');\nconst urllib = require('url');\nconst packageData = require('../../package.json');\nconst MailMessage = require('./mail-message');\nconst net = require('net');\nconst dns = require('dns');\nconst crypto = require('crypto');\n\n/**\n * Creates an object for exposing the Mail API\n *\n * @constructor\n * @param {Object} transporter Transport object instance to pass the mails to\n */\nclass Mail extends EventEmitter {\n    constructor(transporter, options, defaults) {\n        super();\n\n        this.options = options || {};\n        this._defaults = defaults || {};\n\n        this._defaultPlugins = {\n            compile: [(...args) => this._convertDataImages(...args)],\n            stream: []\n        };\n\n        this._userPlugins = {\n            compile: [],\n            stream: []\n        };\n\n        this.meta = new Map();\n\n        this.dkim = this.options.dkim ? new DKIM(this.options.dkim) : false;\n\n        this.transporter = transporter;\n        this.transporter.mailer = this;\n\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || 'mail'\n        });\n\n        this.logger.debug(\n            {\n                tnx: 'create'\n            },\n            'Creating transport: %s',\n            this.getVersionString()\n        );\n\n        // setup emit handlers for the transporter\n        if (typeof this.transporter.on === 'function') {\n            // deprecated log interface\n            this.transporter.on('log', log => {\n                this.logger.debug(\n                    {\n                        tnx: 'transport'\n                    },\n                    '%s: %s',\n                    log.type,\n                    log.message\n                );\n            });\n\n            // transporter errors\n            this.transporter.on('error', err => {\n                this.logger.error(\n                    {\n                        err,\n                        tnx: 'transport'\n                    },\n                    'Transport Error: %s',\n                    err.message\n                );\n                this.emit('error', err);\n            });\n\n            // indicates if the sender has became idle\n            this.transporter.on('idle', (...args) => {\n                this.emit('idle', ...args);\n            });\n        }\n\n        /**\n         * Optional methods passed to the underlying transport object\n         */\n        ['close', 'isIdle', 'verify'].forEach(method => {\n            this[method] = (...args) => {\n                if (typeof this.transporter[method] === 'function') {\n                    if (method === 'verify' && typeof this.getSocket === 'function') {\n                        this.transporter.getSocket = this.getSocket;\n                        this.getSocket = false;\n                    }\n                    return this.transporter[method](...args);\n                } else {\n                    this.logger.warn(\n                        {\n                            tnx: 'transport',\n                            methodName: method\n                        },\n                        'Non existing method %s called for transport',\n                        method\n                    );\n                    return false;\n                }\n            };\n        });\n\n        // setup proxy handling\n        if (this.options.proxy && typeof this.options.proxy === 'string') {\n            this.setupProxy(this.options.proxy);\n        }\n    }\n\n    use(step, plugin) {\n        step = (step || '').toString();\n        if (!this._userPlugins.hasOwnProperty(step)) {\n            this._userPlugins[step] = [plugin];\n        } else {\n            this._userPlugins[step].push(plugin);\n        }\n\n        return this;\n    }\n\n    /**\n     * Sends an email using the preselected transport object\n     *\n     * @param {Object} data E-data description\n     * @param {Function?} callback Callback to run once the sending succeeded or failed\n     */\n    sendMail(data, callback = null) {\n        let promise;\n\n        if (!callback) {\n            promise = new Promise((resolve, reject) => {\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n\n        if (typeof this.getSocket === 'function') {\n            this.transporter.getSocket = this.getSocket;\n            this.getSocket = false;\n        }\n\n        let mail = new MailMessage(this, data);\n\n        this.logger.debug(\n            {\n                tnx: 'transport',\n                name: this.transporter.name,\n                version: this.transporter.version,\n                action: 'send'\n            },\n            'Sending mail using %s/%s',\n            this.transporter.name,\n            this.transporter.version\n        );\n\n        this._processPlugins('compile', mail, err => {\n            if (err) {\n                this.logger.error(\n                    {\n                        err,\n                        tnx: 'plugin',\n                        action: 'compile'\n                    },\n                    'PluginCompile Error: %s',\n                    err.message\n                );\n                return callback(err);\n            }\n\n            mail.message = new MailComposer(mail.data).compile();\n\n            mail.setMailerHeader();\n            mail.setPriorityHeaders();\n            mail.setListHeaders();\n\n            this._processPlugins('stream', mail, err => {\n                if (err) {\n                    this.logger.error(\n                        {\n                            err,\n                            tnx: 'plugin',\n                            action: 'stream'\n                        },\n                        'PluginStream Error: %s',\n                        err.message\n                    );\n                    return callback(err);\n                }\n\n                if (mail.data.dkim || this.dkim) {\n                    mail.message.processFunc(input => {\n                        let dkim = mail.data.dkim ? new DKIM(mail.data.dkim) : this.dkim;\n                        this.logger.debug(\n                            {\n                                tnx: 'DKIM',\n                                messageId: mail.message.messageId(),\n                                dkimDomains: dkim.keys.map(key => key.keySelector + '.' + key.domainName).join(', ')\n                            },\n                            'Signing outgoing message with %s keys',\n                            dkim.keys.length\n                        );\n                        return dkim.sign(input, mail.data._dkim);\n                    });\n                }\n\n                this.transporter.send(mail, (...args) => {\n                    if (args[0]) {\n                        this.logger.error(\n                            {\n                                err: args[0],\n                                tnx: 'transport',\n                                action: 'send'\n                            },\n                            'Send Error: %s',\n                            args[0].message\n                        );\n                    }\n                    callback(...args);\n                });\n            });\n        });\n\n        return promise;\n    }\n\n    getVersionString() {\n        return util.format('%s (%s; +%s; %s/%s)', packageData.name, packageData.version, packageData.homepage, this.transporter.name, this.transporter.version);\n    }\n\n    _processPlugins(step, mail, callback) {\n        step = (step || '').toString();\n\n        if (!this._userPlugins.hasOwnProperty(step)) {\n            return callback();\n        }\n\n        let userPlugins = this._userPlugins[step] || [];\n        let defaultPlugins = this._defaultPlugins[step] || [];\n\n        if (userPlugins.length) {\n            this.logger.debug(\n                {\n                    tnx: 'transaction',\n                    pluginCount: userPlugins.length,\n                    step\n                },\n                'Using %s plugins for %s',\n                userPlugins.length,\n                step\n            );\n        }\n\n        if (userPlugins.length + defaultPlugins.length === 0) {\n            return callback();\n        }\n\n        let pos = 0;\n        let block = 'default';\n        let processPlugins = () => {\n            let curplugins = block === 'default' ? defaultPlugins : userPlugins;\n            if (pos >= curplugins.length) {\n                if (block === 'default' && userPlugins.length) {\n                    block = 'user';\n                    pos = 0;\n                    curplugins = userPlugins;\n                } else {\n                    return callback();\n                }\n            }\n            let plugin = curplugins[pos++];\n            plugin(mail, err => {\n                if (err) {\n                    return callback(err);\n                }\n                processPlugins();\n            });\n        };\n\n        processPlugins();\n    }\n\n    /**\n     * Sets up proxy handler for a Nodemailer object\n     *\n     * @param {String} proxyUrl Proxy configuration url\n     */\n    setupProxy(proxyUrl) {\n        let proxy = urllib.parse(proxyUrl);\n\n        // setup socket handler for the mailer object\n        this.getSocket = (options, callback) => {\n            let protocol = proxy.protocol.replace(/:$/, '').toLowerCase();\n\n            if (this.meta.has('proxy_handler_' + protocol)) {\n                return this.meta.get('proxy_handler_' + protocol)(proxy, options, callback);\n            }\n\n            switch (protocol) {\n                // Connect using a HTTP CONNECT method\n                case 'http':\n                case 'https':\n                    httpProxyClient(proxy.href, options.port, options.host, (err, socket) => {\n                        if (err) {\n                            return callback(err);\n                        }\n                        return callback(null, {\n                            connection: socket\n                        });\n                    });\n                    return;\n                case 'socks':\n                case 'socks5':\n                case 'socks4':\n                case 'socks4a': {\n                    if (!this.meta.has('proxy_socks_module')) {\n                        return callback(new Error('Socks module not loaded'));\n                    }\n                    let connect = ipaddress => {\n                        let proxyV2 = !!this.meta.get('proxy_socks_module').SocksClient;\n                        let socksClient = proxyV2 ? this.meta.get('proxy_socks_module').SocksClient : this.meta.get('proxy_socks_module');\n                        let proxyType = Number(proxy.protocol.replace(/\\D/g, '')) || 5;\n                        let connectionOpts = {\n                            proxy: {\n                                ipaddress,\n                                port: Number(proxy.port),\n                                type: proxyType\n                            },\n                            [proxyV2 ? 'destination' : 'target']: {\n                                host: options.host,\n                                port: options.port\n                            },\n                            command: 'connect'\n                        };\n\n                        if (proxy.auth) {\n                            let username = decodeURIComponent(proxy.auth.split(':').shift());\n                            let password = decodeURIComponent(proxy.auth.split(':').pop());\n                            if (proxyV2) {\n                                connectionOpts.proxy.userId = username;\n                                connectionOpts.proxy.password = password;\n                            } else if (proxyType === 4) {\n                                connectionOpts.userid = username;\n                            } else {\n                                connectionOpts.authentication = {\n                                    username,\n                                    password\n                                };\n                            }\n                        }\n\n                        socksClient.createConnection(connectionOpts, (err, info) => {\n                            if (err) {\n                                return callback(err);\n                            }\n                            return callback(null, {\n                                connection: info.socket || info\n                            });\n                        });\n                    };\n\n                    if (net.isIP(proxy.hostname)) {\n                        return connect(proxy.hostname);\n                    }\n\n                    return dns.resolve(proxy.hostname, (err, address) => {\n                        if (err) {\n                            return callback(err);\n                        }\n                        connect(Array.isArray(address) ? address[0] : address);\n                    });\n                }\n            }\n            callback(new Error('Unknown proxy configuration'));\n        };\n    }\n\n    _convertDataImages(mail, callback) {\n        if ((!this.options.attachDataUrls && !mail.data.attachDataUrls) || !mail.data.html) {\n            return callback();\n        }\n        mail.resolveContent(mail.data, 'html', (err, html) => {\n            if (err) {\n                return callback(err);\n            }\n            let cidCounter = 0;\n            html = (html || '')\n                .toString()\n                .replace(/(<img\\b[^<>]{0,1024} src\\s{0,20}=[\\s\"']{0,20})(data:([^;]+);[^\"'>\\s]+)/gi, (match, prefix, dataUri, mimeType) => {\n                    let cid = crypto.randomBytes(10).toString('hex') + '@localhost';\n                    if (!mail.data.attachments) {\n                        mail.data.attachments = [];\n                    }\n                    if (!Array.isArray(mail.data.attachments)) {\n                        mail.data.attachments = [].concat(mail.data.attachments || []);\n                    }\n                    mail.data.attachments.push({\n                        path: dataUri,\n                        cid,\n                        filename: 'image-' + ++cidCounter + '.' + mimeTypes.detectExtension(mimeType)\n                    });\n                    return prefix + 'cid:' + cid;\n                });\n            mail.data.html = html;\n            callback();\n        });\n    }\n\n    set(key, value) {\n        return this.meta.set(key, value);\n    }\n\n    get(key) {\n        return this.meta.get(key);\n    }\n}\n\nmodule.exports = Mail;\n", "'use strict';\n\nconst stream = require('stream');\nconst Transform = stream.Transform;\n\n/**\n * Escapes dots in the beginning of lines. Ends the stream with <CR><LF>.<CR><LF>\n * Also makes sure that only <CR><LF> sequences are used for linebreaks\n *\n * @param {Object} options Stream options\n */\nclass DataStream extends Transform {\n    constructor(options) {\n        super(options);\n        // init Transform\n        this.options = options || {};\n        this._curLine = '';\n\n        this.inByteCount = 0;\n        this.outByteCount = 0;\n        this.lastByte = false;\n    }\n\n    /**\n     * Escapes dots\n     */\n    _transform(chunk, encoding, done) {\n        let chunks = [];\n        let chunklen = 0;\n        let i,\n            len,\n            lastPos = 0;\n        let buf;\n\n        if (!chunk || !chunk.length) {\n            return done();\n        }\n\n        if (typeof chunk === 'string') {\n            chunk = Buffer.from(chunk);\n        }\n\n        this.inByteCount += chunk.length;\n\n        for (i = 0, len = chunk.length; i < len; i++) {\n            if (chunk[i] === 0x2e) {\n                // .\n                if ((i && chunk[i - 1] === 0x0a) || (!i && (!this.lastByte || this.lastByte === 0x0a))) {\n                    buf = chunk.slice(lastPos, i + 1);\n                    chunks.push(buf);\n                    chunks.push(Buffer.from('.'));\n                    chunklen += buf.length + 1;\n                    lastPos = i + 1;\n                }\n            } else if (chunk[i] === 0x0a) {\n                // .\n                if ((i && chunk[i - 1] !== 0x0d) || (!i && this.lastByte !== 0x0d)) {\n                    if (i > lastPos) {\n                        buf = chunk.slice(lastPos, i);\n                        chunks.push(buf);\n                        chunklen += buf.length + 2;\n                    } else {\n                        chunklen += 2;\n                    }\n                    chunks.push(Buffer.from('\\r\\n'));\n                    lastPos = i + 1;\n                }\n            }\n        }\n\n        if (chunklen) {\n            // add last piece\n            if (lastPos < chunk.length) {\n                buf = chunk.slice(lastPos);\n                chunks.push(buf);\n                chunklen += buf.length;\n            }\n\n            this.outByteCount += chunklen;\n            this.push(Buffer.concat(chunks, chunklen));\n        } else {\n            this.outByteCount += chunk.length;\n            this.push(chunk);\n        }\n\n        this.lastByte = chunk[chunk.length - 1];\n        done();\n    }\n\n    /**\n     * Finalizes the stream with a dot on a single line\n     */\n    _flush(done) {\n        let buf;\n        if (this.lastByte === 0x0a) {\n            buf = Buffer.from('.\\r\\n');\n        } else if (this.lastByte === 0x0d) {\n            buf = Buffer.from('\\n.\\r\\n');\n        } else {\n            buf = Buffer.from('\\r\\n.\\r\\n');\n        }\n        this.outByteCount += buf.length;\n        this.push(buf);\n        done();\n    }\n}\n\nmodule.exports = DataStream;\n", "'use strict';\n\nconst packageInfo = require('../../package.json');\nconst EventEmitter = require('events').EventEmitter;\nconst net = require('net');\nconst tls = require('tls');\nconst os = require('os');\nconst crypto = require('crypto');\nconst DataStream = require('./data-stream');\nconst PassThrough = require('stream').PassThrough;\nconst shared = require('../shared');\n\n// default timeout values in ms\nconst CONNECTION_TIMEOUT = 2 * 60 * 1000; // how much to wait for the connection to be established\nconst SOCKET_TIMEOUT = 10 * 60 * 1000; // how much to wait for socket inactivity before disconnecting the client\nconst GREETING_TIMEOUT = 30 * 1000; // how much to wait after connection is established but SMTP greeting is not receieved\nconst DNS_TIMEOUT = 30 * 1000; // how much to wait for resolveHostname\n\n/**\n * Generates a SMTP connection object\n *\n * Optional options object takes the following possible properties:\n *\n *  * **port** - is the port to connect to (defaults to 587 or 465)\n *  * **host** - is the hostname or IP address to connect to (defaults to 'localhost')\n *  * **secure** - use SSL\n *  * **ignoreTLS** - ignore server support for STARTTLS\n *  * **requireTLS** - forces the client to use STARTTLS\n *  * **name** - the name of the client server\n *  * **localAddress** - outbound address to bind to (see: http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener)\n *  * **greetingTimeout** - Time to wait in ms until greeting message is received from the server (defaults to 10000)\n *  * **connectionTimeout** - how many milliseconds to wait for the connection to establish\n *  * **socketTimeout** - Time of inactivity until the connection is closed (defaults to 1 hour)\n *  * **dnsTimeout** - Time to wait in ms for the DNS requests to be resolved (defaults to 30 seconds)\n *  * **lmtp** - if true, uses LMTP instead of SMTP protocol\n *  * **logger** - bunyan compatible logger interface\n *  * **debug** - if true pass SMTP traffic to the logger\n *  * **tls** - options for createCredentials\n *  * **socket** - existing socket to use instead of creating a new one (see: http://nodejs.org/api/net.html#net_class_net_socket)\n *  * **secured** - boolean indicates that the provided socket has already been upgraded to tls\n *\n * @constructor\n * @namespace SMTP Client module\n * @param {Object} [options] Option properties\n */\nclass SMTPConnection extends EventEmitter {\n    constructor(options) {\n        super(options);\n\n        this.id = crypto.randomBytes(8).toString('base64').replace(/\\W/g, '');\n        this.stage = 'init';\n\n        this.options = options || {};\n\n        this.secureConnection = !!this.options.secure;\n        this.alreadySecured = !!this.options.secured;\n\n        this.port = Number(this.options.port) || (this.secureConnection ? 465 : 587);\n        this.host = this.options.host || 'localhost';\n\n        this.servername = this.options.servername ? this.options.servername : !net.isIP(this.host) ? this.host : false;\n\n        this.allowInternalNetworkInterfaces = this.options.allowInternalNetworkInterfaces || false;\n\n        if (typeof this.options.secure === 'undefined' && this.port === 465) {\n            // if secure option is not set but port is 465, then default to secure\n            this.secureConnection = true;\n        }\n\n        this.name = this.options.name || this._getHostname();\n\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || 'smtp-connection',\n            sid: this.id\n        });\n\n        this.customAuth = new Map();\n        Object.keys(this.options.customAuth || {}).forEach(key => {\n            let mapKey = (key || '').toString().trim().toUpperCase();\n            if (!mapKey) {\n                return;\n            }\n            this.customAuth.set(mapKey, this.options.customAuth[key]);\n        });\n\n        /**\n         * Expose version nr, just for the reference\n         * @type {String}\n         */\n        this.version = packageInfo.version;\n\n        /**\n         * If true, then the user is authenticated\n         * @type {Boolean}\n         */\n        this.authenticated = false;\n\n        /**\n         * If set to true, this instance is no longer active\n         * @private\n         */\n        this.destroyed = false;\n\n        /**\n         * Defines if the current connection is secure or not. If not,\n         * STARTTLS can be used if available\n         * @private\n         */\n        this.secure = !!this.secureConnection;\n\n        /**\n         * Store incomplete messages coming from the server\n         * @private\n         */\n        this._remainder = '';\n\n        /**\n         * Unprocessed responses from the server\n         * @type {Array}\n         */\n        this._responseQueue = [];\n\n        this.lastServerResponse = false;\n\n        /**\n         * The socket connecting to the server\n         * @publick\n         */\n        this._socket = false;\n\n        /**\n         * Lists supported auth mechanisms\n         * @private\n         */\n        this._supportedAuth = [];\n\n        /**\n         * Set to true, if EHLO response includes \"AUTH\".\n         * If false then authentication is not tried\n         */\n        this.allowsAuth = false;\n\n        /**\n         * Includes current envelope (from, to)\n         * @private\n         */\n        this._envelope = false;\n\n        /**\n         * Lists supported extensions\n         * @private\n         */\n        this._supportedExtensions = [];\n\n        /**\n         * Defines the maximum allowed size for a single message\n         * @private\n         */\n        this._maxAllowedSize = 0;\n\n        /**\n         * Function queue to run if a data chunk comes from the server\n         * @private\n         */\n        this._responseActions = [];\n        this._recipientQueue = [];\n\n        /**\n         * Timeout variable for waiting the greeting\n         * @private\n         */\n        this._greetingTimeout = false;\n\n        /**\n         * Timeout variable for waiting the connection to start\n         * @private\n         */\n        this._connectionTimeout = false;\n\n        /**\n         * If the socket is deemed already closed\n         * @private\n         */\n        this._destroyed = false;\n\n        /**\n         * If the socket is already being closed\n         * @private\n         */\n        this._closing = false;\n\n        /**\n         * Callbacks for socket's listeners\n         */\n        this._onSocketData = chunk => this._onData(chunk);\n        this._onSocketError = error => this._onError(error, 'ESOCKET', false, 'CONN');\n        this._onSocketClose = () => this._onClose();\n        this._onSocketEnd = () => this._onEnd();\n        this._onSocketTimeout = () => this._onTimeout();\n    }\n\n    /**\n     * Creates a connection to a SMTP server and sets up connection\n     * listener\n     */\n    connect(connectCallback) {\n        if (typeof connectCallback === 'function') {\n            this.once('connect', () => {\n                this.logger.debug(\n                    {\n                        tnx: 'smtp'\n                    },\n                    'SMTP handshake finished'\n                );\n                connectCallback();\n            });\n\n            const isDestroyedMessage = this._isDestroyedMessage('connect');\n            if (isDestroyedMessage) {\n                return connectCallback(this._formatError(isDestroyedMessage, 'ECONNECTION', false, 'CONN'));\n            }\n        }\n\n        let opts = {\n            port: this.port,\n            host: this.host,\n            allowInternalNetworkInterfaces: this.allowInternalNetworkInterfaces,\n            timeout: this.options.dnsTimeout || DNS_TIMEOUT\n        };\n\n        if (this.options.localAddress) {\n            opts.localAddress = this.options.localAddress;\n        }\n\n        let setupConnectionHandlers = () => {\n            this._connectionTimeout = setTimeout(() => {\n                this._onError('Connection timeout', 'ETIMEDOUT', false, 'CONN');\n            }, this.options.connectionTimeout || CONNECTION_TIMEOUT);\n\n            this._socket.on('error', this._onSocketError);\n        };\n\n        if (this.options.connection) {\n            // connection is already opened\n            this._socket = this.options.connection;\n            setupConnectionHandlers();\n\n            if (this.secureConnection && !this.alreadySecured) {\n                setImmediate(() =>\n                    this._upgradeConnection(err => {\n                        if (err) {\n                            this._onError(new Error('Error initiating TLS - ' + (err.message || err)), 'ETLS', false, 'CONN');\n                            return;\n                        }\n                        this._onConnect();\n                    })\n                );\n            } else {\n                setImmediate(() => this._onConnect());\n            }\n            return;\n        } else if (this.options.socket) {\n            // socket object is set up but not yet connected\n            this._socket = this.options.socket;\n            return shared.resolveHostname(opts, (err, resolved) => {\n                if (err) {\n                    return setImmediate(() => this._onError(err, 'EDNS', false, 'CONN'));\n                }\n                this.logger.debug(\n                    {\n                        tnx: 'dns',\n                        source: opts.host,\n                        resolved: resolved.host,\n                        cached: !!resolved.cached\n                    },\n                    'Resolved %s as %s [cache %s]',\n                    opts.host,\n                    resolved.host,\n                    resolved.cached ? 'hit' : 'miss'\n                );\n                Object.keys(resolved).forEach(key => {\n                    if (key.charAt(0) !== '_' && resolved[key]) {\n                        opts[key] = resolved[key];\n                    }\n                });\n                try {\n                    this._socket.connect(this.port, this.host, () => {\n                        this._socket.setKeepAlive(true);\n                        this._onConnect();\n                    });\n                    setupConnectionHandlers();\n                } catch (E) {\n                    return setImmediate(() => this._onError(E, 'ECONNECTION', false, 'CONN'));\n                }\n            });\n        } else if (this.secureConnection) {\n            // connect using tls\n            if (this.options.tls) {\n                Object.keys(this.options.tls).forEach(key => {\n                    opts[key] = this.options.tls[key];\n                });\n            }\n\n            // ensure servername for SNI\n            if (this.servername && !opts.servername) {\n                opts.servername = this.servername;\n            }\n\n            return shared.resolveHostname(opts, (err, resolved) => {\n                if (err) {\n                    return setImmediate(() => this._onError(err, 'EDNS', false, 'CONN'));\n                }\n                this.logger.debug(\n                    {\n                        tnx: 'dns',\n                        source: opts.host,\n                        resolved: resolved.host,\n                        cached: !!resolved.cached\n                    },\n                    'Resolved %s as %s [cache %s]',\n                    opts.host,\n                    resolved.host,\n                    resolved.cached ? 'hit' : 'miss'\n                );\n                Object.keys(resolved).forEach(key => {\n                    if (key.charAt(0) !== '_' && resolved[key]) {\n                        opts[key] = resolved[key];\n                    }\n                });\n                try {\n                    this._socket = tls.connect(opts, () => {\n                        this._socket.setKeepAlive(true);\n                        this._onConnect();\n                    });\n                    setupConnectionHandlers();\n                } catch (E) {\n                    return setImmediate(() => this._onError(E, 'ECONNECTION', false, 'CONN'));\n                }\n            });\n        } else {\n            // connect using plaintext\n            return shared.resolveHostname(opts, (err, resolved) => {\n                if (err) {\n                    return setImmediate(() => this._onError(err, 'EDNS', false, 'CONN'));\n                }\n                this.logger.debug(\n                    {\n                        tnx: 'dns',\n                        source: opts.host,\n                        resolved: resolved.host,\n                        cached: !!resolved.cached\n                    },\n                    'Resolved %s as %s [cache %s]',\n                    opts.host,\n                    resolved.host,\n                    resolved.cached ? 'hit' : 'miss'\n                );\n                Object.keys(resolved).forEach(key => {\n                    if (key.charAt(0) !== '_' && resolved[key]) {\n                        opts[key] = resolved[key];\n                    }\n                });\n                try {\n                    this._socket = net.connect(opts, () => {\n                        this._socket.setKeepAlive(true);\n                        this._onConnect();\n                    });\n                    setupConnectionHandlers();\n                } catch (E) {\n                    return setImmediate(() => this._onError(E, 'ECONNECTION', false, 'CONN'));\n                }\n            });\n        }\n    }\n\n    /**\n     * Sends QUIT\n     */\n    quit() {\n        this._sendCommand('QUIT');\n        this._responseActions.push(this.close);\n    }\n\n    /**\n     * Closes the connection to the server\n     */\n    close() {\n        clearTimeout(this._connectionTimeout);\n        clearTimeout(this._greetingTimeout);\n        this._responseActions = [];\n\n        // allow to run this function only once\n        if (this._closing) {\n            return;\n        }\n        this._closing = true;\n\n        let closeMethod = 'end';\n\n        if (this.stage === 'init') {\n            // Close the socket immediately when connection timed out\n            closeMethod = 'destroy';\n        }\n\n        this.logger.debug(\n            {\n                tnx: 'smtp'\n            },\n            'Closing connection to the server using \"%s\"',\n            closeMethod\n        );\n\n        let socket = (this._socket && this._socket.socket) || this._socket;\n\n        if (socket && !socket.destroyed) {\n            try {\n                socket[closeMethod]();\n            } catch (E) {\n                // just ignore\n            }\n        }\n\n        this._destroy();\n    }\n\n    /**\n     * Authenticate user\n     */\n    login(authData, callback) {\n        const isDestroyedMessage = this._isDestroyedMessage('login');\n        if (isDestroyedMessage) {\n            return callback(this._formatError(isDestroyedMessage, 'ECONNECTION', false, 'API'));\n        }\n\n        this._auth = authData || {};\n        // Select SASL authentication method\n        this._authMethod = (this._auth.method || '').toString().trim().toUpperCase() || false;\n\n        if (!this._authMethod && this._auth.oauth2 && !this._auth.credentials) {\n            this._authMethod = 'XOAUTH2';\n        } else if (!this._authMethod || (this._authMethod === 'XOAUTH2' && !this._auth.oauth2)) {\n            // use first supported\n            this._authMethod = (this._supportedAuth[0] || 'PLAIN').toUpperCase().trim();\n        }\n\n        if (this._authMethod !== 'XOAUTH2' && (!this._auth.credentials || !this._auth.credentials.user || !this._auth.credentials.pass)) {\n            if ((this._auth.user && this._auth.pass) || this.customAuth.has(this._authMethod)) {\n                this._auth.credentials = {\n                    user: this._auth.user,\n                    pass: this._auth.pass,\n                    options: this._auth.options\n                };\n            } else {\n                return callback(this._formatError('Missing credentials for \"' + this._authMethod + '\"', 'EAUTH', false, 'API'));\n            }\n        }\n\n        if (this.customAuth.has(this._authMethod)) {\n            let handler = this.customAuth.get(this._authMethod);\n            let lastResponse;\n            let returned = false;\n\n            let resolve = () => {\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                this.logger.info(\n                    {\n                        tnx: 'smtp',\n                        username: this._auth.user,\n                        action: 'authenticated',\n                        method: this._authMethod\n                    },\n                    'User %s authenticated',\n                    JSON.stringify(this._auth.user)\n                );\n                this.authenticated = true;\n                callback(null, true);\n            };\n\n            let reject = err => {\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                callback(this._formatError(err, 'EAUTH', lastResponse, 'AUTH ' + this._authMethod));\n            };\n\n            let handlerResponse = handler({\n                auth: this._auth,\n                method: this._authMethod,\n\n                extensions: [].concat(this._supportedExtensions),\n                authMethods: [].concat(this._supportedAuth),\n                maxAllowedSize: this._maxAllowedSize || false,\n\n                sendCommand: (cmd, done) => {\n                    let promise;\n\n                    if (!done) {\n                        promise = new Promise((resolve, reject) => {\n                            done = shared.callbackPromise(resolve, reject);\n                        });\n                    }\n\n                    this._responseActions.push(str => {\n                        lastResponse = str;\n\n                        let codes = str.match(/^(\\d+)(?:\\s(\\d+\\.\\d+\\.\\d+))?\\s/);\n                        let data = {\n                            command: cmd,\n                            response: str\n                        };\n                        if (codes) {\n                            data.status = Number(codes[1]) || 0;\n                            if (codes[2]) {\n                                data.code = codes[2];\n                            }\n                            data.text = str.substr(codes[0].length);\n                        } else {\n                            data.text = str;\n                            data.status = 0; // just in case we need to perform numeric comparisons\n                        }\n                        done(null, data);\n                    });\n                    setImmediate(() => this._sendCommand(cmd));\n\n                    return promise;\n                },\n\n                resolve,\n                reject\n            });\n\n            if (handlerResponse && typeof handlerResponse.catch === 'function') {\n                // a promise was returned\n                handlerResponse.then(resolve).catch(reject);\n            }\n\n            return;\n        }\n\n        switch (this._authMethod) {\n            case 'XOAUTH2':\n                this._handleXOauth2Token(false, callback);\n                return;\n            case 'LOGIN':\n                this._responseActions.push(str => {\n                    this._actionAUTH_LOGIN_USER(str, callback);\n                });\n                this._sendCommand('AUTH LOGIN');\n                return;\n            case 'PLAIN':\n                this._responseActions.push(str => {\n                    this._actionAUTHComplete(str, callback);\n                });\n                this._sendCommand(\n                    'AUTH PLAIN ' +\n                        Buffer.from(\n                            //this._auth.user+'\\u0000'+\n                            '\\u0000' + // skip authorization identity as it causes problems with some servers\n                                this._auth.credentials.user +\n                                '\\u0000' +\n                                this._auth.credentials.pass,\n                            'utf-8'\n                        ).toString('base64'),\n                    // log entry without passwords\n                    'AUTH PLAIN ' +\n                        Buffer.from(\n                            //this._auth.user+'\\u0000'+\n                            '\\u0000' + // skip authorization identity as it causes problems with some servers\n                                this._auth.credentials.user +\n                                '\\u0000' +\n                                '/* secret */',\n                            'utf-8'\n                        ).toString('base64')\n                );\n                return;\n            case 'CRAM-MD5':\n                this._responseActions.push(str => {\n                    this._actionAUTH_CRAM_MD5(str, callback);\n                });\n                this._sendCommand('AUTH CRAM-MD5');\n                return;\n        }\n\n        return callback(this._formatError('Unknown authentication method \"' + this._authMethod + '\"', 'EAUTH', false, 'API'));\n    }\n\n    /**\n     * Sends a message\n     *\n     * @param {Object} envelope Envelope object, {from: addr, to: [addr]}\n     * @param {Object} message String, Buffer or a Stream\n     * @param {Function} callback Callback to return once sending is completed\n     */\n    send(envelope, message, done) {\n        if (!message) {\n            return done(this._formatError('Empty message', 'EMESSAGE', false, 'API'));\n        }\n\n        const isDestroyedMessage = this._isDestroyedMessage('send message');\n        if (isDestroyedMessage) {\n            return done(this._formatError(isDestroyedMessage, 'ECONNECTION', false, 'API'));\n        }\n\n        // reject larger messages than allowed\n        if (this._maxAllowedSize && envelope.size > this._maxAllowedSize) {\n            return setImmediate(() => {\n                done(this._formatError('Message size larger than allowed ' + this._maxAllowedSize, 'EMESSAGE', false, 'MAIL FROM'));\n            });\n        }\n\n        // ensure that callback is only called once\n        let returned = false;\n        let callback = function () {\n            if (returned) {\n                return;\n            }\n            returned = true;\n\n            done(...arguments);\n        };\n\n        if (typeof message.on === 'function') {\n            message.on('error', err => callback(this._formatError(err, 'ESTREAM', false, 'API')));\n        }\n\n        let startTime = Date.now();\n        this._setEnvelope(envelope, (err, info) => {\n            if (err) {\n                // create passthrough stream to consume to prevent OOM\n                let stream = new PassThrough();\n                if (typeof message.pipe === 'function') {\n                    message.pipe(stream);\n                } else {\n                    stream.write(message);\n                    stream.end();\n                }\n\n                return callback(err);\n            }\n            let envelopeTime = Date.now();\n            let stream = this._createSendStream((err, str) => {\n                if (err) {\n                    return callback(err);\n                }\n\n                info.envelopeTime = envelopeTime - startTime;\n                info.messageTime = Date.now() - envelopeTime;\n                info.messageSize = stream.outByteCount;\n                info.response = str;\n\n                return callback(null, info);\n            });\n            if (typeof message.pipe === 'function') {\n                message.pipe(stream);\n            } else {\n                stream.write(message);\n                stream.end();\n            }\n        });\n    }\n\n    /**\n     * Resets connection state\n     *\n     * @param {Function} callback Callback to return once connection is reset\n     */\n    reset(callback) {\n        this._sendCommand('RSET');\n        this._responseActions.push(str => {\n            if (str.charAt(0) !== '2') {\n                return callback(this._formatError('Could not reset session state. response=' + str, 'EPROTOCOL', str, 'RSET'));\n            }\n            this._envelope = false;\n            return callback(null, true);\n        });\n    }\n\n    /**\n     * Connection listener that is run when the connection to\n     * the server is opened\n     *\n     * @event\n     */\n    _onConnect() {\n        clearTimeout(this._connectionTimeout);\n\n        this.logger.info(\n            {\n                tnx: 'network',\n                localAddress: this._socket.localAddress,\n                localPort: this._socket.localPort,\n                remoteAddress: this._socket.remoteAddress,\n                remotePort: this._socket.remotePort\n            },\n            '%s established to %s:%s',\n            this.secure ? 'Secure connection' : 'Connection',\n            this._socket.remoteAddress,\n            this._socket.remotePort\n        );\n\n        if (this._destroyed) {\n            // Connection was established after we already had canceled it\n            this.close();\n            return;\n        }\n\n        this.stage = 'connected';\n\n        // clear existing listeners for the socket\n        this._socket.removeListener('data', this._onSocketData);\n        this._socket.removeListener('timeout', this._onSocketTimeout);\n        this._socket.removeListener('close', this._onSocketClose);\n        this._socket.removeListener('end', this._onSocketEnd);\n\n        this._socket.on('data', this._onSocketData);\n        this._socket.once('close', this._onSocketClose);\n        this._socket.once('end', this._onSocketEnd);\n\n        this._socket.setTimeout(this.options.socketTimeout || SOCKET_TIMEOUT);\n        this._socket.on('timeout', this._onSocketTimeout);\n\n        this._greetingTimeout = setTimeout(() => {\n            // if still waiting for greeting, give up\n            if (this._socket && !this._destroyed && this._responseActions[0] === this._actionGreeting) {\n                this._onError('Greeting never received', 'ETIMEDOUT', false, 'CONN');\n            }\n        }, this.options.greetingTimeout || GREETING_TIMEOUT);\n\n        this._responseActions.push(this._actionGreeting);\n\n        // we have a 'data' listener set up so resume socket if it was paused\n        this._socket.resume();\n    }\n\n    /**\n     * 'data' listener for data coming from the server\n     *\n     * @event\n     * @param {Buffer} chunk Data chunk coming from the server\n     */\n    _onData(chunk) {\n        if (this._destroyed || !chunk || !chunk.length) {\n            return;\n        }\n\n        let data = (chunk || '').toString('binary');\n        let lines = (this._remainder + data).split(/\\r?\\n/);\n        let lastline;\n\n        this._remainder = lines.pop();\n\n        for (let i = 0, len = lines.length; i < len; i++) {\n            if (this._responseQueue.length) {\n                lastline = this._responseQueue[this._responseQueue.length - 1];\n                if (/^\\d+-/.test(lastline.split('\\n').pop())) {\n                    this._responseQueue[this._responseQueue.length - 1] += '\\n' + lines[i];\n                    continue;\n                }\n            }\n            this._responseQueue.push(lines[i]);\n        }\n\n        if (this._responseQueue.length) {\n            lastline = this._responseQueue[this._responseQueue.length - 1];\n            if (/^\\d+-/.test(lastline.split('\\n').pop())) {\n                return;\n            }\n        }\n\n        this._processResponse();\n    }\n\n    /**\n     * 'error' listener for the socket\n     *\n     * @event\n     * @param {Error} err Error object\n     * @param {String} type Error name\n     */\n    _onError(err, type, data, command) {\n        clearTimeout(this._connectionTimeout);\n        clearTimeout(this._greetingTimeout);\n\n        if (this._destroyed) {\n            // just ignore, already closed\n            // this might happen when a socket is canceled because of reached timeout\n            // but the socket timeout error itself receives only after\n            return;\n        }\n\n        err = this._formatError(err, type, data, command);\n\n        this.logger.error(data, err.message);\n\n        this.emit('error', err);\n        this.close();\n    }\n\n    _formatError(message, type, response, command) {\n        let err;\n\n        if (/Error\\]$/i.test(Object.prototype.toString.call(message))) {\n            err = message;\n        } else {\n            err = new Error(message);\n        }\n\n        if (type && type !== 'Error') {\n            err.code = type;\n        }\n\n        if (response) {\n            err.response = response;\n            err.message += ': ' + response;\n        }\n\n        let responseCode = (typeof response === 'string' && Number((response.match(/^\\d+/) || [])[0])) || false;\n        if (responseCode) {\n            err.responseCode = responseCode;\n        }\n\n        if (command) {\n            err.command = command;\n        }\n\n        return err;\n    }\n\n    /**\n     * 'close' listener for the socket\n     *\n     * @event\n     */\n    _onClose() {\n        let serverResponse = false;\n\n        if (this._remainder && this._remainder.trim()) {\n            if (this.options.debug || this.options.transactionLog) {\n                this.logger.debug(\n                    {\n                        tnx: 'server'\n                    },\n                    this._remainder.replace(/\\r?\\n$/, '')\n                );\n            }\n            this.lastServerResponse = serverResponse = this._remainder.trim();\n        }\n\n        this.logger.info(\n            {\n                tnx: 'network'\n            },\n            'Connection closed'\n        );\n\n        if (this.upgrading && !this._destroyed) {\n            return this._onError(new Error('Connection closed unexpectedly'), 'ETLS', serverResponse, 'CONN');\n        } else if (![this._actionGreeting, this.close].includes(this._responseActions[0]) && !this._destroyed) {\n            return this._onError(new Error('Connection closed unexpectedly'), 'ECONNECTION', serverResponse, 'CONN');\n        } else if (/^[45]\\d{2}\\b/.test(serverResponse)) {\n            return this._onError(new Error('Connection closed unexpectedly'), 'ECONNECTION', serverResponse, 'CONN');\n        }\n\n        this._destroy();\n    }\n\n    /**\n     * 'end' listener for the socket\n     *\n     * @event\n     */\n    _onEnd() {\n        if (this._socket && !this._socket.destroyed) {\n            this._socket.destroy();\n        }\n    }\n\n    /**\n     * 'timeout' listener for the socket\n     *\n     * @event\n     */\n    _onTimeout() {\n        return this._onError(new Error('Timeout'), 'ETIMEDOUT', false, 'CONN');\n    }\n\n    /**\n     * Destroys the client, emits 'end'\n     */\n    _destroy() {\n        if (this._destroyed) {\n            return;\n        }\n        this._destroyed = true;\n        this.emit('end');\n    }\n\n    /**\n     * Upgrades the connection to TLS\n     *\n     * @param {Function} callback Callback function to run when the connection\n     *        has been secured\n     */\n    _upgradeConnection(callback) {\n        // do not remove all listeners or it breaks node v0.10 as there's\n        // apparently a 'finish' event set that would be cleared as well\n\n        // we can safely keep 'error', 'end', 'close' etc. events\n        this._socket.removeListener('data', this._onSocketData); // incoming data is going to be gibberish from this point onwards\n        this._socket.removeListener('timeout', this._onSocketTimeout); // timeout will be re-set for the new socket object\n\n        let socketPlain = this._socket;\n        let opts = {\n            socket: this._socket,\n            host: this.host\n        };\n\n        Object.keys(this.options.tls || {}).forEach(key => {\n            opts[key] = this.options.tls[key];\n        });\n\n        // ensure servername for SNI\n        if (this.servername && !opts.servername) {\n            opts.servername = this.servername;\n        }\n\n        this.upgrading = true;\n        // tls.connect is not an asynchronous function however it may still throw errors and requires to be wrapped with try/catch\n        try {\n            this._socket = tls.connect(opts, () => {\n                this.secure = true;\n                this.upgrading = false;\n                this._socket.on('data', this._onSocketData);\n\n                socketPlain.removeListener('close', this._onSocketClose);\n                socketPlain.removeListener('end', this._onSocketEnd);\n\n                return callback(null, true);\n            });\n        } catch (err) {\n            return callback(err);\n        }\n\n        this._socket.on('error', this._onSocketError);\n        this._socket.once('close', this._onSocketClose);\n        this._socket.once('end', this._onSocketEnd);\n\n        this._socket.setTimeout(this.options.socketTimeout || SOCKET_TIMEOUT); // 10 min.\n        this._socket.on('timeout', this._onSocketTimeout);\n\n        // resume in case the socket was paused\n        socketPlain.resume();\n    }\n\n    /**\n     * Processes queued responses from the server\n     *\n     * @param {Boolean} force If true, ignores _processing flag\n     */\n    _processResponse() {\n        if (!this._responseQueue.length) {\n            return false;\n        }\n\n        let str = (this.lastServerResponse = (this._responseQueue.shift() || '').toString());\n\n        if (/^\\d+-/.test(str.split('\\n').pop())) {\n            // keep waiting for the final part of multiline response\n            return;\n        }\n\n        if (this.options.debug || this.options.transactionLog) {\n            this.logger.debug(\n                {\n                    tnx: 'server'\n                },\n                str.replace(/\\r?\\n$/, '')\n            );\n        }\n\n        if (!str.trim()) {\n            // skip unexpected empty lines\n            setImmediate(() => this._processResponse());\n        }\n\n        let action = this._responseActions.shift();\n\n        if (typeof action === 'function') {\n            action.call(this, str);\n            setImmediate(() => this._processResponse());\n        } else {\n            return this._onError(new Error('Unexpected Response'), 'EPROTOCOL', str, 'CONN');\n        }\n    }\n\n    /**\n     * Send a command to the server, append \\r\\n\n     *\n     * @param {String} str String to be sent to the server\n     * @param {String} logStr Optional string to be used for logging instead of the actual string\n     */\n    _sendCommand(str, logStr) {\n        if (this._destroyed) {\n            // Connection already closed, can't send any more data\n            return;\n        }\n\n        if (this._socket.destroyed) {\n            return this.close();\n        }\n\n        if (this.options.debug || this.options.transactionLog) {\n            this.logger.debug(\n                {\n                    tnx: 'client'\n                },\n                (logStr || str || '').toString().replace(/\\r?\\n$/, '')\n            );\n        }\n\n        this._socket.write(Buffer.from(str + '\\r\\n', 'utf-8'));\n    }\n\n    /**\n     * Initiates a new message by submitting envelope data, starting with\n     * MAIL FROM: command\n     *\n     * @param {Object} envelope Envelope object in the form of\n     *        {from:'...', to:['...']}\n     *        or\n     *        {from:{address:'...',name:'...'}, to:[address:'...',name:'...']}\n     */\n    _setEnvelope(envelope, callback) {\n        let args = [];\n        let useSmtpUtf8 = false;\n\n        this._envelope = envelope || {};\n        this._envelope.from = ((this._envelope.from && this._envelope.from.address) || this._envelope.from || '').toString().trim();\n\n        this._envelope.to = [].concat(this._envelope.to || []).map(to => ((to && to.address) || to || '').toString().trim());\n\n        if (!this._envelope.to.length) {\n            return callback(this._formatError('No recipients defined', 'EENVELOPE', false, 'API'));\n        }\n\n        if (this._envelope.from && /[\\r\\n<>]/.test(this._envelope.from)) {\n            return callback(this._formatError('Invalid sender ' + JSON.stringify(this._envelope.from), 'EENVELOPE', false, 'API'));\n        }\n\n        // check if the sender address uses only ASCII characters,\n        // otherwise require usage of SMTPUTF8 extension\n        if (/[\\x80-\\uFFFF]/.test(this._envelope.from)) {\n            useSmtpUtf8 = true;\n        }\n\n        for (let i = 0, len = this._envelope.to.length; i < len; i++) {\n            if (!this._envelope.to[i] || /[\\r\\n<>]/.test(this._envelope.to[i])) {\n                return callback(this._formatError('Invalid recipient ' + JSON.stringify(this._envelope.to[i]), 'EENVELOPE', false, 'API'));\n            }\n\n            // check if the recipients addresses use only ASCII characters,\n            // otherwise require usage of SMTPUTF8 extension\n            if (/[\\x80-\\uFFFF]/.test(this._envelope.to[i])) {\n                useSmtpUtf8 = true;\n            }\n        }\n\n        // clone the recipients array for latter manipulation\n        this._envelope.rcptQueue = JSON.parse(JSON.stringify(this._envelope.to || []));\n        this._envelope.rejected = [];\n        this._envelope.rejectedErrors = [];\n        this._envelope.accepted = [];\n\n        if (this._envelope.dsn) {\n            try {\n                this._envelope.dsn = this._setDsnEnvelope(this._envelope.dsn);\n            } catch (err) {\n                return callback(this._formatError('Invalid DSN ' + err.message, 'EENVELOPE', false, 'API'));\n            }\n        }\n\n        this._responseActions.push(str => {\n            this._actionMAIL(str, callback);\n        });\n\n        // If the server supports SMTPUTF8 and the envelope includes an internationalized\n        // email address then append SMTPUTF8 keyword to the MAIL FROM command\n        if (useSmtpUtf8 && this._supportedExtensions.includes('SMTPUTF8')) {\n            args.push('SMTPUTF8');\n            this._usingSmtpUtf8 = true;\n        }\n\n        // If the server supports 8BITMIME and the message might contain non-ascii bytes\n        // then append the 8BITMIME keyword to the MAIL FROM command\n        if (this._envelope.use8BitMime && this._supportedExtensions.includes('8BITMIME')) {\n            args.push('BODY=8BITMIME');\n            this._using8BitMime = true;\n        }\n\n        if (this._envelope.size && this._supportedExtensions.includes('SIZE')) {\n            args.push('SIZE=' + this._envelope.size);\n        }\n\n        // If the server supports DSN and the envelope includes an DSN prop\n        // then append DSN params to the MAIL FROM command\n        if (this._envelope.dsn && this._supportedExtensions.includes('DSN')) {\n            if (this._envelope.dsn.ret) {\n                args.push('RET=' + shared.encodeXText(this._envelope.dsn.ret));\n            }\n            if (this._envelope.dsn.envid) {\n                args.push('ENVID=' + shared.encodeXText(this._envelope.dsn.envid));\n            }\n        }\n\n        this._sendCommand('MAIL FROM:<' + this._envelope.from + '>' + (args.length ? ' ' + args.join(' ') : ''));\n    }\n\n    _setDsnEnvelope(params) {\n        let ret = (params.ret || params.return || '').toString().toUpperCase() || null;\n        if (ret) {\n            switch (ret) {\n                case 'HDRS':\n                case 'HEADERS':\n                    ret = 'HDRS';\n                    break;\n                case 'FULL':\n                case 'BODY':\n                    ret = 'FULL';\n                    break;\n            }\n        }\n\n        if (ret && !['FULL', 'HDRS'].includes(ret)) {\n            throw new Error('ret: ' + JSON.stringify(ret));\n        }\n\n        let envid = (params.envid || params.id || '').toString() || null;\n\n        let notify = params.notify || null;\n        if (notify) {\n            if (typeof notify === 'string') {\n                notify = notify.split(',');\n            }\n            notify = notify.map(n => n.trim().toUpperCase());\n            let validNotify = ['NEVER', 'SUCCESS', 'FAILURE', 'DELAY'];\n            let invaliNotify = notify.filter(n => !validNotify.includes(n));\n            if (invaliNotify.length || (notify.length > 1 && notify.includes('NEVER'))) {\n                throw new Error('notify: ' + JSON.stringify(notify.join(',')));\n            }\n            notify = notify.join(',');\n        }\n\n        let orcpt = (params.recipient || params.orcpt || '').toString() || null;\n        if (orcpt && orcpt.indexOf(';') < 0) {\n            orcpt = 'rfc822;' + orcpt;\n        }\n\n        return {\n            ret,\n            envid,\n            notify,\n            orcpt\n        };\n    }\n\n    _getDsnRcptToArgs() {\n        let args = [];\n        // If the server supports DSN and the envelope includes an DSN prop\n        // then append DSN params to the RCPT TO command\n        if (this._envelope.dsn && this._supportedExtensions.includes('DSN')) {\n            if (this._envelope.dsn.notify) {\n                args.push('NOTIFY=' + shared.encodeXText(this._envelope.dsn.notify));\n            }\n            if (this._envelope.dsn.orcpt) {\n                args.push('ORCPT=' + shared.encodeXText(this._envelope.dsn.orcpt));\n            }\n        }\n        return args.length ? ' ' + args.join(' ') : '';\n    }\n\n    _createSendStream(callback) {\n        let dataStream = new DataStream();\n        let logStream;\n\n        if (this.options.lmtp) {\n            this._envelope.accepted.forEach((recipient, i) => {\n                let final = i === this._envelope.accepted.length - 1;\n                this._responseActions.push(str => {\n                    this._actionLMTPStream(recipient, final, str, callback);\n                });\n            });\n        } else {\n            this._responseActions.push(str => {\n                this._actionSMTPStream(str, callback);\n            });\n        }\n\n        dataStream.pipe(this._socket, {\n            end: false\n        });\n\n        if (this.options.debug) {\n            logStream = new PassThrough();\n            logStream.on('readable', () => {\n                let chunk;\n                while ((chunk = logStream.read())) {\n                    this.logger.debug(\n                        {\n                            tnx: 'message'\n                        },\n                        chunk.toString('binary').replace(/\\r?\\n$/, '')\n                    );\n                }\n            });\n            dataStream.pipe(logStream);\n        }\n\n        dataStream.once('end', () => {\n            this.logger.info(\n                {\n                    tnx: 'message',\n                    inByteCount: dataStream.inByteCount,\n                    outByteCount: dataStream.outByteCount\n                },\n                '<%s bytes encoded mime message (source size %s bytes)>',\n                dataStream.outByteCount,\n                dataStream.inByteCount\n            );\n        });\n\n        return dataStream;\n    }\n\n    /** ACTIONS **/\n\n    /**\n     * Will be run after the connection is created and the server sends\n     * a greeting. If the incoming message starts with 220 initiate\n     * SMTP session by sending EHLO command\n     *\n     * @param {String} str Message from the server\n     */\n    _actionGreeting(str) {\n        clearTimeout(this._greetingTimeout);\n\n        if (str.substr(0, 3) !== '220') {\n            this._onError(new Error('Invalid greeting. response=' + str), 'EPROTOCOL', str, 'CONN');\n            return;\n        }\n\n        if (this.options.lmtp) {\n            this._responseActions.push(this._actionLHLO);\n            this._sendCommand('LHLO ' + this.name);\n        } else {\n            this._responseActions.push(this._actionEHLO);\n            this._sendCommand('EHLO ' + this.name);\n        }\n    }\n\n    /**\n     * Handles server response for LHLO command. If it yielded in\n     * error, emit 'error', otherwise treat this as an EHLO response\n     *\n     * @param {String} str Message from the server\n     */\n    _actionLHLO(str) {\n        if (str.charAt(0) !== '2') {\n            this._onError(new Error('Invalid LHLO. response=' + str), 'EPROTOCOL', str, 'LHLO');\n            return;\n        }\n\n        this._actionEHLO(str);\n    }\n\n    /**\n     * Handles server response for EHLO command. If it yielded in\n     * error, try HELO instead, otherwise initiate TLS negotiation\n     * if STARTTLS is supported by the server or move into the\n     * authentication phase.\n     *\n     * @param {String} str Message from the server\n     */\n    _actionEHLO(str) {\n        let match;\n\n        if (str.substr(0, 3) === '421') {\n            this._onError(new Error('Server terminates connection. response=' + str), 'ECONNECTION', str, 'EHLO');\n            return;\n        }\n\n        if (str.charAt(0) !== '2') {\n            if (this.options.requireTLS) {\n                this._onError(new Error('EHLO failed but HELO does not support required STARTTLS. response=' + str), 'ECONNECTION', str, 'EHLO');\n                return;\n            }\n\n            // Try HELO instead\n            this._responseActions.push(this._actionHELO);\n            this._sendCommand('HELO ' + this.name);\n            return;\n        }\n\n        this._ehloLines = str\n            .split(/\\r?\\n/)\n            .map(line => line.replace(/^\\d+[ -]/, '').trim())\n            .filter(line => line)\n            .slice(1);\n\n        // Detect if the server supports STARTTLS\n        if (!this.secure && !this.options.ignoreTLS && (/[ -]STARTTLS\\b/im.test(str) || this.options.requireTLS)) {\n            this._sendCommand('STARTTLS');\n            this._responseActions.push(this._actionSTARTTLS);\n            return;\n        }\n\n        // Detect if the server supports SMTPUTF8\n        if (/[ -]SMTPUTF8\\b/im.test(str)) {\n            this._supportedExtensions.push('SMTPUTF8');\n        }\n\n        // Detect if the server supports DSN\n        if (/[ -]DSN\\b/im.test(str)) {\n            this._supportedExtensions.push('DSN');\n        }\n\n        // Detect if the server supports 8BITMIME\n        if (/[ -]8BITMIME\\b/im.test(str)) {\n            this._supportedExtensions.push('8BITMIME');\n        }\n\n        // Detect if the server supports PIPELINING\n        if (/[ -]PIPELINING\\b/im.test(str)) {\n            this._supportedExtensions.push('PIPELINING');\n        }\n\n        // Detect if the server supports AUTH\n        if (/[ -]AUTH\\b/i.test(str)) {\n            this.allowsAuth = true;\n        }\n\n        // Detect if the server supports PLAIN auth\n        if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)PLAIN/i.test(str)) {\n            this._supportedAuth.push('PLAIN');\n        }\n\n        // Detect if the server supports LOGIN auth\n        if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)LOGIN/i.test(str)) {\n            this._supportedAuth.push('LOGIN');\n        }\n\n        // Detect if the server supports CRAM-MD5 auth\n        if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)CRAM-MD5/i.test(str)) {\n            this._supportedAuth.push('CRAM-MD5');\n        }\n\n        // Detect if the server supports XOAUTH2 auth\n        if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)XOAUTH2/i.test(str)) {\n            this._supportedAuth.push('XOAUTH2');\n        }\n\n        // Detect if the server supports SIZE extensions (and the max allowed size)\n        if ((match = str.match(/[ -]SIZE(?:[ \\t]+(\\d+))?/im))) {\n            this._supportedExtensions.push('SIZE');\n            this._maxAllowedSize = Number(match[1]) || 0;\n        }\n\n        this.emit('connect');\n    }\n\n    /**\n     * Handles server response for HELO command. If it yielded in\n     * error, emit 'error', otherwise move into the authentication phase.\n     *\n     * @param {String} str Message from the server\n     */\n    _actionHELO(str) {\n        if (str.charAt(0) !== '2') {\n            this._onError(new Error('Invalid HELO. response=' + str), 'EPROTOCOL', str, 'HELO');\n            return;\n        }\n\n        // assume that authentication is enabled (most probably is not though)\n        this.allowsAuth = true;\n\n        this.emit('connect');\n    }\n\n    /**\n     * Handles server response for STARTTLS command. If there's an error\n     * try HELO instead, otherwise initiate TLS upgrade. If the upgrade\n     * succeedes restart the EHLO\n     *\n     * @param {String} str Message from the server\n     */\n    _actionSTARTTLS(str) {\n        if (str.charAt(0) !== '2') {\n            if (this.options.opportunisticTLS) {\n                this.logger.info(\n                    {\n                        tnx: 'smtp'\n                    },\n                    'Failed STARTTLS upgrade, continuing unencrypted'\n                );\n                return this.emit('connect');\n            }\n            this._onError(new Error('Error upgrading connection with STARTTLS'), 'ETLS', str, 'STARTTLS');\n            return;\n        }\n\n        this._upgradeConnection((err, secured) => {\n            if (err) {\n                this._onError(new Error('Error initiating TLS - ' + (err.message || err)), 'ETLS', false, 'STARTTLS');\n                return;\n            }\n\n            this.logger.info(\n                {\n                    tnx: 'smtp'\n                },\n                'Connection upgraded with STARTTLS'\n            );\n\n            if (secured) {\n                // restart session\n                if (this.options.lmtp) {\n                    this._responseActions.push(this._actionLHLO);\n                    this._sendCommand('LHLO ' + this.name);\n                } else {\n                    this._responseActions.push(this._actionEHLO);\n                    this._sendCommand('EHLO ' + this.name);\n                }\n            } else {\n                this.emit('connect');\n            }\n        });\n    }\n\n    /**\n     * Handle the response for AUTH LOGIN command. We are expecting\n     * '334 VXNlcm5hbWU6' (base64 for 'Username:'). Data to be sent as\n     * response needs to be base64 encoded username. We do not need\n     * exact match but settle with 334 response in general as some\n     * hosts invalidly use a longer message than VXNlcm5hbWU6\n     *\n     * @param {String} str Message from the server\n     */\n    _actionAUTH_LOGIN_USER(str, callback) {\n        if (!/^334[ -]/.test(str)) {\n            // expecting '334 VXNlcm5hbWU6'\n            callback(this._formatError('Invalid login sequence while waiting for \"334 VXNlcm5hbWU6\"', 'EAUTH', str, 'AUTH LOGIN'));\n            return;\n        }\n\n        this._responseActions.push(str => {\n            this._actionAUTH_LOGIN_PASS(str, callback);\n        });\n\n        this._sendCommand(Buffer.from(this._auth.credentials.user + '', 'utf-8').toString('base64'));\n    }\n\n    /**\n     * Handle the response for AUTH CRAM-MD5 command. We are expecting\n     * '334 <challenge string>'. Data to be sent as response needs to be\n     * base64 decoded challenge string, MD5 hashed using the password as\n     * a HMAC key, prefixed by the username and a space, and finally all\n     * base64 encoded again.\n     *\n     * @param {String} str Message from the server\n     */\n    _actionAUTH_CRAM_MD5(str, callback) {\n        let challengeMatch = str.match(/^334\\s+(.+)$/);\n        let challengeString = '';\n\n        if (!challengeMatch) {\n            return callback(this._formatError('Invalid login sequence while waiting for server challenge string', 'EAUTH', str, 'AUTH CRAM-MD5'));\n        } else {\n            challengeString = challengeMatch[1];\n        }\n\n        // Decode from base64\n        let base64decoded = Buffer.from(challengeString, 'base64').toString('ascii'),\n            hmacMD5 = crypto.createHmac('md5', this._auth.credentials.pass);\n\n        hmacMD5.update(base64decoded);\n\n        let prepended = this._auth.credentials.user + ' ' + hmacMD5.digest('hex');\n\n        this._responseActions.push(str => {\n            this._actionAUTH_CRAM_MD5_PASS(str, callback);\n        });\n\n        this._sendCommand(\n            Buffer.from(prepended).toString('base64'),\n            // hidden hash for logs\n            Buffer.from(this._auth.credentials.user + ' /* secret */').toString('base64')\n        );\n    }\n\n    /**\n     * Handles the response to CRAM-MD5 authentication, if there's no error,\n     * the user can be considered logged in. Start waiting for a message to send\n     *\n     * @param {String} str Message from the server\n     */\n    _actionAUTH_CRAM_MD5_PASS(str, callback) {\n        if (!str.match(/^235\\s+/)) {\n            return callback(this._formatError('Invalid login sequence while waiting for \"235\"', 'EAUTH', str, 'AUTH CRAM-MD5'));\n        }\n\n        this.logger.info(\n            {\n                tnx: 'smtp',\n                username: this._auth.user,\n                action: 'authenticated',\n                method: this._authMethod\n            },\n            'User %s authenticated',\n            JSON.stringify(this._auth.user)\n        );\n        this.authenticated = true;\n        callback(null, true);\n    }\n\n    /**\n     * Handle the response for AUTH LOGIN command. We are expecting\n     * '334 UGFzc3dvcmQ6' (base64 for 'Password:'). Data to be sent as\n     * response needs to be base64 encoded password.\n     *\n     * @param {String} str Message from the server\n     */\n    _actionAUTH_LOGIN_PASS(str, callback) {\n        if (!/^334[ -]/.test(str)) {\n            // expecting '334 UGFzc3dvcmQ6'\n            return callback(this._formatError('Invalid login sequence while waiting for \"334 UGFzc3dvcmQ6\"', 'EAUTH', str, 'AUTH LOGIN'));\n        }\n\n        this._responseActions.push(str => {\n            this._actionAUTHComplete(str, callback);\n        });\n\n        this._sendCommand(\n            Buffer.from((this._auth.credentials.pass || '').toString(), 'utf-8').toString('base64'),\n            // Hidden pass for logs\n            Buffer.from('/* secret */', 'utf-8').toString('base64')\n        );\n    }\n\n    /**\n     * Handles the response for authentication, if there's no error,\n     * the user can be considered logged in. Start waiting for a message to send\n     *\n     * @param {String} str Message from the server\n     */\n    _actionAUTHComplete(str, isRetry, callback) {\n        if (!callback && typeof isRetry === 'function') {\n            callback = isRetry;\n            isRetry = false;\n        }\n\n        if (str.substr(0, 3) === '334') {\n            this._responseActions.push(str => {\n                if (isRetry || this._authMethod !== 'XOAUTH2') {\n                    this._actionAUTHComplete(str, true, callback);\n                } else {\n                    // fetch a new OAuth2 access token\n                    setImmediate(() => this._handleXOauth2Token(true, callback));\n                }\n            });\n            this._sendCommand('');\n            return;\n        }\n\n        if (str.charAt(0) !== '2') {\n            this.logger.info(\n                {\n                    tnx: 'smtp',\n                    username: this._auth.user,\n                    action: 'authfail',\n                    method: this._authMethod\n                },\n                'User %s failed to authenticate',\n                JSON.stringify(this._auth.user)\n            );\n            return callback(this._formatError('Invalid login', 'EAUTH', str, 'AUTH ' + this._authMethod));\n        }\n\n        this.logger.info(\n            {\n                tnx: 'smtp',\n                username: this._auth.user,\n                action: 'authenticated',\n                method: this._authMethod\n            },\n            'User %s authenticated',\n            JSON.stringify(this._auth.user)\n        );\n        this.authenticated = true;\n        callback(null, true);\n    }\n\n    /**\n     * Handle response for a MAIL FROM: command\n     *\n     * @param {String} str Message from the server\n     */\n    _actionMAIL(str, callback) {\n        let message, curRecipient;\n        if (Number(str.charAt(0)) !== 2) {\n            if (this._usingSmtpUtf8 && /^550 /.test(str) && /[\\x80-\\uFFFF]/.test(this._envelope.from)) {\n                message = 'Internationalized mailbox name not allowed';\n            } else {\n                message = 'Mail command failed';\n            }\n            return callback(this._formatError(message, 'EENVELOPE', str, 'MAIL FROM'));\n        }\n\n        if (!this._envelope.rcptQueue.length) {\n            return callback(this._formatError('Can\\x27t send mail - no recipients defined', 'EENVELOPE', false, 'API'));\n        } else {\n            this._recipientQueue = [];\n\n            if (this._supportedExtensions.includes('PIPELINING')) {\n                while (this._envelope.rcptQueue.length) {\n                    curRecipient = this._envelope.rcptQueue.shift();\n                    this._recipientQueue.push(curRecipient);\n                    this._responseActions.push(str => {\n                        this._actionRCPT(str, callback);\n                    });\n                    this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());\n                }\n            } else {\n                curRecipient = this._envelope.rcptQueue.shift();\n                this._recipientQueue.push(curRecipient);\n                this._responseActions.push(str => {\n                    this._actionRCPT(str, callback);\n                });\n                this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());\n            }\n        }\n    }\n\n    /**\n     * Handle response for a RCPT TO: command\n     *\n     * @param {String} str Message from the server\n     */\n    _actionRCPT(str, callback) {\n        let message,\n            err,\n            curRecipient = this._recipientQueue.shift();\n        if (Number(str.charAt(0)) !== 2) {\n            // this is a soft error\n            if (this._usingSmtpUtf8 && /^553 /.test(str) && /[\\x80-\\uFFFF]/.test(curRecipient)) {\n                message = 'Internationalized mailbox name not allowed';\n            } else {\n                message = 'Recipient command failed';\n            }\n            this._envelope.rejected.push(curRecipient);\n            // store error for the failed recipient\n            err = this._formatError(message, 'EENVELOPE', str, 'RCPT TO');\n            err.recipient = curRecipient;\n            this._envelope.rejectedErrors.push(err);\n        } else {\n            this._envelope.accepted.push(curRecipient);\n        }\n\n        if (!this._envelope.rcptQueue.length && !this._recipientQueue.length) {\n            if (this._envelope.rejected.length < this._envelope.to.length) {\n                this._responseActions.push(str => {\n                    this._actionDATA(str, callback);\n                });\n                this._sendCommand('DATA');\n            } else {\n                err = this._formatError('Can\\x27t send mail - all recipients were rejected', 'EENVELOPE', str, 'RCPT TO');\n                err.rejected = this._envelope.rejected;\n                err.rejectedErrors = this._envelope.rejectedErrors;\n                return callback(err);\n            }\n        } else if (this._envelope.rcptQueue.length) {\n            curRecipient = this._envelope.rcptQueue.shift();\n            this._recipientQueue.push(curRecipient);\n            this._responseActions.push(str => {\n                this._actionRCPT(str, callback);\n            });\n            this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());\n        }\n    }\n\n    /**\n     * Handle response for a DATA command\n     *\n     * @param {String} str Message from the server\n     */\n    _actionDATA(str, callback) {\n        // response should be 354 but according to this issue https://github.com/eleith/emailjs/issues/24\n        // some servers might use 250 instead, so lets check for 2 or 3 as the first digit\n        if (!/^[23]/.test(str)) {\n            return callback(this._formatError('Data command failed', 'EENVELOPE', str, 'DATA'));\n        }\n\n        let response = {\n            accepted: this._envelope.accepted,\n            rejected: this._envelope.rejected\n        };\n\n        if (this._ehloLines && this._ehloLines.length) {\n            response.ehlo = this._ehloLines;\n        }\n\n        if (this._envelope.rejectedErrors.length) {\n            response.rejectedErrors = this._envelope.rejectedErrors;\n        }\n\n        callback(null, response);\n    }\n\n    /**\n     * Handle response for a DATA stream when using SMTP\n     * We expect a single response that defines if the sending succeeded or failed\n     *\n     * @param {String} str Message from the server\n     */\n    _actionSMTPStream(str, callback) {\n        if (Number(str.charAt(0)) !== 2) {\n            // Message failed\n            return callback(this._formatError('Message failed', 'EMESSAGE', str, 'DATA'));\n        } else {\n            // Message sent succesfully\n            return callback(null, str);\n        }\n    }\n\n    /**\n     * Handle response for a DATA stream\n     * We expect a separate response for every recipient. All recipients can either\n     * succeed or fail separately\n     *\n     * @param {String} recipient The recipient this response applies to\n     * @param {Boolean} final Is this the final recipient?\n     * @param {String} str Message from the server\n     */\n    _actionLMTPStream(recipient, final, str, callback) {\n        let err;\n        if (Number(str.charAt(0)) !== 2) {\n            // Message failed\n            err = this._formatError('Message failed for recipient ' + recipient, 'EMESSAGE', str, 'DATA');\n            err.recipient = recipient;\n            this._envelope.rejected.push(recipient);\n            this._envelope.rejectedErrors.push(err);\n            for (let i = 0, len = this._envelope.accepted.length; i < len; i++) {\n                if (this._envelope.accepted[i] === recipient) {\n                    this._envelope.accepted.splice(i, 1);\n                }\n            }\n        }\n        if (final) {\n            return callback(null, str);\n        }\n    }\n\n    _handleXOauth2Token(isRetry, callback) {\n        this._auth.oauth2.getToken(isRetry, (err, accessToken) => {\n            if (err) {\n                this.logger.info(\n                    {\n                        tnx: 'smtp',\n                        username: this._auth.user,\n                        action: 'authfail',\n                        method: this._authMethod\n                    },\n                    'User %s failed to authenticate',\n                    JSON.stringify(this._auth.user)\n                );\n                return callback(this._formatError(err, 'EAUTH', false, 'AUTH XOAUTH2'));\n            }\n            this._responseActions.push(str => {\n                this._actionAUTHComplete(str, isRetry, callback);\n            });\n            this._sendCommand(\n                'AUTH XOAUTH2 ' + this._auth.oauth2.buildXOAuth2Token(accessToken),\n                //  Hidden for logs\n                'AUTH XOAUTH2 ' + this._auth.oauth2.buildXOAuth2Token('/* secret */')\n            );\n        });\n    }\n\n    /**\n     *\n     * @param {string} command\n     * @private\n     */\n    _isDestroyedMessage(command) {\n        if (this._destroyed) {\n            return 'Cannot ' + command + ' - smtp connection is already destroyed.';\n        }\n\n        if (this._socket) {\n            if (this._socket.destroyed) {\n                return 'Cannot ' + command + ' - smtp connection socket is already destroyed.';\n            }\n\n            if (!this._socket.writable) {\n                return 'Cannot ' + command + ' - smtp connection socket is already half-closed.';\n            }\n        }\n    }\n\n    _getHostname() {\n        // defaul hostname is machine hostname or [IP]\n        let defaultHostname;\n        try {\n            defaultHostname = os.hostname() || '';\n        } catch (err) {\n            // fails on windows 7\n            defaultHostname = 'localhost';\n        }\n\n        // ignore if not FQDN\n        if (!defaultHostname || defaultHostname.indexOf('.') < 0) {\n            defaultHostname = '[127.0.0.1]';\n        }\n\n        // IP should be enclosed in []\n        if (defaultHostname.match(/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/)) {\n            defaultHostname = '[' + defaultHostname + ']';\n        }\n\n        return defaultHostname;\n    }\n}\n\nmodule.exports = SMTPConnection;\n", "'use strict';\n\nconst Stream = require('stream').Stream;\nconst nmfetch = require('../fetch');\nconst crypto = require('crypto');\nconst shared = require('../shared');\n\n/**\n * XOAUTH2 access_token generator for Gmail.\n * Create client ID for web applications in Google API console to use it.\n * See Offline Access for receiving the needed refreshToken for an user\n * https://developers.google.com/accounts/docs/OAuth2WebServer#offline\n *\n * Usage for generating access tokens with a custom method using provisionCallback:\n * provisionCallback(user, renew, callback)\n *   * user is the username to get the token for\n *   * renew is a boolean that if true indicates that existing token failed and needs to be renewed\n *   * callback is the callback to run with (error, accessToken [, expires])\n *     * accessToken is a string\n *     * expires is an optional expire time in milliseconds\n * If provisionCallback is used, then Nodemailer does not try to attempt generating the token by itself\n *\n * @constructor\n * @param {Object} options Client information for token generation\n * @param {String} options.user User e-mail address\n * @param {String} options.clientId Client ID value\n * @param {String} options.clientSecret Client secret value\n * @param {String} options.refreshToken Refresh token for an user\n * @param {String} options.accessUrl Endpoint for token generation, defaults to 'https://accounts.google.com/o/oauth2/token'\n * @param {String} options.accessToken An existing valid accessToken\n * @param {String} options.privateKey Private key for JSW\n * @param {Number} options.expires Optional Access Token expire time in ms\n * @param {Number} options.timeout Optional TTL for Access Token in seconds\n * @param {Function} options.provisionCallback Function to run when a new access token is required\n */\nclass XOAuth2 extends Stream {\n    constructor(options, logger) {\n        super();\n\n        this.options = options || {};\n\n        if (options && options.serviceClient) {\n            if (!options.privateKey || !options.user) {\n                setImmediate(() => this.emit('error', new Error('Options \"privateKey\" and \"user\" are required for service account!')));\n                return;\n            }\n\n            let serviceRequestTimeout = Math.min(Math.max(Number(this.options.serviceRequestTimeout) || 0, 0), 3600);\n            this.options.serviceRequestTimeout = serviceRequestTimeout || 5 * 60;\n        }\n\n        this.logger = shared.getLogger(\n            {\n                logger\n            },\n            {\n                component: this.options.component || 'OAuth2'\n            }\n        );\n\n        this.provisionCallback = typeof this.options.provisionCallback === 'function' ? this.options.provisionCallback : false;\n\n        this.options.accessUrl = this.options.accessUrl || 'https://accounts.google.com/o/oauth2/token';\n        this.options.customHeaders = this.options.customHeaders || {};\n        this.options.customParams = this.options.customParams || {};\n\n        this.accessToken = this.options.accessToken || false;\n\n        if (this.options.expires && Number(this.options.expires)) {\n            this.expires = this.options.expires;\n        } else {\n            let timeout = Math.max(Number(this.options.timeout) || 0, 0);\n            this.expires = (timeout && Date.now() + timeout * 1000) || 0;\n        }\n    }\n\n    /**\n     * Returns or generates (if previous has expired) a XOAuth2 token\n     *\n     * @param {Boolean} renew If false then use cached access token (if available)\n     * @param {Function} callback Callback function with error object and token string\n     */\n    getToken(renew, callback) {\n        if (!renew && this.accessToken && (!this.expires || this.expires > Date.now())) {\n            return callback(null, this.accessToken);\n        }\n\n        let generateCallback = (...args) => {\n            if (args[0]) {\n                this.logger.error(\n                    {\n                        err: args[0],\n                        tnx: 'OAUTH2',\n                        user: this.options.user,\n                        action: 'renew'\n                    },\n                    'Failed generating new Access Token for %s',\n                    this.options.user\n                );\n            } else {\n                this.logger.info(\n                    {\n                        tnx: 'OAUTH2',\n                        user: this.options.user,\n                        action: 'renew'\n                    },\n                    'Generated new Access Token for %s',\n                    this.options.user\n                );\n            }\n            callback(...args);\n        };\n\n        if (this.provisionCallback) {\n            this.provisionCallback(this.options.user, !!renew, (err, accessToken, expires) => {\n                if (!err && accessToken) {\n                    this.accessToken = accessToken;\n                    this.expires = expires || 0;\n                }\n                generateCallback(err, accessToken);\n            });\n        } else {\n            this.generateToken(generateCallback);\n        }\n    }\n\n    /**\n     * Updates token values\n     *\n     * @param {String} accessToken New access token\n     * @param {Number} timeout Access token lifetime in seconds\n     *\n     * Emits 'token': { user: User email-address, accessToken: the new accessToken, timeout: TTL in seconds}\n     */\n    updateToken(accessToken, timeout) {\n        this.accessToken = accessToken;\n        timeout = Math.max(Number(timeout) || 0, 0);\n        this.expires = (timeout && Date.now() + timeout * 1000) || 0;\n\n        this.emit('token', {\n            user: this.options.user,\n            accessToken: accessToken || '',\n            expires: this.expires\n        });\n    }\n\n    /**\n     * Generates a new XOAuth2 token with the credentials provided at initialization\n     *\n     * @param {Function} callback Callback function with error object and token string\n     */\n    generateToken(callback) {\n        let urlOptions;\n        let loggedUrlOptions;\n        if (this.options.serviceClient) {\n            // service account - https://developers.google.com/identity/protocols/OAuth2ServiceAccount\n            let iat = Math.floor(Date.now() / 1000); // unix time\n            let tokenData = {\n                iss: this.options.serviceClient,\n                scope: this.options.scope || 'https://mail.google.com/',\n                sub: this.options.user,\n                aud: this.options.accessUrl,\n                iat,\n                exp: iat + this.options.serviceRequestTimeout\n            };\n            let token;\n            try {\n                token = this.jwtSignRS256(tokenData);\n            } catch (err) {\n                return callback(new Error('Can\\x27t generate token. Check your auth options'));\n            }\n\n            urlOptions = {\n                grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n                assertion: token\n            };\n\n            loggedUrlOptions = {\n                grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n                assertion: tokenData\n            };\n        } else {\n            if (!this.options.refreshToken) {\n                return callback(new Error('Can\\x27t create new access token for user'));\n            }\n\n            // web app - https://developers.google.com/identity/protocols/OAuth2WebServer\n            urlOptions = {\n                client_id: this.options.clientId || '',\n                client_secret: this.options.clientSecret || '',\n                refresh_token: this.options.refreshToken,\n                grant_type: 'refresh_token'\n            };\n\n            loggedUrlOptions = {\n                client_id: this.options.clientId || '',\n                client_secret: (this.options.clientSecret || '').substr(0, 6) + '...',\n                refresh_token: (this.options.refreshToken || '').substr(0, 6) + '...',\n                grant_type: 'refresh_token'\n            };\n        }\n\n        Object.keys(this.options.customParams).forEach(key => {\n            urlOptions[key] = this.options.customParams[key];\n            loggedUrlOptions[key] = this.options.customParams[key];\n        });\n\n        this.logger.debug(\n            {\n                tnx: 'OAUTH2',\n                user: this.options.user,\n                action: 'generate'\n            },\n            'Requesting token using: %s',\n            JSON.stringify(loggedUrlOptions)\n        );\n\n        this.postRequest(this.options.accessUrl, urlOptions, this.options, (error, body) => {\n            let data;\n\n            if (error) {\n                return callback(error);\n            }\n\n            try {\n                data = JSON.parse(body.toString());\n            } catch (E) {\n                return callback(E);\n            }\n\n            if (!data || typeof data !== 'object') {\n                this.logger.debug(\n                    {\n                        tnx: 'OAUTH2',\n                        user: this.options.user,\n                        action: 'post'\n                    },\n                    'Response: %s',\n                    (body || '').toString()\n                );\n                return callback(new Error('Invalid authentication response'));\n            }\n\n            let logData = {};\n            Object.keys(data).forEach(key => {\n                if (key !== 'access_token') {\n                    logData[key] = data[key];\n                } else {\n                    logData[key] = (data[key] || '').toString().substr(0, 6) + '...';\n                }\n            });\n\n            this.logger.debug(\n                {\n                    tnx: 'OAUTH2',\n                    user: this.options.user,\n                    action: 'post'\n                },\n                'Response: %s',\n                JSON.stringify(logData)\n            );\n\n            if (data.error) {\n                // Error Response : https://tools.ietf.org/html/rfc6749#section-5.2\n                let errorMessage = data.error;\n                if (data.error_description) {\n                    errorMessage += ': ' + data.error_description;\n                }\n                if (data.error_uri) {\n                    errorMessage += ' (' + data.error_uri + ')';\n                }\n                return callback(new Error(errorMessage));\n            }\n\n            if (data.access_token) {\n                this.updateToken(data.access_token, data.expires_in);\n                return callback(null, this.accessToken);\n            }\n\n            return callback(new Error('No access token'));\n        });\n    }\n\n    /**\n     * Converts an access_token and user id into a base64 encoded XOAuth2 token\n     *\n     * @param {String} [accessToken] Access token string\n     * @return {String} Base64 encoded token for IMAP or SMTP login\n     */\n    buildXOAuth2Token(accessToken) {\n        let authData = ['user=' + (this.options.user || ''), 'auth=Bearer ' + (accessToken || this.accessToken), '', ''];\n        return Buffer.from(authData.join('\\x01'), 'utf-8').toString('base64');\n    }\n\n    /**\n     * Custom POST request handler.\n     * This is only needed to keep paths short in Windows \u2013 usually this module\n     * is a dependency of a dependency and if it tries to require something\n     * like the request module the paths get way too long to handle for Windows.\n     * As we do only a simple POST request we do not actually require complicated\n     * logic support (no redirects, no nothing) anyway.\n     *\n     * @param {String} url Url to POST to\n     * @param {String|Buffer} payload Payload to POST\n     * @param {Function} callback Callback function with (err, buff)\n     */\n    postRequest(url, payload, params, callback) {\n        let returned = false;\n\n        let chunks = [];\n        let chunklen = 0;\n\n        let req = nmfetch(url, {\n            method: 'post',\n            headers: params.customHeaders,\n            body: payload,\n            allowErrorResponse: true\n        });\n\n        req.on('readable', () => {\n            let chunk;\n            while ((chunk = req.read()) !== null) {\n                chunks.push(chunk);\n                chunklen += chunk.length;\n            }\n        });\n\n        req.once('error', err => {\n            if (returned) {\n                return;\n            }\n            returned = true;\n            return callback(err);\n        });\n\n        req.once('end', () => {\n            if (returned) {\n                return;\n            }\n            returned = true;\n            return callback(null, Buffer.concat(chunks, chunklen));\n        });\n    }\n\n    /**\n     * Encodes a buffer or a string into Base64url format\n     *\n     * @param {Buffer|String} data The data to convert\n     * @return {String} The encoded string\n     */\n    toBase64URL(data) {\n        if (typeof data === 'string') {\n            data = Buffer.from(data);\n        }\n\n        return data\n            .toString('base64')\n            .replace(/[=]+/g, '') // remove '='s\n            .replace(/\\+/g, '-') // '+' \u2192 '-'\n            .replace(/\\//g, '_'); // '/' \u2192 '_'\n    }\n\n    /**\n     * Creates a JSON Web Token signed with RS256 (SHA256 + RSA)\n     *\n     * @param {Object} payload The payload to include in the generated token\n     * @return {String} The generated and signed token\n     */\n    jwtSignRS256(payload) {\n        payload = ['{\"alg\":\"RS256\",\"typ\":\"JWT\"}', JSON.stringify(payload)].map(val => this.toBase64URL(val)).join('.');\n        let signature = crypto.createSign('RSA-SHA256').update(payload).sign(this.options.privateKey);\n        return payload + '.' + this.toBase64URL(signature);\n    }\n}\n\nmodule.exports = XOAuth2;\n", "'use strict';\n\nconst SMTPConnection = require('../smtp-connection');\nconst assign = require('../shared').assign;\nconst XOAuth2 = require('../xoauth2');\nconst EventEmitter = require('events');\n\n/**\n * Creates an element for the pool\n *\n * @constructor\n * @param {Object} options SMTPPool instance\n */\nclass PoolResource extends EventEmitter {\n    constructor(pool) {\n        super();\n\n        this.pool = pool;\n        this.options = pool.options;\n        this.logger = this.pool.logger;\n\n        if (this.options.auth) {\n            switch ((this.options.auth.type || '').toString().toUpperCase()) {\n                case 'OAUTH2': {\n                    let oauth2 = new XOAuth2(this.options.auth, this.logger);\n                    oauth2.provisionCallback = (this.pool.mailer && this.pool.mailer.get('oauth2_provision_cb')) || oauth2.provisionCallback;\n                    this.auth = {\n                        type: 'OAUTH2',\n                        user: this.options.auth.user,\n                        oauth2,\n                        method: 'XOAUTH2'\n                    };\n                    oauth2.on('token', token => this.pool.mailer.emit('token', token));\n                    oauth2.on('error', err => this.emit('error', err));\n                    break;\n                }\n                default:\n                    if (!this.options.auth.user && !this.options.auth.pass) {\n                        break;\n                    }\n                    this.auth = {\n                        type: (this.options.auth.type || '').toString().toUpperCase() || 'LOGIN',\n                        user: this.options.auth.user,\n                        credentials: {\n                            user: this.options.auth.user || '',\n                            pass: this.options.auth.pass,\n                            options: this.options.auth.options\n                        },\n                        method: (this.options.auth.method || '').trim().toUpperCase() || this.options.authMethod || false\n                    };\n            }\n        }\n\n        this._connection = false;\n        this._connected = false;\n\n        this.messages = 0;\n        this.available = true;\n    }\n\n    /**\n     * Initiates a connection to the SMTP server\n     *\n     * @param {Function} callback Callback function to run once the connection is established or failed\n     */\n    connect(callback) {\n        this.pool.getSocket(this.options, (err, socketOptions) => {\n            if (err) {\n                return callback(err);\n            }\n\n            let returned = false;\n            let options = this.options;\n            if (socketOptions && socketOptions.connection) {\n                this.logger.info(\n                    {\n                        tnx: 'proxy',\n                        remoteAddress: socketOptions.connection.remoteAddress,\n                        remotePort: socketOptions.connection.remotePort,\n                        destHost: options.host || '',\n                        destPort: options.port || '',\n                        action: 'connected'\n                    },\n                    'Using proxied socket from %s:%s to %s:%s',\n                    socketOptions.connection.remoteAddress,\n                    socketOptions.connection.remotePort,\n                    options.host || '',\n                    options.port || ''\n                );\n\n                options = assign(false, options);\n                Object.keys(socketOptions).forEach(key => {\n                    options[key] = socketOptions[key];\n                });\n            }\n\n            this.connection = new SMTPConnection(options);\n\n            this.connection.once('error', err => {\n                this.emit('error', err);\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                return callback(err);\n            });\n\n            this.connection.once('end', () => {\n                this.close();\n                if (returned) {\n                    return;\n                }\n                returned = true;\n\n                let timer = setTimeout(() => {\n                    if (returned) {\n                        return;\n                    }\n                    // still have not returned, this means we have an unexpected connection close\n                    let err = new Error('Unexpected socket close');\n                    if (this.connection && this.connection._socket && this.connection._socket.upgrading) {\n                        // starttls connection errors\n                        err.code = 'ETLS';\n                    }\n                    callback(err);\n                }, 1000);\n\n                try {\n                    timer.unref();\n                } catch (E) {\n                    // Ignore. Happens on envs with non-node timer implementation\n                }\n            });\n\n            this.connection.connect(() => {\n                if (returned) {\n                    return;\n                }\n\n                if (this.auth && (this.connection.allowsAuth || options.forceAuth)) {\n                    this.connection.login(this.auth, err => {\n                        if (returned) {\n                            return;\n                        }\n                        returned = true;\n\n                        if (err) {\n                            this.connection.close();\n                            this.emit('error', err);\n                            return callback(err);\n                        }\n\n                        this._connected = true;\n                        callback(null, true);\n                    });\n                } else {\n                    returned = true;\n                    this._connected = true;\n                    return callback(null, true);\n                }\n            });\n        });\n    }\n\n    /**\n     * Sends an e-mail to be sent using the selected settings\n     *\n     * @param {Object} mail Mail object\n     * @param {Function} callback Callback function\n     */\n    send(mail, callback) {\n        if (!this._connected) {\n            return this.connect(err => {\n                if (err) {\n                    return callback(err);\n                }\n                return this.send(mail, callback);\n            });\n        }\n\n        let envelope = mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push('...and ' + recipients.splice(2).length + ' more');\n        }\n        this.logger.info(\n            {\n                tnx: 'send',\n                messageId,\n                cid: this.id\n            },\n            'Sending message %s using #%s to <%s>',\n            messageId,\n            this.id,\n            recipients.join(', ')\n        );\n\n        if (mail.data.dsn) {\n            envelope.dsn = mail.data.dsn;\n        }\n\n        this.connection.send(envelope, mail.message.createReadStream(), (err, info) => {\n            this.messages++;\n\n            if (err) {\n                this.connection.close();\n                this.emit('error', err);\n                return callback(err);\n            }\n\n            info.envelope = {\n                from: envelope.from,\n                to: envelope.to\n            };\n            info.messageId = messageId;\n\n            setImmediate(() => {\n                let err;\n                if (this.messages >= this.options.maxMessages) {\n                    err = new Error('Resource exhausted');\n                    err.code = 'EMAXLIMIT';\n                    this.connection.close();\n                    this.emit('error', err);\n                } else {\n                    this.pool._checkRateLimit(() => {\n                        this.available = true;\n                        this.emit('available');\n                    });\n                }\n            });\n\n            callback(null, info);\n        });\n    }\n\n    /**\n     * Closes the connection\n     */\n    close() {\n        this._connected = false;\n        if (this.auth && this.auth.oauth2) {\n            this.auth.oauth2.removeAllListeners();\n        }\n        if (this.connection) {\n            this.connection.close();\n        }\n        this.emit('close');\n    }\n}\n\nmodule.exports = PoolResource;\n", "{\n    \"1und1\": {\n        \"host\": \"smtp.1und1.de\",\n        \"port\": 465,\n        \"secure\": true,\n        \"authMethod\": \"LOGIN\"\n    },\n    \n    \"Aliyun\": {\n        \"domains\": [\"aliyun.com\"],\n        \"host\": \"smtp.aliyun.com\",\n        \"port\": 465,\n        \"secure\": true\n    },\n    \n    \"AOL\": {\n        \"domains\": [\"aol.com\"],\n        \"host\": \"smtp.aol.com\",\n        \"port\": 587\n    },\n\n    \"Bluewin\": {\n        \"host\": \"smtpauths.bluewin.ch\",\n        \"domains\": [\"bluewin.ch\"],\n        \"port\": 465\n    },\n\n    \"DebugMail\": {\n        \"host\": \"debugmail.io\",\n        \"port\": 25\n    },\n\n    \"DynectEmail\": {\n        \"aliases\": [\"Dynect\"],\n        \"host\": \"smtp.dynect.net\",\n        \"port\": 25\n    },\n\n    \"Ethereal\": {\n        \"aliases\": [\"ethereal.email\"],\n        \"host\": \"smtp.ethereal.email\",\n        \"port\": 587\n    },\n\n    \"FastMail\": {\n        \"domains\": [\"fastmail.fm\"],\n        \"host\": \"smtp.fastmail.com\",\n        \"port\": 465,\n        \"secure\": true\n    },\n\n    \"Forward Email\": {\n        \"aliases\": [\"FE\", \"ForwardEmail\"],\n        \"domains\": [\"forwardemail.net\"],\n        \"host\": \"smtp.forwardemail.net\",\n        \"port\": 465,\n        \"secure\": true\n    },\n\n    \"Feishu Mail\": {\n        \"aliases\": [\"Feishu\", \"FeishuMail\"],\n        \"domains\": [\"www.feishu.cn\"],\n        \"host\": \"smtp.feishu.cn\",\n        \"port\": 465,\n        \"secure\": true\n    },\n\n    \"GandiMail\": {\n        \"aliases\": [\"Gandi\", \"Gandi Mail\"],\n        \"host\": \"mail.gandi.net\",\n        \"port\": 587\n    },\n\n    \"Gmail\": {\n        \"aliases\": [\"Google Mail\"],\n        \"domains\": [\"gmail.com\", \"googlemail.com\"],\n        \"host\": \"smtp.gmail.com\",\n        \"port\": 465,\n        \"secure\": true\n    },\n\n    \"Godaddy\": {\n        \"host\": \"smtpout.secureserver.net\",\n        \"port\": 25\n    },\n\n    \"GodaddyAsia\": {\n        \"host\": \"smtp.asia.secureserver.net\",\n        \"port\": 25\n    },\n\n    \"GodaddyEurope\": {\n        \"host\": \"smtp.europe.secureserver.net\",\n        \"port\": 25\n    },\n\n    \"hot.ee\": {\n        \"host\": \"mail.hot.ee\"\n    },\n\n    \"Hotmail\": {\n        \"aliases\": [\"Outlook\", \"Outlook.com\", \"Hotmail.com\"],\n        \"domains\": [\"hotmail.com\", \"outlook.com\"],\n        \"host\": \"smtp-mail.outlook.com\",\n        \"port\": 587\n    },\n\n    \"iCloud\": {\n        \"aliases\": [\"Me\", \"Mac\"],\n        \"domains\": [\"me.com\", \"mac.com\"],\n        \"host\": \"smtp.mail.me.com\",\n        \"port\": 587\n    },\n\n    \"Infomaniak\": {\n        \"host\": \"mail.infomaniak.com\",\n        \"domains\": [\"ik.me\", \"ikmail.com\", \"etik.com\"],\n        \"port\": 587\n    },\n    \"Loopia\": {\n        \"host\": \"mailcluster.loopia.se\",\n        \"port\": 465\n    },\n    \"mail.ee\": {\n        \"host\": \"smtp.mail.ee\"\n    },\n\n    \"Mail.ru\": {\n        \"host\": \"smtp.mail.ru\",\n        \"port\": 465,\n        \"secure\": true\n    },\n\n    \"Mailcatch.app\": {\n        \"host\": \"sandbox-smtp.mailcatch.app\",\n        \"port\": 2525\n    },\n\n    \"Maildev\": {\n        \"port\": 1025,\n        \"ignoreTLS\": true\n    },\n\n    \"Mailgun\": {\n        \"host\": \"smtp.mailgun.org\",\n        \"port\": 465,\n        \"secure\": true\n    },\n\n    \"Mailjet\": {\n        \"host\": \"in.mailjet.com\",\n        \"port\": 587\n    },\n\n    \"Mailosaur\": {\n        \"host\": \"mailosaur.io\",\n        \"port\": 25\n    },\n\n    \"Mailtrap\": {\n        \"host\": \"live.smtp.mailtrap.io\",\n        \"port\": 587\n    },\n\n    \"Mandrill\": {\n        \"host\": \"smtp.mandrillapp.com\",\n        \"port\": 587\n    },\n\n    \"Naver\": {\n        \"host\": \"smtp.naver.com\",\n        \"port\": 587\n    },\n\n    \"One\": {\n        \"host\": \"send.one.com\",\n        \"port\": 465,\n        \"secure\": true\n    },\n\n    \"OpenMailBox\": {\n        \"aliases\": [\"OMB\", \"openmailbox.org\"],\n        \"host\": \"smtp.openmailbox.org\",\n        \"port\": 465,\n        \"secure\": true\n    },\n\n    \"Outlook365\": {\n        \"host\": \"smtp.office365.com\",\n        \"port\": 587,\n        \"secure\": false\n    },\n\n    \"OhMySMTP\": {\n        \"host\": \"smtp.ohmysmtp.com\",\n        \"port\": 587,\n        \"secure\": false\n    },\n\n    \"Postmark\": {\n        \"aliases\": [\"PostmarkApp\"],\n        \"host\": \"smtp.postmarkapp.com\",\n        \"port\": 2525\n    },\n\n    \"Proton\": {\n        \"aliases\": [\"ProtonMail\", \"Proton.me\", \"Protonmail.com\", \"Protonmail.ch\"],\n        \"domains\": [\"proton.me\", \"protonmail.com\", \"pm.me\", \"protonmail.ch\"],\n        \"host\": \"smtp.protonmail.ch\",\n        \"port\": 587,\n        \"requireTLS\": true\n    },\n\n    \"qiye.aliyun\": {\n        \"host\": \"smtp.mxhichina.com\",\n        \"port\": \"465\",\n        \"secure\": true\n    },\n\n    \"QQ\": {\n        \"domains\": [\"qq.com\"],\n        \"host\": \"smtp.qq.com\",\n        \"port\": 465,\n        \"secure\": true\n    },\n\n    \"QQex\": {\n        \"aliases\": [\"QQ Enterprise\"],\n        \"domains\": [\"exmail.qq.com\"],\n        \"host\": \"smtp.exmail.qq.com\",\n        \"port\": 465,\n        \"secure\": true\n    },\n\n    \"SendCloud\": {\n        \"host\": \"smtp.sendcloud.net\",\n        \"port\": 2525\n    },\n\n    \"SendGrid\": {\n        \"host\": \"smtp.sendgrid.net\",\n        \"port\": 587\n    },\n\n    \"SendinBlue\": {\n        \"aliases\": [\"Brevo\"],\n        \"host\": \"smtp-relay.brevo.com\",\n        \"port\": 587\n    },\n\n    \"SendPulse\": {\n        \"host\": \"smtp-pulse.com\",\n        \"port\": 465,\n        \"secure\": true\n    },\n\n    \"SES\": {\n        \"host\": \"email-smtp.us-east-1.amazonaws.com\",\n        \"port\": 465,\n        \"secure\": true\n    },\n\n    \"SES-US-EAST-1\": {\n        \"host\": \"email-smtp.us-east-1.amazonaws.com\",\n        \"port\": 465,\n        \"secure\": true\n    },\n\n    \"SES-US-WEST-2\": {\n        \"host\": \"email-smtp.us-west-2.amazonaws.com\",\n        \"port\": 465,\n        \"secure\": true\n    },\n\n    \"SES-EU-WEST-1\": {\n        \"host\": \"email-smtp.eu-west-1.amazonaws.com\",\n        \"port\": 465,\n        \"secure\": true\n    },\n\n    \"SES-AP-SOUTH-1\": {\n        \"host\": \"email-smtp.ap-south-1.amazonaws.com\",\n        \"port\": 465,\n        \"secure\": true\n    },\n\n    \"SES-AP-NORTHEAST-1\": {\n        \"host\": \"email-smtp.ap-northeast-1.amazonaws.com\",\n        \"port\": 465,\n        \"secure\": true\n    },\n\n    \"SES-AP-NORTHEAST-2\": {\n        \"host\": \"email-smtp.ap-northeast-2.amazonaws.com\",\n        \"port\": 465,\n        \"secure\": true\n    },\n\n    \"SES-AP-NORTHEAST-3\": {\n        \"host\": \"email-smtp.ap-northeast-3.amazonaws.com\",\n        \"port\": 465,\n        \"secure\": true\n    },\n\n    \"SES-AP-SOUTHEAST-1\": {\n        \"host\": \"email-smtp.ap-southeast-1.amazonaws.com\",\n        \"port\": 465,\n        \"secure\": true\n    },\n\n    \"SES-AP-SOUTHEAST-2\": {\n        \"host\": \"email-smtp.ap-southeast-2.amazonaws.com\",\n        \"port\": 465,\n        \"secure\": true\n    },\n\n    \"Seznam\": {\n        \"aliases\": [\"Seznam Email\"],\n        \"domains\": [\"seznam.cz\", \"email.cz\", \"post.cz\", \"spoluzaci.cz\"],\n        \"host\": \"smtp.seznam.cz\",\n        \"port\": 465,\n        \"secure\": true\n    },\n\n    \"Sparkpost\": {\n        \"aliases\": [\"SparkPost\", \"SparkPost Mail\"],\n        \"domains\": [\"sparkpost.com\"],\n        \"host\": \"smtp.sparkpostmail.com\",\n        \"port\": 587,\n        \"secure\": false\n    },\n\n    \"Tipimail\": {\n        \"host\": \"smtp.tipimail.com\",\n        \"port\": 587\n    },\n\n    \"Yahoo\": {\n        \"domains\": [\"yahoo.com\"],\n        \"host\": \"smtp.mail.yahoo.com\",\n        \"port\": 465,\n        \"secure\": true\n    },\n\n    \"Yandex\": {\n        \"domains\": [\"yandex.ru\"],\n        \"host\": \"smtp.yandex.ru\",\n        \"port\": 465,\n        \"secure\": true\n    },\n\n    \"Zoho\": {\n        \"host\": \"smtp.zoho.com\",\n        \"port\": 465,\n        \"secure\": true,\n        \"authMethod\": \"LOGIN\"\n    },\n\n    \"126\": {\n        \"host\": \"smtp.126.com\",\n        \"port\": 465,\n        \"secure\": true\n    },\n\n    \"163\": {\n        \"host\": \"smtp.163.com\",\n        \"port\": 465,\n        \"secure\": true\n    }\n}\n", "'use strict';\n\nconst services = require('./services.json');\nconst normalized = {};\n\nObject.keys(services).forEach(key => {\n    let service = services[key];\n\n    normalized[normalizeKey(key)] = normalizeService(service);\n\n    [].concat(service.aliases || []).forEach(alias => {\n        normalized[normalizeKey(alias)] = normalizeService(service);\n    });\n\n    [].concat(service.domains || []).forEach(domain => {\n        normalized[normalizeKey(domain)] = normalizeService(service);\n    });\n});\n\nfunction normalizeKey(key) {\n    return key.replace(/[^a-zA-Z0-9.-]/g, '').toLowerCase();\n}\n\nfunction normalizeService(service) {\n    let filter = ['domains', 'aliases'];\n    let response = {};\n\n    Object.keys(service).forEach(key => {\n        if (filter.indexOf(key) < 0) {\n            response[key] = service[key];\n        }\n    });\n\n    return response;\n}\n\n/**\n * Resolves SMTP config for given key. Key can be a name (like 'Gmail'), alias (like 'Google Mail') or\n * an email address (like 'test@googlemail.com').\n *\n * @param {String} key [description]\n * @returns {Object} SMTP config or false if not found\n */\nmodule.exports = function (key) {\n    key = normalizeKey(key.split('@').pop());\n    return normalized[key] || false;\n};\n", "'use strict';\n\nconst EventEmitter = require('events');\nconst PoolResource = require('./pool-resource');\nconst SMTPConnection = require('../smtp-connection');\nconst wellKnown = require('../well-known');\nconst shared = require('../shared');\nconst packageData = require('../../package.json');\n\n/**\n * Creates a SMTP pool transport object for Nodemailer\n *\n * @constructor\n * @param {Object} options SMTP Connection options\n */\nclass SMTPPool extends EventEmitter {\n    constructor(options) {\n        super();\n\n        options = options || {};\n        if (typeof options === 'string') {\n            options = {\n                url: options\n            };\n        }\n\n        let urlData;\n        let service = options.service;\n\n        if (typeof options.getSocket === 'function') {\n            this.getSocket = options.getSocket;\n        }\n\n        if (options.url) {\n            urlData = shared.parseConnectionUrl(options.url);\n            service = service || urlData.service;\n        }\n\n        this.options = shared.assign(\n            false, // create new object\n            options, // regular options\n            urlData, // url options\n            service && wellKnown(service) // wellknown options\n        );\n\n        this.options.maxConnections = this.options.maxConnections || 5;\n        this.options.maxMessages = this.options.maxMessages || 100;\n\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || 'smtp-pool'\n        });\n\n        // temporary object\n        let connection = new SMTPConnection(this.options);\n\n        this.name = 'SMTP (pool)';\n        this.version = packageData.version + '[client:' + connection.version + ']';\n\n        this._rateLimit = {\n            counter: 0,\n            timeout: null,\n            waiting: [],\n            checkpoint: false,\n            delta: Number(this.options.rateDelta) || 1000,\n            limit: Number(this.options.rateLimit) || 0\n        };\n        this._closed = false;\n        this._queue = [];\n        this._connections = [];\n        this._connectionCounter = 0;\n\n        this.idling = true;\n\n        setImmediate(() => {\n            if (this.idling) {\n                this.emit('idle');\n            }\n        });\n    }\n\n    /**\n     * Placeholder function for creating proxy sockets. This method immediatelly returns\n     * without a socket\n     *\n     * @param {Object} options Connection options\n     * @param {Function} callback Callback function to run with the socket keys\n     */\n    getSocket(options, callback) {\n        // return immediatelly\n        return setImmediate(() => callback(null, false));\n    }\n\n    /**\n     * Queues an e-mail to be sent using the selected settings\n     *\n     * @param {Object} mail Mail object\n     * @param {Function} callback Callback function\n     */\n    send(mail, callback) {\n        if (this._closed) {\n            return false;\n        }\n\n        this._queue.push({\n            mail,\n            requeueAttempts: 0,\n            callback\n        });\n\n        if (this.idling && this._queue.length >= this.options.maxConnections) {\n            this.idling = false;\n        }\n\n        setImmediate(() => this._processMessages());\n\n        return true;\n    }\n\n    /**\n     * Closes all connections in the pool. If there is a message being sent, the connection\n     * is closed later\n     */\n    close() {\n        let connection;\n        let len = this._connections.length;\n        this._closed = true;\n\n        // clear rate limit timer if it exists\n        clearTimeout(this._rateLimit.timeout);\n\n        if (!len && !this._queue.length) {\n            return;\n        }\n\n        // remove all available connections\n        for (let i = len - 1; i >= 0; i--) {\n            if (this._connections[i] && this._connections[i].available) {\n                connection = this._connections[i];\n                connection.close();\n                this.logger.info(\n                    {\n                        tnx: 'connection',\n                        cid: connection.id,\n                        action: 'removed'\n                    },\n                    'Connection #%s removed',\n                    connection.id\n                );\n            }\n        }\n\n        if (len && !this._connections.length) {\n            this.logger.debug(\n                {\n                    tnx: 'connection'\n                },\n                'All connections removed'\n            );\n        }\n\n        if (!this._queue.length) {\n            return;\n        }\n\n        // make sure that entire queue would be cleaned\n        let invokeCallbacks = () => {\n            if (!this._queue.length) {\n                this.logger.debug(\n                    {\n                        tnx: 'connection'\n                    },\n                    'Pending queue entries cleared'\n                );\n                return;\n            }\n            let entry = this._queue.shift();\n            if (entry && typeof entry.callback === 'function') {\n                try {\n                    entry.callback(new Error('Connection pool was closed'));\n                } catch (E) {\n                    this.logger.error(\n                        {\n                            err: E,\n                            tnx: 'callback',\n                            cid: connection.id\n                        },\n                        'Callback error for #%s: %s',\n                        connection.id,\n                        E.message\n                    );\n                }\n            }\n            setImmediate(invokeCallbacks);\n        };\n        setImmediate(invokeCallbacks);\n    }\n\n    /**\n     * Check the queue and available connections. If there is a message to be sent and there is\n     * an available connection, then use this connection to send the mail\n     */\n    _processMessages() {\n        let connection;\n        let i, len;\n\n        // do nothing if already closed\n        if (this._closed) {\n            return;\n        }\n\n        // do nothing if queue is empty\n        if (!this._queue.length) {\n            if (!this.idling) {\n                // no pending jobs\n                this.idling = true;\n                this.emit('idle');\n            }\n            return;\n        }\n\n        // find first available connection\n        for (i = 0, len = this._connections.length; i < len; i++) {\n            if (this._connections[i].available) {\n                connection = this._connections[i];\n                break;\n            }\n        }\n\n        if (!connection && this._connections.length < this.options.maxConnections) {\n            connection = this._createConnection();\n        }\n\n        if (!connection) {\n            // no more free connection slots available\n            this.idling = false;\n            return;\n        }\n\n        // check if there is free space in the processing queue\n        if (!this.idling && this._queue.length < this.options.maxConnections) {\n            this.idling = true;\n            this.emit('idle');\n        }\n\n        let entry = (connection.queueEntry = this._queue.shift());\n        entry.messageId = (connection.queueEntry.mail.message.getHeader('message-id') || '').replace(/[<>\\s]/g, '');\n\n        connection.available = false;\n\n        this.logger.debug(\n            {\n                tnx: 'pool',\n                cid: connection.id,\n                messageId: entry.messageId,\n                action: 'assign'\n            },\n            'Assigned message <%s> to #%s (%s)',\n            entry.messageId,\n            connection.id,\n            connection.messages + 1\n        );\n\n        if (this._rateLimit.limit) {\n            this._rateLimit.counter++;\n            if (!this._rateLimit.checkpoint) {\n                this._rateLimit.checkpoint = Date.now();\n            }\n        }\n\n        connection.send(entry.mail, (err, info) => {\n            // only process callback if current handler is not changed\n            if (entry === connection.queueEntry) {\n                try {\n                    entry.callback(err, info);\n                } catch (E) {\n                    this.logger.error(\n                        {\n                            err: E,\n                            tnx: 'callback',\n                            cid: connection.id\n                        },\n                        'Callback error for #%s: %s',\n                        connection.id,\n                        E.message\n                    );\n                }\n                connection.queueEntry = false;\n            }\n        });\n    }\n\n    /**\n     * Creates a new pool resource\n     */\n    _createConnection() {\n        let connection = new PoolResource(this);\n\n        connection.id = ++this._connectionCounter;\n\n        this.logger.info(\n            {\n                tnx: 'pool',\n                cid: connection.id,\n                action: 'conection'\n            },\n            'Created new pool resource #%s',\n            connection.id\n        );\n\n        // resource comes available\n        connection.on('available', () => {\n            this.logger.debug(\n                {\n                    tnx: 'connection',\n                    cid: connection.id,\n                    action: 'available'\n                },\n                'Connection #%s became available',\n                connection.id\n            );\n\n            if (this._closed) {\n                // if already closed run close() that will remove this connections from connections list\n                this.close();\n            } else {\n                // check if there's anything else to send\n                this._processMessages();\n            }\n        });\n\n        // resource is terminated with an error\n        connection.once('error', err => {\n            if (err.code !== 'EMAXLIMIT') {\n                this.logger.error(\n                    {\n                        err,\n                        tnx: 'pool',\n                        cid: connection.id\n                    },\n                    'Pool Error for #%s: %s',\n                    connection.id,\n                    err.message\n                );\n            } else {\n                this.logger.debug(\n                    {\n                        tnx: 'pool',\n                        cid: connection.id,\n                        action: 'maxlimit'\n                    },\n                    'Max messages limit exchausted for #%s',\n                    connection.id\n                );\n            }\n\n            if (connection.queueEntry) {\n                try {\n                    connection.queueEntry.callback(err);\n                } catch (E) {\n                    this.logger.error(\n                        {\n                            err: E,\n                            tnx: 'callback',\n                            cid: connection.id\n                        },\n                        'Callback error for #%s: %s',\n                        connection.id,\n                        E.message\n                    );\n                }\n                connection.queueEntry = false;\n            }\n\n            // remove the erroneus connection from connections list\n            this._removeConnection(connection);\n\n            this._continueProcessing();\n        });\n\n        connection.once('close', () => {\n            this.logger.info(\n                {\n                    tnx: 'connection',\n                    cid: connection.id,\n                    action: 'closed'\n                },\n                'Connection #%s was closed',\n                connection.id\n            );\n\n            this._removeConnection(connection);\n\n            if (connection.queueEntry) {\n                // If the connection closed when sending, add the message to the queue again\n                // if max number of requeues is not reached yet\n                // Note that we must wait a bit.. because the callback of the 'error' handler might be called\n                // in the next event loop\n                setTimeout(() => {\n                    if (connection.queueEntry) {\n                        if (this._shouldRequeuOnConnectionClose(connection.queueEntry)) {\n                            this._requeueEntryOnConnectionClose(connection);\n                        } else {\n                            this._failDeliveryOnConnectionClose(connection);\n                        }\n                    }\n                    this._continueProcessing();\n                }, 50);\n            } else {\n                this._continueProcessing();\n            }\n        });\n\n        this._connections.push(connection);\n\n        return connection;\n    }\n\n    _shouldRequeuOnConnectionClose(queueEntry) {\n        if (this.options.maxRequeues === undefined || this.options.maxRequeues < 0) {\n            return true;\n        }\n\n        return queueEntry.requeueAttempts < this.options.maxRequeues;\n    }\n\n    _failDeliveryOnConnectionClose(connection) {\n        if (connection.queueEntry && connection.queueEntry.callback) {\n            try {\n                connection.queueEntry.callback(new Error('Reached maximum number of retries after connection was closed'));\n            } catch (E) {\n                this.logger.error(\n                    {\n                        err: E,\n                        tnx: 'callback',\n                        messageId: connection.queueEntry.messageId,\n                        cid: connection.id\n                    },\n                    'Callback error for #%s: %s',\n                    connection.id,\n                    E.message\n                );\n            }\n            connection.queueEntry = false;\n        }\n    }\n\n    _requeueEntryOnConnectionClose(connection) {\n        connection.queueEntry.requeueAttempts = connection.queueEntry.requeueAttempts + 1;\n        this.logger.debug(\n            {\n                tnx: 'pool',\n                cid: connection.id,\n                messageId: connection.queueEntry.messageId,\n                action: 'requeue'\n            },\n            'Re-queued message <%s> for #%s. Attempt: #%s',\n            connection.queueEntry.messageId,\n            connection.id,\n            connection.queueEntry.requeueAttempts\n        );\n        this._queue.unshift(connection.queueEntry);\n        connection.queueEntry = false;\n    }\n\n    /**\n     * Continue to process message if the pool hasn't closed\n     */\n    _continueProcessing() {\n        if (this._closed) {\n            this.close();\n        } else {\n            setTimeout(() => this._processMessages(), 100);\n        }\n    }\n\n    /**\n     * Remove resource from pool\n     *\n     * @param {Object} connection The PoolResource to remove\n     */\n    _removeConnection(connection) {\n        let index = this._connections.indexOf(connection);\n\n        if (index !== -1) {\n            this._connections.splice(index, 1);\n        }\n    }\n\n    /**\n     * Checks if connections have hit current rate limit and if so, queues the availability callback\n     *\n     * @param {Function} callback Callback function to run once rate limiter has been cleared\n     */\n    _checkRateLimit(callback) {\n        if (!this._rateLimit.limit) {\n            return callback();\n        }\n\n        let now = Date.now();\n\n        if (this._rateLimit.counter < this._rateLimit.limit) {\n            return callback();\n        }\n\n        this._rateLimit.waiting.push(callback);\n\n        if (this._rateLimit.checkpoint <= now - this._rateLimit.delta) {\n            return this._clearRateLimit();\n        } else if (!this._rateLimit.timeout) {\n            this._rateLimit.timeout = setTimeout(() => this._clearRateLimit(), this._rateLimit.delta - (now - this._rateLimit.checkpoint));\n            this._rateLimit.checkpoint = now;\n        }\n    }\n\n    /**\n     * Clears current rate limit limitation and runs paused callback\n     */\n    _clearRateLimit() {\n        clearTimeout(this._rateLimit.timeout);\n        this._rateLimit.timeout = null;\n        this._rateLimit.counter = 0;\n        this._rateLimit.checkpoint = false;\n\n        // resume all paused connections\n        while (this._rateLimit.waiting.length) {\n            let cb = this._rateLimit.waiting.shift();\n            setImmediate(cb);\n        }\n    }\n\n    /**\n     * Returns true if there are free slots in the queue\n     */\n    isIdle() {\n        return this.idling;\n    }\n\n    /**\n     * Verifies SMTP configuration\n     *\n     * @param {Function} callback Callback function\n     */\n    verify(callback) {\n        let promise;\n\n        if (!callback) {\n            promise = new Promise((resolve, reject) => {\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n\n        let auth = new PoolResource(this).auth;\n\n        this.getSocket(this.options, (err, socketOptions) => {\n            if (err) {\n                return callback(err);\n            }\n\n            let options = this.options;\n            if (socketOptions && socketOptions.connection) {\n                this.logger.info(\n                    {\n                        tnx: 'proxy',\n                        remoteAddress: socketOptions.connection.remoteAddress,\n                        remotePort: socketOptions.connection.remotePort,\n                        destHost: options.host || '',\n                        destPort: options.port || '',\n                        action: 'connected'\n                    },\n                    'Using proxied socket from %s:%s to %s:%s',\n                    socketOptions.connection.remoteAddress,\n                    socketOptions.connection.remotePort,\n                    options.host || '',\n                    options.port || ''\n                );\n                options = shared.assign(false, options);\n                Object.keys(socketOptions).forEach(key => {\n                    options[key] = socketOptions[key];\n                });\n            }\n\n            let connection = new SMTPConnection(options);\n            let returned = false;\n\n            connection.once('error', err => {\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                connection.close();\n                return callback(err);\n            });\n\n            connection.once('end', () => {\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                return callback(new Error('Connection closed'));\n            });\n\n            let finalize = () => {\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                connection.quit();\n                return callback(null, true);\n            };\n\n            connection.connect(() => {\n                if (returned) {\n                    return;\n                }\n\n                if (auth && (connection.allowsAuth || options.forceAuth)) {\n                    connection.login(auth, err => {\n                        if (returned) {\n                            return;\n                        }\n\n                        if (err) {\n                            returned = true;\n                            connection.close();\n                            return callback(err);\n                        }\n\n                        finalize();\n                    });\n                } else if (!auth && connection.allowsAuth && options.forceAuth) {\n                    let err = new Error('Authentication info was not provided');\n                    err.code = 'NoAuth';\n\n                    returned = true;\n                    connection.close();\n                    return callback(err);\n                } else {\n                    finalize();\n                }\n            });\n        });\n\n        return promise;\n    }\n}\n\n// expose to the world\nmodule.exports = SMTPPool;\n", "'use strict';\n\nconst EventEmitter = require('events');\nconst SMTPConnection = require('../smtp-connection');\nconst wellKnown = require('../well-known');\nconst shared = require('../shared');\nconst XOAuth2 = require('../xoauth2');\nconst packageData = require('../../package.json');\n\n/**\n * Creates a SMTP transport object for Nodemailer\n *\n * @constructor\n * @param {Object} options Connection options\n */\nclass SMTPTransport extends EventEmitter {\n    constructor(options) {\n        super();\n\n        options = options || {};\n\n        if (typeof options === 'string') {\n            options = {\n                url: options\n            };\n        }\n\n        let urlData;\n        let service = options.service;\n\n        if (typeof options.getSocket === 'function') {\n            this.getSocket = options.getSocket;\n        }\n\n        if (options.url) {\n            urlData = shared.parseConnectionUrl(options.url);\n            service = service || urlData.service;\n        }\n\n        this.options = shared.assign(\n            false, // create new object\n            options, // regular options\n            urlData, // url options\n            service && wellKnown(service) // wellknown options\n        );\n\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || 'smtp-transport'\n        });\n\n        // temporary object\n        let connection = new SMTPConnection(this.options);\n\n        this.name = 'SMTP';\n        this.version = packageData.version + '[client:' + connection.version + ']';\n\n        if (this.options.auth) {\n            this.auth = this.getAuth({});\n        }\n    }\n\n    /**\n     * Placeholder function for creating proxy sockets. This method immediatelly returns\n     * without a socket\n     *\n     * @param {Object} options Connection options\n     * @param {Function} callback Callback function to run with the socket keys\n     */\n    getSocket(options, callback) {\n        // return immediatelly\n        return setImmediate(() => callback(null, false));\n    }\n\n    getAuth(authOpts) {\n        if (!authOpts) {\n            return this.auth;\n        }\n\n        let hasAuth = false;\n        let authData = {};\n\n        if (this.options.auth && typeof this.options.auth === 'object') {\n            Object.keys(this.options.auth).forEach(key => {\n                hasAuth = true;\n                authData[key] = this.options.auth[key];\n            });\n        }\n\n        if (authOpts && typeof authOpts === 'object') {\n            Object.keys(authOpts).forEach(key => {\n                hasAuth = true;\n                authData[key] = authOpts[key];\n            });\n        }\n\n        if (!hasAuth) {\n            return false;\n        }\n\n        switch ((authData.type || '').toString().toUpperCase()) {\n            case 'OAUTH2': {\n                if (!authData.service && !authData.user) {\n                    return false;\n                }\n                let oauth2 = new XOAuth2(authData, this.logger);\n                oauth2.provisionCallback = (this.mailer && this.mailer.get('oauth2_provision_cb')) || oauth2.provisionCallback;\n                oauth2.on('token', token => this.mailer.emit('token', token));\n                oauth2.on('error', err => this.emit('error', err));\n                return {\n                    type: 'OAUTH2',\n                    user: authData.user,\n                    oauth2,\n                    method: 'XOAUTH2'\n                };\n            }\n            default:\n                return {\n                    type: (authData.type || '').toString().toUpperCase() || 'LOGIN',\n                    user: authData.user,\n                    credentials: {\n                        user: authData.user || '',\n                        pass: authData.pass,\n                        options: authData.options\n                    },\n                    method: (authData.method || '').trim().toUpperCase() || this.options.authMethod || false\n                };\n        }\n    }\n\n    /**\n     * Sends an e-mail using the selected settings\n     *\n     * @param {Object} mail Mail object\n     * @param {Function} callback Callback function\n     */\n    send(mail, callback) {\n        this.getSocket(this.options, (err, socketOptions) => {\n            if (err) {\n                return callback(err);\n            }\n\n            let returned = false;\n            let options = this.options;\n            if (socketOptions && socketOptions.connection) {\n                this.logger.info(\n                    {\n                        tnx: 'proxy',\n                        remoteAddress: socketOptions.connection.remoteAddress,\n                        remotePort: socketOptions.connection.remotePort,\n                        destHost: options.host || '',\n                        destPort: options.port || '',\n                        action: 'connected'\n                    },\n                    'Using proxied socket from %s:%s to %s:%s',\n                    socketOptions.connection.remoteAddress,\n                    socketOptions.connection.remotePort,\n                    options.host || '',\n                    options.port || ''\n                );\n\n                // only copy options if we need to modify it\n                options = shared.assign(false, options);\n                Object.keys(socketOptions).forEach(key => {\n                    options[key] = socketOptions[key];\n                });\n            }\n\n            let connection = new SMTPConnection(options);\n\n            connection.once('error', err => {\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                connection.close();\n                return callback(err);\n            });\n\n            connection.once('end', () => {\n                if (returned) {\n                    return;\n                }\n\n                let timer = setTimeout(() => {\n                    if (returned) {\n                        return;\n                    }\n                    returned = true;\n                    // still have not returned, this means we have an unexpected connection close\n                    let err = new Error('Unexpected socket close');\n                    if (connection && connection._socket && connection._socket.upgrading) {\n                        // starttls connection errors\n                        err.code = 'ETLS';\n                    }\n                    callback(err);\n                }, 1000);\n\n                try {\n                    timer.unref();\n                } catch (E) {\n                    // Ignore. Happens on envs with non-node timer implementation\n                }\n            });\n\n            let sendMessage = () => {\n                let envelope = mail.message.getEnvelope();\n                let messageId = mail.message.messageId();\n\n                let recipients = [].concat(envelope.to || []);\n                if (recipients.length > 3) {\n                    recipients.push('...and ' + recipients.splice(2).length + ' more');\n                }\n\n                if (mail.data.dsn) {\n                    envelope.dsn = mail.data.dsn;\n                }\n\n                this.logger.info(\n                    {\n                        tnx: 'send',\n                        messageId\n                    },\n                    'Sending message %s to <%s>',\n                    messageId,\n                    recipients.join(', ')\n                );\n\n                connection.send(envelope, mail.message.createReadStream(), (err, info) => {\n                    returned = true;\n                    connection.close();\n                    if (err) {\n                        this.logger.error(\n                            {\n                                err,\n                                tnx: 'send'\n                            },\n                            'Send error for %s: %s',\n                            messageId,\n                            err.message\n                        );\n                        return callback(err);\n                    }\n                    info.envelope = {\n                        from: envelope.from,\n                        to: envelope.to\n                    };\n                    info.messageId = messageId;\n                    try {\n                        return callback(null, info);\n                    } catch (E) {\n                        this.logger.error(\n                            {\n                                err: E,\n                                tnx: 'callback'\n                            },\n                            'Callback error for %s: %s',\n                            messageId,\n                            E.message\n                        );\n                    }\n                });\n            };\n\n            connection.connect(() => {\n                if (returned) {\n                    return;\n                }\n\n                let auth = this.getAuth(mail.data.auth);\n\n                if (auth && (connection.allowsAuth || options.forceAuth)) {\n                    connection.login(auth, err => {\n                        if (auth && auth !== this.auth && auth.oauth2) {\n                            auth.oauth2.removeAllListeners();\n                        }\n                        if (returned) {\n                            return;\n                        }\n\n                        if (err) {\n                            returned = true;\n                            connection.close();\n                            return callback(err);\n                        }\n\n                        sendMessage();\n                    });\n                } else {\n                    sendMessage();\n                }\n            });\n        });\n    }\n\n    /**\n     * Verifies SMTP configuration\n     *\n     * @param {Function} callback Callback function\n     */\n    verify(callback) {\n        let promise;\n\n        if (!callback) {\n            promise = new Promise((resolve, reject) => {\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n\n        this.getSocket(this.options, (err, socketOptions) => {\n            if (err) {\n                return callback(err);\n            }\n\n            let options = this.options;\n            if (socketOptions && socketOptions.connection) {\n                this.logger.info(\n                    {\n                        tnx: 'proxy',\n                        remoteAddress: socketOptions.connection.remoteAddress,\n                        remotePort: socketOptions.connection.remotePort,\n                        destHost: options.host || '',\n                        destPort: options.port || '',\n                        action: 'connected'\n                    },\n                    'Using proxied socket from %s:%s to %s:%s',\n                    socketOptions.connection.remoteAddress,\n                    socketOptions.connection.remotePort,\n                    options.host || '',\n                    options.port || ''\n                );\n\n                options = shared.assign(false, options);\n                Object.keys(socketOptions).forEach(key => {\n                    options[key] = socketOptions[key];\n                });\n            }\n\n            let connection = new SMTPConnection(options);\n            let returned = false;\n\n            connection.once('error', err => {\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                connection.close();\n                return callback(err);\n            });\n\n            connection.once('end', () => {\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                return callback(new Error('Connection closed'));\n            });\n\n            let finalize = () => {\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                connection.quit();\n                return callback(null, true);\n            };\n\n            connection.connect(() => {\n                if (returned) {\n                    return;\n                }\n\n                let authData = this.getAuth({});\n\n                if (authData && (connection.allowsAuth || options.forceAuth)) {\n                    connection.login(authData, err => {\n                        if (returned) {\n                            return;\n                        }\n\n                        if (err) {\n                            returned = true;\n                            connection.close();\n                            return callback(err);\n                        }\n\n                        finalize();\n                    });\n                } else if (!authData && connection.allowsAuth && options.forceAuth) {\n                    let err = new Error('Authentication info was not provided');\n                    err.code = 'NoAuth';\n\n                    returned = true;\n                    connection.close();\n                    return callback(err);\n                } else {\n                    finalize();\n                }\n            });\n        });\n\n        return promise;\n    }\n\n    /**\n     * Releases resources\n     */\n    close() {\n        if (this.auth && this.auth.oauth2) {\n            this.auth.oauth2.removeAllListeners();\n        }\n        this.emit('close');\n    }\n}\n\n// expose to the world\nmodule.exports = SMTPTransport;\n", "'use strict';\n\nconst spawn = require('child_process').spawn;\nconst packageData = require('../../package.json');\nconst shared = require('../shared');\n\n/**\n * Generates a Transport object for Sendmail\n *\n * Possible options can be the following:\n *\n *  * **path** optional path to sendmail binary\n *  * **newline** either 'windows' or 'unix'\n *  * **args** an array of arguments for the sendmail binary\n *\n * @constructor\n * @param {Object} optional config parameter for Sendmail\n */\nclass SendmailTransport {\n    constructor(options) {\n        options = options || {};\n\n        // use a reference to spawn for mocking purposes\n        this._spawn = spawn;\n\n        this.options = options || {};\n\n        this.name = 'Sendmail';\n        this.version = packageData.version;\n\n        this.path = 'sendmail';\n        this.args = false;\n        this.winbreak = false;\n\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || 'sendmail'\n        });\n\n        if (options) {\n            if (typeof options === 'string') {\n                this.path = options;\n            } else if (typeof options === 'object') {\n                if (options.path) {\n                    this.path = options.path;\n                }\n                if (Array.isArray(options.args)) {\n                    this.args = options.args;\n                }\n                this.winbreak = ['win', 'windows', 'dos', '\\r\\n'].includes((options.newline || '').toString().toLowerCase());\n            }\n        }\n    }\n\n    /**\n     * <p>Compiles a mailcomposer message and forwards it to handler that sends it.</p>\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */\n    send(mail, done) {\n        // Sendmail strips this header line by itself\n        mail.message.keepBcc = true;\n\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n        let args;\n        let sendmail;\n        let returned;\n\n        const hasInvalidAddresses = []\n            .concat(envelope.from || [])\n            .concat(envelope.to || [])\n            .some(addr => /^-/.test(addr));\n        if (hasInvalidAddresses) {\n            return done(new Error('Can not send mail. Invalid envelope addresses.'));\n        }\n\n        if (this.args) {\n            // force -i to keep single dots\n            args = ['-i'].concat(this.args).concat(envelope.to);\n        } else {\n            args = ['-i'].concat(envelope.from ? ['-f', envelope.from] : []).concat(envelope.to);\n        }\n\n        let callback = err => {\n            if (returned) {\n                // ignore any additional responses, already done\n                return;\n            }\n            returned = true;\n            if (typeof done === 'function') {\n                if (err) {\n                    return done(err);\n                } else {\n                    return done(null, {\n                        envelope: mail.data.envelope || mail.message.getEnvelope(),\n                        messageId,\n                        response: 'Messages queued for delivery'\n                    });\n                }\n            }\n        };\n\n        try {\n            sendmail = this._spawn(this.path, args);\n        } catch (E) {\n            this.logger.error(\n                {\n                    err: E,\n                    tnx: 'spawn',\n                    messageId\n                },\n                'Error occurred while spawning sendmail. %s',\n                E.message\n            );\n            return callback(E);\n        }\n\n        if (sendmail) {\n            sendmail.on('error', err => {\n                this.logger.error(\n                    {\n                        err,\n                        tnx: 'spawn',\n                        messageId\n                    },\n                    'Error occurred when sending message %s. %s',\n                    messageId,\n                    err.message\n                );\n                callback(err);\n            });\n\n            sendmail.once('exit', code => {\n                if (!code) {\n                    return callback();\n                }\n                let err;\n                if (code === 127) {\n                    err = new Error('Sendmail command not found, process exited with code ' + code);\n                } else {\n                    err = new Error('Sendmail exited with code ' + code);\n                }\n\n                this.logger.error(\n                    {\n                        err,\n                        tnx: 'stdin',\n                        messageId\n                    },\n                    'Error sending message %s to sendmail. %s',\n                    messageId,\n                    err.message\n                );\n                callback(err);\n            });\n            sendmail.once('close', callback);\n\n            sendmail.stdin.on('error', err => {\n                this.logger.error(\n                    {\n                        err,\n                        tnx: 'stdin',\n                        messageId\n                    },\n                    'Error occurred when piping message %s to sendmail. %s',\n                    messageId,\n                    err.message\n                );\n                callback(err);\n            });\n\n            let recipients = [].concat(envelope.to || []);\n            if (recipients.length > 3) {\n                recipients.push('...and ' + recipients.splice(2).length + ' more');\n            }\n            this.logger.info(\n                {\n                    tnx: 'send',\n                    messageId\n                },\n                'Sending message %s to <%s>',\n                messageId,\n                recipients.join(', ')\n            );\n\n            let sourceStream = mail.message.createReadStream();\n            sourceStream.once('error', err => {\n                this.logger.error(\n                    {\n                        err,\n                        tnx: 'stdin',\n                        messageId\n                    },\n                    'Error occurred when generating message %s. %s',\n                    messageId,\n                    err.message\n                );\n                sendmail.kill('SIGINT'); // do not deliver the message\n                callback(err);\n            });\n\n            sourceStream.pipe(sendmail.stdin);\n        } else {\n            return callback(new Error('sendmail was not found'));\n        }\n    }\n}\n\nmodule.exports = SendmailTransport;\n", "'use strict';\n\nconst packageData = require('../../package.json');\nconst shared = require('../shared');\n\n/**\n * Generates a Transport object for streaming\n *\n * Possible options can be the following:\n *\n *  * **buffer** if true, then returns the message as a Buffer object instead of a stream\n *  * **newline** either 'windows' or 'unix'\n *\n * @constructor\n * @param {Object} optional config parameter\n */\nclass StreamTransport {\n    constructor(options) {\n        options = options || {};\n\n        this.options = options || {};\n\n        this.name = 'StreamTransport';\n        this.version = packageData.version;\n\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || 'stream-transport'\n        });\n\n        this.winbreak = ['win', 'windows', 'dos', '\\r\\n'].includes((options.newline || '').toString().toLowerCase());\n    }\n\n    /**\n     * Compiles a mailcomposer message and forwards it to handler that sends it\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */\n    send(mail, done) {\n        // We probably need this in the output\n        mail.message.keepBcc = true;\n\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push('...and ' + recipients.splice(2).length + ' more');\n        }\n        this.logger.info(\n            {\n                tnx: 'send',\n                messageId\n            },\n            'Sending message %s to <%s> using %s line breaks',\n            messageId,\n            recipients.join(', '),\n            this.winbreak ? '<CR><LF>' : '<LF>'\n        );\n\n        setImmediate(() => {\n            let stream;\n\n            try {\n                stream = mail.message.createReadStream();\n            } catch (E) {\n                this.logger.error(\n                    {\n                        err: E,\n                        tnx: 'send',\n                        messageId\n                    },\n                    'Creating send stream failed for %s. %s',\n                    messageId,\n                    E.message\n                );\n                return done(E);\n            }\n\n            if (!this.options.buffer) {\n                stream.once('error', err => {\n                    this.logger.error(\n                        {\n                            err,\n                            tnx: 'send',\n                            messageId\n                        },\n                        'Failed creating message for %s. %s',\n                        messageId,\n                        err.message\n                    );\n                });\n                return done(null, {\n                    envelope: mail.data.envelope || mail.message.getEnvelope(),\n                    messageId,\n                    message: stream\n                });\n            }\n\n            let chunks = [];\n            let chunklen = 0;\n            stream.on('readable', () => {\n                let chunk;\n                while ((chunk = stream.read()) !== null) {\n                    chunks.push(chunk);\n                    chunklen += chunk.length;\n                }\n            });\n\n            stream.once('error', err => {\n                this.logger.error(\n                    {\n                        err,\n                        tnx: 'send',\n                        messageId\n                    },\n                    'Failed creating message for %s. %s',\n                    messageId,\n                    err.message\n                );\n                return done(err);\n            });\n\n            stream.on('end', () =>\n                done(null, {\n                    envelope: mail.data.envelope || mail.message.getEnvelope(),\n                    messageId,\n                    message: Buffer.concat(chunks, chunklen)\n                })\n            );\n        });\n    }\n}\n\nmodule.exports = StreamTransport;\n", "'use strict';\n\nconst packageData = require('../../package.json');\nconst shared = require('../shared');\n\n/**\n * Generates a Transport object to generate JSON output\n *\n * @constructor\n * @param {Object} optional config parameter\n */\nclass JSONTransport {\n    constructor(options) {\n        options = options || {};\n\n        this.options = options || {};\n\n        this.name = 'JSONTransport';\n        this.version = packageData.version;\n\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || 'json-transport'\n        });\n    }\n\n    /**\n     * <p>Compiles a mailcomposer message and forwards it to handler that sends it.</p>\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */\n    send(mail, done) {\n        // Sendmail strips this header line by itself\n        mail.message.keepBcc = true;\n\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push('...and ' + recipients.splice(2).length + ' more');\n        }\n        this.logger.info(\n            {\n                tnx: 'send',\n                messageId\n            },\n            'Composing JSON structure of %s to <%s>',\n            messageId,\n            recipients.join(', ')\n        );\n\n        setImmediate(() => {\n            mail.normalize((err, data) => {\n                if (err) {\n                    this.logger.error(\n                        {\n                            err,\n                            tnx: 'send',\n                            messageId\n                        },\n                        'Failed building JSON structure for %s. %s',\n                        messageId,\n                        err.message\n                    );\n                    return done(err);\n                }\n\n                delete data.envelope;\n                delete data.normalizedHeaders;\n\n                return done(null, {\n                    envelope,\n                    messageId,\n                    message: this.options.skipEncoding ? data : JSON.stringify(data)\n                });\n            });\n        });\n    }\n}\n\nmodule.exports = JSONTransport;\n", "'use strict';\n\nconst EventEmitter = require('events');\nconst packageData = require('../../package.json');\nconst shared = require('../shared');\nconst LeWindows = require('../mime-node/le-windows');\n\n/**\n * Generates a Transport object for AWS SES\n *\n * Possible options can be the following:\n *\n *  * **sendingRate** optional Number specifying how many messages per second should be delivered to SES\n *  * **maxConnections** optional Number specifying max number of parallel connections to SES\n *\n * @constructor\n * @param {Object} optional config parameter\n */\nclass SESTransport extends EventEmitter {\n    constructor(options) {\n        super();\n        options = options || {};\n\n        this.options = options || {};\n        this.ses = this.options.SES;\n\n        this.name = 'SESTransport';\n        this.version = packageData.version;\n\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || 'ses-transport'\n        });\n\n        // parallel sending connections\n        this.maxConnections = Number(this.options.maxConnections) || Infinity;\n        this.connections = 0;\n\n        // max messages per second\n        this.sendingRate = Number(this.options.sendingRate) || Infinity;\n        this.sendingRateTTL = null;\n        this.rateInterval = 1000; // milliseconds\n        this.rateMessages = [];\n\n        this.pending = [];\n\n        this.idling = true;\n\n        setImmediate(() => {\n            if (this.idling) {\n                this.emit('idle');\n            }\n        });\n    }\n\n    /**\n     * Schedules a sending of a message\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */\n    send(mail, callback) {\n        if (this.connections >= this.maxConnections) {\n            this.idling = false;\n            return this.pending.push({\n                mail,\n                callback\n            });\n        }\n\n        if (!this._checkSendingRate()) {\n            this.idling = false;\n            return this.pending.push({\n                mail,\n                callback\n            });\n        }\n\n        this._send(mail, (...args) => {\n            setImmediate(() => callback(...args));\n            this._sent();\n        });\n    }\n\n    _checkRatedQueue() {\n        if (this.connections >= this.maxConnections || !this._checkSendingRate()) {\n            return;\n        }\n\n        if (!this.pending.length) {\n            if (!this.idling) {\n                this.idling = true;\n                this.emit('idle');\n            }\n            return;\n        }\n\n        let next = this.pending.shift();\n        this._send(next.mail, (...args) => {\n            setImmediate(() => next.callback(...args));\n            this._sent();\n        });\n    }\n\n    _checkSendingRate() {\n        clearTimeout(this.sendingRateTTL);\n\n        let now = Date.now();\n        let oldest = false;\n        // delete older messages\n        for (let i = this.rateMessages.length - 1; i >= 0; i--) {\n            if (this.rateMessages[i].ts >= now - this.rateInterval && (!oldest || this.rateMessages[i].ts < oldest)) {\n                oldest = this.rateMessages[i].ts;\n            }\n\n            if (this.rateMessages[i].ts < now - this.rateInterval && !this.rateMessages[i].pending) {\n                this.rateMessages.splice(i, 1);\n            }\n        }\n\n        if (this.rateMessages.length < this.sendingRate) {\n            return true;\n        }\n\n        let delay = Math.max(oldest + 1001, now + 20);\n        this.sendingRateTTL = setTimeout(() => this._checkRatedQueue(), now - delay);\n\n        try {\n            this.sendingRateTTL.unref();\n        } catch (E) {\n            // Ignore. Happens on envs with non-node timer implementation\n        }\n\n        return false;\n    }\n\n    _sent() {\n        this.connections--;\n        this._checkRatedQueue();\n    }\n\n    /**\n     * Returns true if there are free slots in the queue\n     */\n    isIdle() {\n        return this.idling;\n    }\n\n    /**\n     * Compiles a mailcomposer message and forwards it to SES\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */\n    _send(mail, callback) {\n        let statObject = {\n            ts: Date.now(),\n            pending: true\n        };\n        this.connections++;\n        this.rateMessages.push(statObject);\n\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push('...and ' + recipients.splice(2).length + ' more');\n        }\n        this.logger.info(\n            {\n                tnx: 'send',\n                messageId\n            },\n            'Sending message %s to <%s>',\n            messageId,\n            recipients.join(', ')\n        );\n\n        let getRawMessage = next => {\n            // do not use Message-ID and Date in DKIM signature\n            if (!mail.data._dkim) {\n                mail.data._dkim = {};\n            }\n            if (mail.data._dkim.skipFields && typeof mail.data._dkim.skipFields === 'string') {\n                mail.data._dkim.skipFields += ':date:message-id';\n            } else {\n                mail.data._dkim.skipFields = 'date:message-id';\n            }\n\n            let sourceStream = mail.message.createReadStream();\n            let stream = sourceStream.pipe(new LeWindows());\n            let chunks = [];\n            let chunklen = 0;\n\n            stream.on('readable', () => {\n                let chunk;\n                while ((chunk = stream.read()) !== null) {\n                    chunks.push(chunk);\n                    chunklen += chunk.length;\n                }\n            });\n\n            sourceStream.once('error', err => stream.emit('error', err));\n\n            stream.once('error', err => {\n                next(err);\n            });\n\n            stream.once('end', () => next(null, Buffer.concat(chunks, chunklen)));\n        };\n\n        setImmediate(() =>\n            getRawMessage((err, raw) => {\n                if (err) {\n                    this.logger.error(\n                        {\n                            err,\n                            tnx: 'send',\n                            messageId\n                        },\n                        'Failed creating message for %s. %s',\n                        messageId,\n                        err.message\n                    );\n                    statObject.pending = false;\n                    return callback(err);\n                }\n\n                let sesMessage = {\n                    RawMessage: {\n                        // required\n                        Data: raw // required\n                    },\n                    Source: envelope.from,\n                    Destinations: envelope.to\n                };\n\n                Object.keys(mail.data.ses || {}).forEach(key => {\n                    sesMessage[key] = mail.data.ses[key];\n                });\n\n                let ses = (this.ses.aws ? this.ses.ses : this.ses) || {};\n                let aws = this.ses.aws || {};\n\n                let getRegion = cb => {\n                    if (ses.config && typeof ses.config.region === 'function') {\n                        // promise\n                        return ses.config\n                            .region()\n                            .then(region => cb(null, region))\n                            .catch(err => cb(err));\n                    }\n                    return cb(null, (ses.config && ses.config.region) || 'us-east-1');\n                };\n\n                getRegion((err, region) => {\n                    if (err || !region) {\n                        region = 'us-east-1';\n                    }\n\n                    let sendPromise;\n                    if (typeof ses.send === 'function' && aws.SendRawEmailCommand) {\n                        // v3 API\n                        sendPromise = ses.send(new aws.SendRawEmailCommand(sesMessage));\n                    } else {\n                        // v2 API\n                        sendPromise = ses.sendRawEmail(sesMessage).promise();\n                    }\n\n                    sendPromise\n                        .then(data => {\n                            if (region === 'us-east-1') {\n                                region = 'email';\n                            }\n\n                            statObject.pending = false;\n                            callback(null, {\n                                envelope: {\n                                    from: envelope.from,\n                                    to: envelope.to\n                                },\n                                messageId: '<' + data.MessageId + (!/@/.test(data.MessageId) ? '@' + region + '.amazonses.com' : '') + '>',\n                                response: data.MessageId,\n                                raw\n                            });\n                        })\n                        .catch(err => {\n                            this.logger.error(\n                                {\n                                    err,\n                                    tnx: 'send'\n                                },\n                                'Send error for %s: %s',\n                                messageId,\n                                err.message\n                            );\n                            statObject.pending = false;\n                            callback(err);\n                        });\n                });\n            })\n        );\n    }\n\n    /**\n     * Verifies SES configuration\n     *\n     * @param {Function} callback Callback function\n     */\n    verify(callback) {\n        let promise;\n        let ses = (this.ses.aws ? this.ses.ses : this.ses) || {};\n        let aws = this.ses.aws || {};\n\n        const sesMessage = {\n            RawMessage: {\n                // required\n                Data: 'From: invalid@invalid\\r\\nTo: invalid@invalid\\r\\n Subject: Invalid\\r\\n\\r\\nInvalid'\n            },\n            Source: 'invalid@invalid',\n            Destinations: ['invalid@invalid']\n        };\n\n        if (!callback) {\n            promise = new Promise((resolve, reject) => {\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n        const cb = err => {\n            if (err && (err.code || err.Code) !== 'InvalidParameterValue') {\n                return callback(err);\n            }\n            return callback(null, true);\n        };\n\n        if (typeof ses.send === 'function' && aws.SendRawEmailCommand) {\n            // v3 API\n            sesMessage.RawMessage.Data = Buffer.from(sesMessage.RawMessage.Data);\n            ses.send(new aws.SendRawEmailCommand(sesMessage), cb);\n        } else {\n            // v2 API\n            ses.sendRawEmail(sesMessage, cb);\n        }\n\n        return promise;\n    }\n}\n\nmodule.exports = SESTransport;\n", "'use strict';\n\nconst Mailer = require('./mailer');\nconst shared = require('./shared');\nconst SMTPPool = require('./smtp-pool');\nconst SMTPTransport = require('./smtp-transport');\nconst SendmailTransport = require('./sendmail-transport');\nconst StreamTransport = require('./stream-transport');\nconst JSONTransport = require('./json-transport');\nconst SESTransport = require('./ses-transport');\nconst nmfetch = require('./fetch');\nconst packageData = require('../package.json');\n\nconst ETHEREAL_API = (process.env.ETHEREAL_API || 'https://api.nodemailer.com').replace(/\\/+$/, '');\nconst ETHEREAL_WEB = (process.env.ETHEREAL_WEB || 'https://ethereal.email').replace(/\\/+$/, '');\nconst ETHEREAL_API_KEY = (process.env.ETHEREAL_API_KEY || '').replace(/\\s*/g, '') || null;\nconst ETHEREAL_CACHE = ['true', 'yes', 'y', '1'].includes((process.env.ETHEREAL_CACHE || 'yes').toString().trim().toLowerCase());\n\nlet testAccount = false;\n\nmodule.exports.createTransport = function (transporter, defaults) {\n    let urlConfig;\n    let options;\n    let mailer;\n\n    if (\n        // provided transporter is a configuration object, not transporter plugin\n        (typeof transporter === 'object' && typeof transporter.send !== 'function') ||\n        // provided transporter looks like a connection url\n        (typeof transporter === 'string' && /^(smtps?|direct):/i.test(transporter))\n    ) {\n        if ((urlConfig = typeof transporter === 'string' ? transporter : transporter.url)) {\n            // parse a configuration URL into configuration options\n            options = shared.parseConnectionUrl(urlConfig);\n        } else {\n            options = transporter;\n        }\n\n        if (options.pool) {\n            transporter = new SMTPPool(options);\n        } else if (options.sendmail) {\n            transporter = new SendmailTransport(options);\n        } else if (options.streamTransport) {\n            transporter = new StreamTransport(options);\n        } else if (options.jsonTransport) {\n            transporter = new JSONTransport(options);\n        } else if (options.SES) {\n            transporter = new SESTransport(options);\n        } else {\n            transporter = new SMTPTransport(options);\n        }\n    }\n\n    mailer = new Mailer(transporter, options, defaults);\n\n    return mailer;\n};\n\nmodule.exports.createTestAccount = function (apiUrl, callback) {\n    let promise;\n\n    if (!callback && typeof apiUrl === 'function') {\n        callback = apiUrl;\n        apiUrl = false;\n    }\n\n    if (!callback) {\n        promise = new Promise((resolve, reject) => {\n            callback = shared.callbackPromise(resolve, reject);\n        });\n    }\n\n    if (ETHEREAL_CACHE && testAccount) {\n        setImmediate(() => callback(null, testAccount));\n        return promise;\n    }\n\n    apiUrl = apiUrl || ETHEREAL_API;\n\n    let chunks = [];\n    let chunklen = 0;\n\n    let requestHeaders = {};\n    let requestBody = {\n        requestor: packageData.name,\n        version: packageData.version\n    };\n\n    if (ETHEREAL_API_KEY) {\n        requestHeaders.Authorization = 'Bearer ' + ETHEREAL_API_KEY;\n    }\n\n    let req = nmfetch(apiUrl + '/user', {\n        contentType: 'application/json',\n        method: 'POST',\n        headers: requestHeaders,\n        body: Buffer.from(JSON.stringify(requestBody))\n    });\n\n    req.on('readable', () => {\n        let chunk;\n        while ((chunk = req.read()) !== null) {\n            chunks.push(chunk);\n            chunklen += chunk.length;\n        }\n    });\n\n    req.once('error', err => callback(err));\n\n    req.once('end', () => {\n        let res = Buffer.concat(chunks, chunklen);\n        let data;\n        let err;\n        try {\n            data = JSON.parse(res.toString());\n        } catch (E) {\n            err = E;\n        }\n        if (err) {\n            return callback(err);\n        }\n        if (data.status !== 'success' || data.error) {\n            return callback(new Error(data.error || 'Request failed'));\n        }\n        delete data.status;\n        testAccount = data;\n        callback(null, testAccount);\n    });\n\n    return promise;\n};\n\nmodule.exports.getTestMessageUrl = function (info) {\n    if (!info || !info.response) {\n        return false;\n    }\n\n    let infoProps = new Map();\n    info.response.replace(/\\[([^\\]]+)\\]$/, (m, props) => {\n        props.replace(/\\b([A-Z0-9]+)=([^\\s]+)/g, (m, key, value) => {\n            infoProps.set(key, value);\n        });\n    });\n\n    if (infoProps.has('STATUS') && infoProps.has('MSGID')) {\n        return (testAccount.web || ETHEREAL_WEB) + '/message/' + infoProps.get('MSGID');\n    }\n\n    return false;\n};\n", "const { Pool } = require(\"pg\");\r\nconst nodemailer = require(\"nodemailer\");\r\n\r\n// Configura\u00E7\u00E3o do Pool (evita erro de \"Client already connected\")\r\nconst pool = new Pool({\r\n  connectionString: process.env.DATABASE_URL,\r\n  ssl: { rejectUnauthorized: false },\r\n});\r\n\r\n// Configura\u00E7\u00E3o do Nodemailer\r\nconst transporter = nodemailer.createTransport({\r\n  service: \"gmail\",\r\n  auth: {\r\n    user: process.env.EMAIL_USER, // seu e-mail\r\n    pass: process.env.GMAIL_APP_PASSWORD, // senha ou App Password\r\n  },\r\n});\r\n\r\n// Fun\u00E7\u00E3o para formatar a data corretamente\r\nfunction formatDatePTBR(dateStr) {\r\n  const [year, month, day] = dateStr.split(\"-\").map(Number);\r\n  const dateObj = new Date(year, month - 1, day); // m\u00EAs zero-indexado\r\n  const weekdays = [\r\n    \"domingo\",\r\n    \"segunda-feira\",\r\n    \"ter\u00E7a-feira\",\r\n    \"quarta-feira\",\r\n    \"quinta-feira\",\r\n    \"sexta-feira\",\r\n    \"s\u00E1bado\",\r\n  ];\r\n  const months = [\r\n    \"janeiro\",\r\n    \"fevereiro\",\r\n    \"mar\u00E7o\",\r\n    \"abril\",\r\n    \"maio\",\r\n    \"junho\",\r\n    \"julho\",\r\n    \"agosto\",\r\n    \"setembro\",\r\n    \"outubro\",\r\n    \"novembro\",\r\n    \"dezembro\",\r\n  ];\r\n\r\n  const weekday = weekdays[dateObj.getDay()];\r\n  const monthName = months[dateObj.getMonth()];\r\n\r\n  return `${day} de ${monthName} (${weekday})`;\r\n}\r\n\r\n// Fun\u00E7\u00E3o principal do Netlify\r\nexports.handler = async (event) => {\r\n  if (event.httpMethod !== \"POST\") {\r\n    return { statusCode: 405, body: \"Method Not Allowed\" };\r\n  }\r\n\r\n  let data;\r\n  try {\r\n    data = JSON.parse(event.body);\r\n  } catch {\r\n    return { statusCode: 400, body: \"Invalid JSON\" };\r\n  }\r\n\r\n  const {\r\n    fullName,\r\n    email,\r\n    phone,\r\n    propertyAddress,\r\n    profile,\r\n    otherProfileDescription, // mantido no destructuring\r\n    query,\r\n    companyName,\r\n    role,\r\n    companyAddress,\r\n    lgpdConsent,\r\n    date,\r\n    selectedTimes,\r\n  } = data;\r\n\r\n  try {\r\n    // Verifica quantos agendamentos j\u00E1 existem para a mesma data e hora\r\n    const check = await pool.query(\r\n      `SELECT COUNT(*) AS total \r\n       FROM appointments \r\n       WHERE appt_date = $1 AND appt_time = $2`,\r\n      [date, selectedTimes.preference]\r\n    );\r\n\r\n    const total = parseInt(check.rows[0].total, 10);\r\n\r\n    if (total >= 40) {\r\n      return {\r\n        statusCode: 400,\r\n        body: JSON.stringify({\r\n          success: false,\r\n          message: \"Esse hor\u00E1rio j\u00E1 atingiu o limite de 40 agendamentos.\",\r\n        }),\r\n      };\r\n    }\r\n\r\n    // Insere o agendamento no banco (sem otherProfileDescription)\r\n    const res = await pool.query(\r\n      `INSERT INTO appointments (\r\n        full_name,\r\n        email,\r\n        phone,\r\n        property_address,\r\n        profile,\r\n        query,\r\n        company_name,\r\n        role,\r\n        company_address,\r\n        lgpd_consent,\r\n        appt_date,\r\n        appt_time\r\n      ) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) RETURNING id`,\r\n      [\r\n        fullName,\r\n        email,\r\n        phone,\r\n        propertyAddress,\r\n        profile,\r\n        query,\r\n        companyName,\r\n        role,\r\n        companyAddress,\r\n        lgpdConsent,\r\n        date,\r\n        selectedTimes.preference,\r\n      ]\r\n    );\r\n\r\n    const appointmentId = res.rows[0].id;\r\n\r\n    // Formata a data para o e-mail\r\n    const formattedDate = formatDatePTBR(date);\r\n\r\n    // Enviar e-mail de confirma\u00E7\u00E3o\r\n    await transporter.sendMail({\r\n      from: process.env.EMAIL_USER,\r\n      to: email + \"; jucicleide.silva@recife.pe.gov.br; francisco.aires@recife.pe.gov.br\",\r\n      subject: \"Confirma\u00E7\u00E3o de Agendamento - Atende Recentro 2025\",\r\n      html: `\r\n        <div style=\"font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; background-color: #f9f9f9; padding: 20px;\">\r\n          <div style=\"max-width: 600px; margin: auto; background: #ffffff; padding: 30px; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.1);\">\r\n            \r\n            <h2 style=\"color: #1E40AF; margin-bottom: 10px;\">Ol\u00E1 ${fullName},</h2>\r\n            \r\n            <p style=\"font-size: 16px;\">Seu agendamento foi confirmado com sucesso! Seguem os detalhes:</p>\r\n\r\n            <div style=\"background-color: #EFF6FF; padding: 15px; border-radius: 6px; margin: 20px 0;\">\r\n              <p style=\"margin: 0; font-weight: bold; color: #1E40AF;\">\uD83D\uDCCD Local do Evento:</p>\r\n              <p style=\"margin: 5px 0 0 0;\">Complexo Ni\u00E1gara S.A. - Av. Rio Branco, 162 - Recife</p>\r\n            </div>\r\n\r\n            <ul style=\"padding-left: 20px; margin: 0 0 20px 0; list-style-type: disc;\">\r\n              <li><strong>Data:</strong> ${formattedDate}</li>\r\n              <li><strong>Hor\u00E1rio:</strong> ${selectedTimes.preference}</li>\r\n              <li><strong>Endere\u00E7o do im\u00F3vel:</strong> ${propertyAddress}</li>\r\n\r\n            </ul>\r\n\r\n            <p style=\"font-size: 16px;\">Estamos ansiosos para receb\u00EA-lo(a) no Atende Recentro 2025.</p>\r\n\r\n            <div style=\"margin-top: 30px; border-top: 1px solid #e0e0e0; padding-top: 15px; font-size: 14px; color: #555;\">\r\n              <p>Atenciosamente,</p>\r\n              <p><strong>Equipe Atende Recentro 2025</strong></p>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n      `,\r\n    });\r\n\r\n    return {\r\n      statusCode: 200,\r\n      body: JSON.stringify({ success: true, id: appointmentId }),\r\n    };\r\n  } catch (err) {\r\n    console.error(\"Erro ao processar agendamento:\", err);\r\n    return {\r\n      statusCode: 500,\r\n      body: JSON.stringify({ success: false, message: err.message }),\r\n    };\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": ["exports", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "bits", "value", "elementType", "i", "exports", "module", "exports", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "require_utils", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "config", "exports", "module", "exports", "module", "types", "exports", "module", "exports", "exports", "password", "query", "exports", "exports", "exports", "exports", "exports", "exports", "module", "getStream", "getSecureStream", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "Promise", "pool", "Pool", "err", "client", "response", "require_query", "exports", "module", "require_client", "exports", "module", "err", "exports", "module", "require_lib", "exports", "module", "Pool", "Client", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "networkInterfaces", "resolver", "err", "addresses", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "i", "key", "value", "exports", "module", "address", "addresses", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "key", "stream", "returned", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "key", "value", "comment", "exports", "module", "transporter", "err", "exports", "module", "exports", "module", "resolve", "reject", "stream", "err", "str", "exports", "module", "exports", "module", "pool", "err", "exports", "module", "exports", "module", "exports", "module", "err", "exports", "module", "err", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "err", "exports", "module", "transporter", "m"]
}
